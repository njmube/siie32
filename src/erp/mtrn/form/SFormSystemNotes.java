/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormSystemNotes.java
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataSystemNotes;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Juan Barajas
 */
public class SFormSystemNotes extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataSystemNotes moSystemNotes;
    private erp.lib.form.SFormComboBoxGroup moComboBoxGroup;
    private erp.lib.form.SFormField moFieldNote;
    private erp.lib.form.SFormField moFieldFkCategoryId;
    private erp.lib.form.SFormField moFieldFkClassId;
    private erp.lib.form.SFormField moFieldFkTypeId;
    private erp.lib.form.SFormField moFieldFkCurrencyId;
    private erp.lib.form.SFormField moFieldIsAutomatic;
    private erp.lib.form.SFormField moFieldIsPrintable;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormSystemNotes */
    public SFormSystemNotes(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaDocNumberSeries = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        jlDocNumberSeries = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlFkCategoryId = new javax.swing.JLabel();
        jcbFkCategoryId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel7 = new javax.swing.JPanel();
        jlFkClassId = new javax.swing.JLabel();
        jcbFkClassId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel8 = new javax.swing.JPanel();
        jlFkTypeId = new javax.swing.JLabel();
        jcbFkTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel10 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jcbFkCurrencyId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel9 = new javax.swing.JPanel();
        jckIsAutomatic = new javax.swing.JCheckBox();
        jckIsPrintable = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nota predefinida de documento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel12.setLayout(new java.awt.BorderLayout(0, 5));

        jtaDocNumberSeries.setColumns(20);
        jtaDocNumberSeries.setRows(5);
        jScrollPane1.setViewportView(jtaDocNumberSeries);

        jPanel12.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocNumberSeries.setText("Nota predeterminada: *");
        jlDocNumberSeries.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlDocNumberSeries);

        jPanel12.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkCategoryId.setText("Categoría de documento: *");
        jlFkCategoryId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlFkCategoryId);

        jcbFkCategoryId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCategoryId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel6.add(jcbFkCategoryId);

        jPanel3.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkClassId.setText("Clase de documento: *");
        jlFkClassId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlFkClassId);

        jcbFkClassId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkClassId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(jcbFkClassId);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkTypeId.setText("Tipo de documento: *");
        jlFkTypeId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlFkTypeId);

        jcbFkTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkTypeId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(jcbFkTypeId);

        jPanel3.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkCurrencyId.setText("Moneda: *");
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlFkCurrencyId);

        jcbFkCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(jcbFkCurrencyId);

        jPanel3.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckIsAutomatic.setText("Adición automática al crear");
        jckIsAutomatic.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(jckIsAutomatic);

        jckIsPrintable.setText("Impresión");
        jckIsPrintable.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jckIsPrintable);

        jckIsDeleted.setText("Registro eliminado");
        jPanel9.add(jckIsDeleted);

        jPanel3.add(jPanel9);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel3.add(jPanel4);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        setSize(new java.awt.Dimension(656, 388));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moComboBoxGroup = new SFormComboBoxGroup(miClient);

        moFieldNote = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtaDocNumberSeries, jlDocNumberSeries);
        moFieldNote.setLengthMax(255);
        moFieldFkCategoryId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCategoryId, jlFkCategoryId);
        moFieldFkClassId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkClassId, jlFkClassId);
        moFieldFkTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkTypeId, jlFkTypeId);
        moFieldFkCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldIsAutomatic = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsAutomatic);
        moFieldIsPrintable = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsPrintable);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldNote);
        mvFields.add(moFieldFkCategoryId);
        mvFields.add(moFieldFkClassId);
        mvFields.add(moFieldFkTypeId);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldIsAutomatic);
        mvFields.add(moFieldIsPrintable);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkCategoryId.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCategoryId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkClassId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCurrencyId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkTypeId;
    private javax.swing.JCheckBox jckIsAutomatic;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsPrintable;
    private javax.swing.JLabel jlDocNumberSeries;
    private javax.swing.JLabel jlFkCategoryId;
    private javax.swing.JLabel jlFkClassId;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlFkTypeId;
    private javax.swing.JTextArea jtaDocNumberSeries;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moSystemNotes = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jckIsDeleted.setEnabled(false);
        moComboBoxGroup.reset();
    }

    @Override
    public void formRefreshCatalogues() {
        moComboBoxGroup.clear();

        moComboBoxGroup.addComboBox(SDataConstants.TRNS_CT_DPS, jcbFkCategoryId);
        moComboBoxGroup.addComboBox(SDataConstants.TRNS_CL_DPS, jcbFkClassId);
        moComboBoxGroup.addComboBox(SDataConstants.TRNU_TP_DPS, jcbFkTypeId);

        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR, new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moSystemNotes = (SDataSystemNotes) registry;

        moFieldNote.setFieldValue(moSystemNotes.getNotes());
        moFieldFkCategoryId.setFieldValue(new int[] { moSystemNotes.getFkDpsCategoryId() });
        moFieldFkClassId.setFieldValue(new int[] { moSystemNotes.getFkDpsCategoryId(), moSystemNotes.getFkDpsClassId() });
        moFieldFkTypeId.setFieldValue(new int[] { moSystemNotes.getFkDpsCategoryId(), moSystemNotes.getFkDpsClassId(), moSystemNotes.getFkDpsTypeId() });
        moFieldFkCurrencyId.setFieldValue(new int[] { moSystemNotes.getFkCurrencyId() });
        moFieldIsAutomatic.setFieldValue(moSystemNotes.getIsAutomatic());
        moFieldIsPrintable.setFieldValue(moSystemNotes.getIsPrintable());
        moFieldIsDeleted.setFieldValue(moSystemNotes.getIsDeleted());

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moSystemNotes == null) {
            moSystemNotes = new SDataSystemNotes();
            moSystemNotes.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moSystemNotes.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moSystemNotes.setNotes(moFieldNote.getString());
        moSystemNotes.setFkDpsCategoryId(moFieldFkTypeId.getKeyAsIntArray()[0]);
        moSystemNotes.setFkDpsClassId(moFieldFkTypeId.getKeyAsIntArray()[1]);
        moSystemNotes.setFkDpsTypeId(moFieldFkTypeId.getKeyAsIntArray()[2]);
        moSystemNotes.setFkCurrencyId(moFieldFkCurrencyId.getKeyAsIntArray()[0]);
        moSystemNotes.setIsAutomatic(moFieldIsAutomatic.getBoolean());
        moSystemNotes.setIsPrintable(moFieldIsPrintable.getBoolean());
        moSystemNotes.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moSystemNotes;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
