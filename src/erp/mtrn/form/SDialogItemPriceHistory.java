/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableUtilities;
import erp.mbps.data.SDataBizPartner;
import erp.mitm.data.SDataItem;
import erp.mtrn.data.SDialogPriceHistoryRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;

/**
 *
 * @author Alfonso Flores
 */
public class SDialogItemPriceHistory extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneDetails;

    private boolean mbParamIsPurchase;
    private int[] manParamDocumentClass;
    private int mnParamBizPartnerId;
    private int mnParamItemId;

    /** Creates new form SDialogItemPriceHistory */
    public SDialogItemPriceHistory(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();

        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();
        jpDetail = new javax.swing.JPanel();
        jpTaskBar = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItemKey = new javax.swing.JTextField();
        jtfItem = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        jtfBizPartner = new javax.swing.JTextField();
        jtbFilterBizPartner = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        jlDocumentClass = new javax.swing.JLabel();
        jtfDocumentClassKey = new javax.swing.JTextField();
        jtfDocumentClass = new javax.swing.JTextField();
        jtbFilterDocumentClass = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Historial de precios");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(592, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Aceptar");
        jbClose.setToolTipText("[Ctrl + Enter]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jbClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jpDetail.setBorder(javax.swing.BorderFactory.createTitledBorder("Historial de precios:"));
        jpDetail.setLayout(new java.awt.BorderLayout());

        jpTaskBar.setPreferredSize(new java.awt.Dimension(576, 23));
        jpTaskBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTaskBar.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jpTaskBar.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jpTaskBar.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jpTaskBar.add(jbRefresh);

        jpDetail.add(jpTaskBar, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpDetail, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del ítem:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlItem);

        jtfItemKey.setEditable(false);
        jtfItemKey.setText("ITEM KEY");
        jtfItemKey.setFocusable(false);
        jtfItemKey.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jtfItemKey);

        jtfItem.setEditable(false);
        jtfItem.setText("DESCRIPTION");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(386, 23));
        jPanel5.add(jtfItem);

        jPanel4.add(jPanel5);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("Asociado negocios:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlBizPartner);

        jtfBizPartner.setEditable(false);
        jtfBizPartner.setText("BIZ PARTNER");
        jtfBizPartner.setFocusable(false);
        jtfBizPartner.setPreferredSize(new java.awt.Dimension(380, 23));
        jPanel2.add(jtfBizPartner);

        jtbFilterBizPartner.setText("Filtrar");
        jtbFilterBizPartner.setToolTipText("Filtrar asociado de negocios");
        jtbFilterBizPartner.setFocusable(false);
        jtbFilterBizPartner.setPreferredSize(new java.awt.Dimension(81, 23));
        jPanel2.add(jtbFilterBizPartner);

        jPanel4.add(jPanel2);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocumentClass.setText("Clase documento:");
        jlDocumentClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDocumentClass);

        jtfDocumentClassKey.setEditable(false);
        jtfDocumentClassKey.setText("DOC CODE");
        jtfDocumentClassKey.setFocusable(false);
        jtfDocumentClassKey.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jtfDocumentClassKey);

        jtfDocumentClass.setEditable(false);
        jtfDocumentClass.setText("DOC CLASS");
        jtfDocumentClass.setFocusable(false);
        jtfDocumentClass.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(jtfDocumentClass);

        jtbFilterDocumentClass.setText("Filtrar");
        jtbFilterDocumentClass.setToolTipText("Filtrar clase de documento");
        jtbFilterDocumentClass.setFocusable(false);
        jtbFilterDocumentClass.setPreferredSize(new java.awt.Dimension(81, 23));
        jPanel6.add(jtbFilterDocumentClass);

        jPanel4.add(jPanel6);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-608)/2, (screenSize.height-400)/2, 608, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        moPaneDetails = new STablePane(miClient);
        jpDetail.add(moPaneDetails, BorderLayout.CENTER);

        aoTableColumns = new STableColumnForm[6];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado negocios", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc.", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc.", STableConstants.WIDTH_CODE_DOC);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc.", STableConstants.WIDTH_DOC_NUM);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Precio unit. $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Desc. unit. $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneDetails.addTableColumn(aoTableColumns[i]);
        }

        jbClose.addActionListener(this);
        jbSeek.addActionListener(this);
        jbRefresh.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jtfSeek.addActionListener(this);
        jtbFilterBizPartner.addActionListener(this);
        jtbFilterDocumentClass.addActionListener(this);

        jtbFilterBizPartner.setSelected(true);
        jtbFilterDocumentClass.setSelected(true);

        SFormUtilities.createActionMap(this.getRootPane(), this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this.getRootPane(), this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this.getRootPane(), this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        readDpsInformation();
        jbClose.requestFocus();
    }

    private void readDpsInformation() {
        SDataItem oItem = null;
        SDataBizPartner oBizPartner = null;


        oItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { mnParamItemId }, SLibConstants.EXEC_MODE_SILENT);
        oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mnParamBizPartnerId }, SLibConstants.EXEC_MODE_SILENT);

        jtfItemKey.setText(oItem.getKey());
        jtfItem.setText(oItem.getItem());
        jtfBizPartner.setText(oBizPartner.getBizPartner());
        jtfDocumentClassKey.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNS_CL_DPS, manParamDocumentClass, SLibConstants.DESCRIPTION_CODE));
        jtfDocumentClass.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNS_CL_DPS, manParamDocumentClass));
    }

    private void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlDocumentClass;
    private javax.swing.JLabel jlItem;
    private javax.swing.JPanel jpDetail;
    private javax.swing.JPanel jpTaskBar;
    private javax.swing.JToggleButton jtbFilterBizPartner;
    private javax.swing.JToggleButton jtbFilterDocumentClass;
    private javax.swing.JTextField jtfBizPartner;
    private javax.swing.JTextField jtfDocumentClass;
    private javax.swing.JTextField jtfDocumentClassKey;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemKey;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneDetails, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneDetails, getTitle());
        }
    }

    public void actionRefresh() {
        showPriceHistory(mbParamIsPurchase, mnParamItemId, mnParamBizPartnerId, manParamDocumentClass);
    }

    public void refreshForm() {
        mbParamIsPurchase = false;
        mnParamItemId = 0;

        jtfItemKey.setText("");
        jtfItem.setText("");
        jtfBizPartner.setText("");
        jtfDocumentClassKey.setText("");
        jtfDocumentClass.setText("");

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);
    }

    @SuppressWarnings("unchecked")
    public void showPriceHistory(boolean bIsPurchase, int nItemId, int nBizPartnerId, int[] anDocClass ) {
        String sql = "";
        ResultSet resulSet = null;
        SDialogPriceHistoryRow oRow = null;

        mbParamIsPurchase = bIsPurchase;
        mnParamItemId = nItemId;
        mnParamBizPartnerId = nBizPartnerId;
        manParamDocumentClass = anDocClass;

        moPaneDetails.createTable();
        moPaneDetails.clearTableRows();

        try {
            sql = "SELECT bp.bp, d.dt_doc, tp.code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, de.price_u_cur, " +
                    "de.disc_u_cur " +
                    "FROM trn_dps AS d " +
                    "INNER JOIN trn_dps_ety AS de ON " +
                    "d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                    "INNER JOIN erp.trnu_tp_dps AS tp ON " +
                    "d.fid_ct_dps = tp.id_ct_dps AND d.fid_cl_dps = tp.id_cl_dps AND d.fid_tp_dps = tp.id_tp_dps " +
                    "INNER JOIN erp.bpsu_bp AS bp ON " +
                    "d.fid_bp_r = bp.id_bp" + (jtbFilterBizPartner.isSelected() ? " AND bp.id_bp = " + mnParamBizPartnerId : "") + " " +
                    "WHERE d.b_del = 0 AND de.b_del = 0 AND d.fid_ct_dps = " + (mbParamIsPurchase ? SDataConstantsSys.TRNS_CT_DPS_PUR : SDataConstantsSys.TRNS_CT_DPS_PUR) + " " +
                    (jtbFilterDocumentClass.isSelected() ? "AND fid_cl_dps = " + manParamDocumentClass[1] : mbParamIsPurchase ?
                        " AND d.fid_cl_dps BETWEEN " + SDataConstantsSys.TRNS_CL_DPS_PUR_EST[1] + " AND " + SDataConstantsSys.TRNS_CL_DPS_PUR_DOC[1] :
                        " AND d.fid_cl_dps BETWEEN " + SDataConstantsSys.TRNS_CL_DPS_SAL_EST[1] + " AND " + SDataConstantsSys.TRNS_CL_DPS_SAL_DOC[1]) + " " +
                    "AND de.fid_item = " + mnParamItemId + " " +
                    "ORDER BY d.dt_doc DESC ";

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                oRow = new SDialogPriceHistoryRow(miClient);

                oRow.setBizPartner(resulSet.getString(1));
                oRow.setDate(resulSet.getDate(2));
                oRow.setDocType(resulSet.getString(3));
                oRow.setDocNumber(resulSet.getString(4));
                oRow.setPriceUnitary(resulSet.getDouble(5));
                oRow.setDiscountUnitary(resulSet.getDouble(6));
                oRow.prepareTableRow();
                moPaneDetails.addTableRow(oRow);
            }

            if (moPaneDetails.getTableGuiRowCount() > 0) {
                moPaneDetails.renderTableRows();
                moPaneDetails.setTableRowSelection(0);

                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);
            }

            if (!isVisible()) {
                setVisible(true);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
        else if (e.getSource() instanceof javax.swing.JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbFilterBizPartner) {
                actionRefresh();
            }
            else if (toggleButton == jtbFilterDocumentClass) {
                actionRefresh();
            }
        }
    }
}
