/*
 *
 *
 * Created on 18 de agosto de 2009, 01:42 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mfin.form.SPanelAccount;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDsmEntry;
import erp.mtrn.data.SDataDsmEntryNotes;
import erp.mtrn.data.SDataDsmEntryNotesRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormDsmEntry extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataDsmEntry moDsmEntry;
    private erp.lib.form.SFormField moFieldFkBizPartnerId;

    private erp.lib.table.STablePane moDsmEntryNotesPane;
    private erp.mbps.data.SDataBizPartner moBizPartner;

    private int mnParamCategoryBp;
    private int mnParamSubclassAccMovId[];
    private int mnParamTypeSysMov[];
    private int mnParamFkBizPartnerId;
    protected java.util.Date mtParamDate;
    private java.lang.String msBizPartner;
    private java.lang.String msAccBpPay;
    private java.lang.String msAccBpOp;

    private erp.mfin.form.SPanelAccount moPanelFkAccountId;
    private erp.mtrn.form.SPanelReference moPanelFkReferenceId;
    private erp.mtrn.form.SPanelReference moPanelFkReferenceId1;
    private erp.mtrn.form.SPanelDpsBalance moPanelFkDpsId;
    private erp.mtrn.form.SPanelDpsBalance moPanelFkDpsId1;
    private erp.mtrn.form.SPanelCurrency moPanelFkCurrencyId;
    private erp.mtrn.form.SPanelIsDeleted moPanelIsDeleted;

    /** Creates new form DFormCompany */
    public SFormDsmEntry(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_DSM_ETY;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpNorth = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlYearId = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jtfYearId = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlFkBizPartnerId = new javax.swing.JLabel();
        jPanel98 = new javax.swing.JPanel();
        jcbFkBizPartnerId = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jbFkBizPartnerId = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlCurrentBalance = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jtfCurrentBalance = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jtfCurrency = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlCurrencyBiz = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jtfCurrencyBiz = new javax.swing.JTextField();
        jpSouth = new javax.swing.JPanel();
        jlDummyRef5 = new javax.swing.JLabel();
        jpCenter = new javax.swing.JPanel();
        jpSource1 = new javax.swing.JPanel();
        jlDummyRef1 = new javax.swing.JLabel();
        jpSource2 = new javax.swing.JPanel();
        jlDummyRef2 = new javax.swing.JLabel();
        jpDestiny1 = new javax.swing.JPanel();
        jlDummyRef3 = new javax.swing.JLabel();
        jpDestiny2 = new javax.swing.JPanel();
        jlDummyRef4 = new javax.swing.JLabel();
        jpNotes = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbNotesNew = new javax.swing.JButton();
        jbNotesEdit = new javax.swing.JButton();
        jbNotesDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Documento de entrada y salida de efectivo"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        jpRegistry.setLayout(new java.awt.BorderLayout(0, 2));

        jpNorth.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpNorth.setLayout(new java.awt.GridLayout(5, 1, 2, 1));

        jPanel1.setLayout(new java.awt.BorderLayout(5, 1));

        jlYearId.setText("Ejercicio contable:");
        jlYearId.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel1.add(jlYearId, java.awt.BorderLayout.WEST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jtfYearId.setEditable(false);
        jtfYearId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfYearId.setText("YEAR");
        jtfYearId.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel3.add(jtfYearId, java.awt.BorderLayout.WEST);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jpNorth.add(jPanel1);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jlFkBizPartnerId.setForeground(java.awt.Color.blue);
        jlFkBizPartnerId.setText("Asociado de negocios: *");
        jlFkBizPartnerId.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel4.add(jlFkBizPartnerId, java.awt.BorderLayout.WEST);

        jPanel98.setLayout(new java.awt.BorderLayout(5, 5));

        jcbFkBizPartnerId.setMaximumRowCount(16);
        jcbFkBizPartnerId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(350, 23));
        jcbFkBizPartnerId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbFkBizPartnerIdFocusLost(evt);
            }
        });
        jPanel98.add(jcbFkBizPartnerId, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jbFkBizPartnerId.setText("...");
        jbFkBizPartnerId.setToolTipText("Seleccionar proveedor");
        jbFkBizPartnerId.setFocusable(false);
        jbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkBizPartnerId, java.awt.BorderLayout.WEST);

        jPanel98.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel98, java.awt.BorderLayout.CENTER);

        jpNorth.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 1));

        jlCurrentBalance.setText("Saldo global actual:");
        jlCurrentBalance.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel5.add(jlCurrentBalance, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.BorderLayout(1, 2));

        jtfCurrentBalance.setEditable(false);
        jtfCurrentBalance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCurrentBalance.setText("0.00");
        jtfCurrentBalance.setFocusable(false);
        jtfCurrentBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfCurrentBalance, java.awt.BorderLayout.WEST);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("CURRENCY");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(40, 20));
        jPanel8.add(jtfCurrency, java.awt.BorderLayout.WEST);

        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jpNorth.add(jPanel5);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 1));

        jlCurrencyBiz.setText("Moneda predeterminada:");
        jlCurrencyBiz.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel9.add(jlCurrencyBiz, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jtfCurrencyBiz.setEditable(false);
        jtfCurrencyBiz.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jtfCurrencyBiz.setText("CURRENCY BIZ");
        jtfCurrencyBiz.setFocusable(false);
        jtfCurrencyBiz.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel10.add(jtfCurrencyBiz, java.awt.BorderLayout.WEST);

        jPanel9.add(jPanel10, java.awt.BorderLayout.CENTER);

        jpNorth.add(jPanel9);

        jpSouth.setLayout(new java.awt.BorderLayout(0, 2));

        jlDummyRef5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyRef5.setText("[Panel 3]");
        jpSouth.add(jlDummyRef5, java.awt.BorderLayout.CENTER);

        jpNorth.add(jpSouth);

        jpRegistry.add(jpNorth, java.awt.BorderLayout.NORTH);

        jpCenter.setLayout(new java.awt.GridLayout(1, 2));

        jpSource1.setBorder(javax.swing.BorderFactory.createTitledBorder("Origen:"));
        jpSource1.setLayout(new java.awt.BorderLayout());

        jlDummyRef1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyRef1.setText("[Panel 1]");
        jpSource1.add(jlDummyRef1, java.awt.BorderLayout.CENTER);

        jpSource2.setLayout(new java.awt.BorderLayout());

        jlDummyRef2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyRef2.setText("[Panel 1 op]");
        jpSource2.add(jlDummyRef2, java.awt.BorderLayout.CENTER);

        jpSource1.add(jpSource2, java.awt.BorderLayout.SOUTH);

        jpCenter.add(jpSource1);

        jpDestiny1.setBorder(javax.swing.BorderFactory.createTitledBorder("Destino:"));
        jpDestiny1.setLayout(new java.awt.BorderLayout(0, 2));

        jlDummyRef3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyRef3.setText("[Panel 2]");
        jpDestiny1.add(jlDummyRef3, java.awt.BorderLayout.CENTER);

        jpDestiny2.setLayout(new java.awt.BorderLayout(0, 2));

        jlDummyRef4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyRef4.setText("[Panel 2 op]");
        jpDestiny2.add(jlDummyRef4, java.awt.BorderLayout.CENTER);

        jpDestiny1.add(jpDestiny2, java.awt.BorderLayout.SOUTH);

        jpCenter.add(jpDestiny1);

        jpRegistry.add(jpCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.PAGE_START);

        jpNotes.setBorder(javax.swing.BorderFactory.createTitledBorder("Notas:"));
        jpNotes.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(771, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbNotesNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbNotesNew.setToolTipText("Crear");
        jbNotesNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesNew);

        jbNotesEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbNotesEdit.setToolTipText("Modificar");
        jbNotesEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesEdit);

        jbNotesDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbNotesDelete.setToolTipText("Eliminar notas");
        jbNotesDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesDelete);

        jpNotes.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpNotes, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-977)/2, (screenSize.height-622)/2, 977, 622);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    private void jcbFkBizPartnerIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbFkBizPartnerIdFocusLost
        focusLostChangedFkBizPartnerId();
    }//GEN-LAST:event_jcbFkBizPartnerIdFocusLost

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm tableColumnsNotes[];

        mvFields = new Vector<SFormField>();
        moDsmEntryNotesPane = new STablePane(miClient);
        moDsmEntryNotesPane.setDoubleClickAction(this, "publicActionNotesEdit");
        jpNotes.add(moDsmEntryNotesPane, BorderLayout.CENTER);

        moFieldFkBizPartnerId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerId, jlFkBizPartnerId);
        moFieldFkBizPartnerId.setPickerButton(jbFkBizPartnerId);

        mvFields.add(moFieldFkBizPartnerId);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkBizPartnerId.addActionListener(this);
        jbNotesNew.addActionListener(this);
        jbNotesEdit.addActionListener(this);
        jbNotesDelete.addActionListener(this);

        i = 0;
        tableColumnsNotes = new STableColumnForm[9];
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nota", 300);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Impresión", STableConstants.WIDTH_BOOLEAN);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < tableColumnsNotes.length; i++) {
            moDsmEntryNotesPane.addTableColumn(tableColumnsNotes[i]);
        }
        moDsmEntryNotesPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() > 0) {

                if (jcbFkBizPartnerId.isEnabled()) {
                    jcbFkBizPartnerId.requestFocus();
                }
            }
            else {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
        }
    }

    private void focusLostChangedFkBizPartnerId() {
        int nFkCurrencyBizId = 0;

        if (jcbFkBizPartnerId.getSelectedIndex() > 0) {
            mnParamFkBizPartnerId = moFieldFkBizPartnerId.getKeyAsIntArray()[0];
            moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkBizPartnerId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);

            if (moBizPartner != null) {
                msBizPartner = moBizPartner.getBizPartner();

                // Currency of biz:

                switch (mnParamCategoryBp) {
                    case SDataConstantsSys.BPSS_CT_BP_SUP:
                        if (moBizPartner.getDbmsCategorySettingsSup().getFkCurrencyId_n() > 0) {
                            nFkCurrencyBizId = moBizPartner.getDbmsCategorySettingsSup().getFkCurrencyId_n();
                            jtfCurrencyBiz.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moBizPartner.getDbmsCategorySettingsSup().getFkCurrencyId_n() }, SLibConstants.DESCRIPTION_NAME));
                        }
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_DBR:
                        if (moBizPartner.getDbmsCategorySettingsDbr().getFkCurrencyId_n() > 0) {
                            nFkCurrencyBizId = moBizPartner.getDbmsCategorySettingsDbr().getFkCurrencyId_n();
                            jtfCurrencyBiz.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moBizPartner.getDbmsCategorySettingsDbr().getFkCurrencyId_n() }, SLibConstants.DESCRIPTION_NAME));
                        }
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_CUS:
                        if (moBizPartner.getDbmsCategorySettingsCus().getFkCurrencyId_n() > 0) {
                            nFkCurrencyBizId = moBizPartner.getDbmsCategorySettingsCus().getFkCurrencyId_n();
                            jtfCurrencyBiz.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moBizPartner.getDbmsCategorySettingsCus().getFkCurrencyId_n() }, SLibConstants.DESCRIPTION_NAME));
                        }
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_CDR:
                        if (moBizPartner.getDbmsCategorySettingsCdr().getFkCurrencyId_n() > 0) {
                            nFkCurrencyBizId = moBizPartner.getDbmsCategorySettingsCdr().getFkCurrencyId_n();
                            jtfCurrencyBiz.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moBizPartner.getDbmsCategorySettingsCdr().getFkCurrencyId_n() }, SLibConstants.DESCRIPTION_NAME));
                        }
                        break;
                }

                if (jtfCurrencyBiz.getText().toString().length() <= 0) {
                    nFkCurrencyBizId = miClient.getSessionXXX().getParamsErp().getFkCurrencyId();
                    jtfCurrencyBiz.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency());
                }

                jtfCurrency.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
            }

            if (moPanelFkReferenceId != null) {
                renderPanelFkReferenceId(moPanelFkReferenceId, nFkCurrencyBizId);
            }

            if (moPanelFkReferenceId1 != null) {
                renderPanelFkReferenceId(moPanelFkReferenceId1, nFkCurrencyBizId);
            }

            if (moPanelFkDpsId != null) {
                renderPanelFkDpsId (moPanelFkDpsId, nFkCurrencyBizId);
            }

            if (moPanelFkDpsId1 != null) {
                renderPanelFkDpsId (moPanelFkDpsId1, nFkCurrencyBizId);
            }

            if (moPanelFkAccountId != null) {
                moPanelFkAccountId.resetPanel();
            }

            if (moPanelFkCurrencyId != null) {
                renderPanelFkCurrencyId(moPanelFkCurrencyId, nFkCurrencyBizId);
            }

            renderIsEnablePanel(true);
        }
        else {
            jtfCurrency.setText("");
            jtfCurrencyBiz.setText("");

            if (moPanelFkReferenceId != null) {
                moPanelFkReferenceId.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
                moPanelFkReferenceId.resetValues();
            }

            if (moPanelFkReferenceId1 != null) {
                moPanelFkReferenceId1.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
                moPanelFkReferenceId1.resetValues();
            }

            if (moPanelFkDpsId != null) {
                moPanelFkDpsId.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
                moPanelFkDpsId.resetValues(false);
            }

            if (moPanelFkDpsId1 != null) {
                moPanelFkDpsId1.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
                moPanelFkDpsId1.resetValues(false);
            }

            if (moPanelFkAccountId != null) {
                moPanelFkAccountId.resetPanel();
            }

            if (moPanelFkCurrencyId != null) {
                moPanelFkCurrencyId.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
                moPanelFkCurrencyId.resetValues();
            }

            renderIsEnablePanel(false);
        }
    }

    private void renderPanelFkReferenceId(erp.mtrn.form.SPanelReference panel, int nFkCurrencyBizId) {
        panel.resetValues();
        panel.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
        panel.setValue(2, nFkCurrencyBizId);
    }

    private void renderPanelFkDpsId(erp.mtrn.form.SPanelDpsBalance panel, int nFkCurrencyBizId) {
        panel.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
        panel.formRefreshCatalogues();
        panel.resetValues(false);
    }

    private void renderPanelFkCurrencyId(erp.mtrn.form.SPanelCurrency panel, int nFkCurrencyBizId) {
        panel.resetValues();
        panel.setValue(1, moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
        panel.setValue(2, nFkCurrencyBizId);
    }

    private void actionFkBizPartnerId() {
        SFormOptionPickerInterface picker = null;

        switch (mnParamCategoryBp) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_SUP);
                break;
            case SDataConstantsSys.BPSS_CT_BP_DBR:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_DBR);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_CUS);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CDR:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_CDR);
                break;
        }

        if (picker != null) {
            picker.formRefreshOptionPane();
            picker.formReset();
            picker.setSelectedPrimaryKey(new int[] { mnParamFkBizPartnerId });
            picker.setFormVisible(true);

            if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                moFieldFkBizPartnerId.setKey(picker.getSelectedPrimaryKey());
                mnParamFkBizPartnerId = ((int [])picker.getSelectedPrimaryKey())[0];
                moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mnParamFkBizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);

                if (moBizPartner != null) {
                    msBizPartner = moBizPartner.getBizPartner();
                }

                renderIsEnablePanel(true);

                jcbFkBizPartnerId.requestFocus();
            }
        }
    }

    private java.lang.Object renderTypeAccountBizPartner(int typeAccountBizPartner) {
        Vector<Object> mvParams = new Vector<Object>();
        String sMessage = "";
        String sAccBp = "";

        mvParams.removeAllElements();

        if (moBizPartner != null) {
            mvParams.add(moBizPartner.getPkBizPartnerId());

            switch (mnParamCategoryBp) {
                case SDataConstantsSys.BPSS_CT_BP_SUP:
                mvParams.add(moBizPartner.getDbmsCategorySettingsSup().getPkBizPartnerCategoryId());
                break;
            case SDataConstantsSys.BPSS_CT_BP_DBR:
                mvParams.add(moBizPartner.getDbmsCategorySettingsDbr().getPkBizPartnerCategoryId());
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                mvParams.add(moBizPartner.getDbmsCategorySettingsCus().getPkBizPartnerCategoryId());
                break;
            case SDataConstantsSys.BPSS_CT_BP_CDR:
                mvParams.add(moBizPartner.getDbmsCategorySettingsCdr().getPkBizPartnerCategoryId());
                break;
            default:
                mvParams.add(0);
                break;
            }

            mvParams.add(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsHqBranch().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId());
            mvParams.add(typeAccountBizPartner);
            mvParams.add(miClient.getSessionXXX().getWorkingDate());
            mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.FIN_ACC_BP_GET,  mvParams, SLibConstants.EXEC_MODE_SILENT);

            if (mvParams.size() > 0) {
                if (SLibUtilities.parseInt(mvParams.get(1).toString()) > 0) {
                    sMessage = mvParams.get(2).toString();
                }
                sAccBp = mvParams.get(0).toString();
            }
            else {
                sMessage = "No se encuentra la cuenta contable del asociado de negocio";
            }
        }
        else {
            sMessage = "No se encuentra el asociado de negocios";
        }

        return new String[] { sAccBp, sMessage };
    }

    private erp.lib.form.SFormValidation validateSubsystems(erp.lib.form.SFormValidation validation) {
        String sMsgBalance = "";
        SFormField oField = null;

        // Validate source and destiny panel, value currency, balance source before and after transaction:

        if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP)) {

            validation = validatePanelReference(moPanelFkReferenceId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelDps(moPanelFkDpsId1, validation);
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkReferenceId.getFieldValue(), moPanelFkDpsId1.getFieldValue(), validation);
            }

            if (!validation.getIsError()) {

                sMsgBalance = validateBalanceSourceReference(moPanelFkReferenceId);
                oField = moPanelFkReferenceId.getFieldReference();
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_TRA)) {

            validation = validatePanelReference(moPanelFkReferenceId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelReference(moPanelFkReferenceId1, validation);
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkReferenceId.getFieldValue(), moPanelFkReferenceId1.getFieldValue(), validation);
            }

            if (!validation.getIsError()) {
                if (moPanelFkReferenceId.getFieldReference().getString().compareTo(moPanelFkReferenceId1.getFieldReference().getString()) == 0) {
                    validation.setMessage("El valor de '" + moPanelFkReferenceId.getFieldReference().getFieldName() + "' de origen y destino no pueden ser iguales.");
                    validation.setComponent(moPanelFkReferenceId.getFieldReference().getComponent());
                }
            }

            if (!validation.getIsError()) {

                sMsgBalance = validateBalanceSourceReference(moPanelFkReferenceId);
                oField = moPanelFkReferenceId.getFieldReference();
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_CLO)) {

            validation = validatePanelReference(moPanelFkReferenceId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelAccount(moPanelFkAccountId, validation);

                if (!validation.getIsError()) {
                    validation = validatePanelCurrency(moPanelFkCurrencyId, validation);
                }
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkReferenceId.getFieldValue(), moPanelFkCurrencyId.getFieldValue(), validation);
            }

            if (!validation.getIsError()) {

                sMsgBalance = validateBalanceSourceReference(moPanelFkReferenceId);
                oField = moPanelFkReferenceId.getFieldReference();
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_OPE)) {

            validation = validatePanelAccount(moPanelFkAccountId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelCurrency(moPanelFkCurrencyId, validation);
            }

            if (!validation.getIsError()) {
                validation = validatePanelReference(moPanelFkReferenceId1, validation);
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkCurrencyId.getFieldValue(), moPanelFkReferenceId1.getFieldValue(), validation);
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_APP)) {

            validation = validatePanelDps(moPanelFkDpsId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelReference(moPanelFkReferenceId1, validation);
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkDpsId.getFieldValue(), moPanelFkReferenceId1.getFieldValue(), validation);
            }

            if (!validation.getIsError()) {

                sMsgBalance = validateBalanceSourceDps(moPanelFkDpsId);
                oField = moPanelFkDpsId.getFieldFkDpsId();
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_TRA)) {

            validation = validatePanelDps(moPanelFkDpsId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelDps(moPanelFkDpsId1, validation);
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkDpsId.getFieldValue(), moPanelFkDpsId1.getFieldValue(), validation);
            }

            if (!validation.getIsError()) {
                if (SLibUtilities.compareKeys(moPanelFkDpsId.getFieldFkDpsId().getKey(), moPanelFkDpsId1.getFieldFkDpsId().getKey())) {
                    validation.setMessage("El valor de '" + moPanelFkDpsId.getFieldFkDpsId().getFieldName() + "' de origen y destino no pueden ser iguales.");
                    validation.setComponent(moPanelFkDpsId.getFieldFkDpsId().getComponent());
                }
            }

            if (!validation.getIsError()) {

                sMsgBalance = validateBalanceSourceDps(moPanelFkDpsId);
                oField = moPanelFkDpsId.getFieldFkDpsId();
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_CLO)) {

            validation = validatePanelDps(moPanelFkDpsId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelAccount(moPanelFkAccountId, validation);

                if (!validation.getIsError()) {
                    validation = validatePanelCurrency(moPanelFkCurrencyId, validation);
                }
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkDpsId.getFieldValue(), moPanelFkCurrencyId.getFieldValue(), validation);
            }

            if (!validation.getIsError()) {

                sMsgBalance = validateBalanceSourceDps(moPanelFkDpsId);
                oField = moPanelFkDpsId.getFieldFkDpsId();
            }
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_OPE)) {

            validation = validatePanelAccount(moPanelFkAccountId, validation);

            if (!validation.getIsError()) {
                validation = validatePanelCurrency(moPanelFkCurrencyId, validation);
            }

            if (!validation.getIsError()) {
                validation = validatePanelDps(moPanelFkDpsId1, validation);
            }

            if (!validation.getIsError()) {
                validation = validateCalculationValue(moPanelFkCurrencyId.getFieldValue(), moPanelFkDpsId1.getFieldValue(), validation);
            }
        }

        if (!validation.getIsError()) {
            if (sMsgBalance.length() > 0) {
                if (miClient.showMsgBoxConfirm(sMsgBalance) == JOptionPane.NO_OPTION) {
                    validation.setIsError(true);
                    validation.setComponent(oField.getComponent() );
                }
            }
        }

        return validation;
    }

    private erp.lib.form.SFormValidation validateCalculationValue(erp.lib.form.SFormField oFieldSourceValue, erp.lib.form.SFormField oFieldDestinyValue, erp.lib.form.SFormValidation validation) {

        if (!oFieldSourceValue.getDouble().equals(oFieldDestinyValue.getDouble())) {
            if (miClient.showMsgBoxConfirm("El valor para los campos '" + oFieldSourceValue.getFieldName() + "' debe ser igual. \n ¿Desea qué el sistema los iguale?") == JOptionPane.NO_OPTION) {
                validation.setIsError(true);
                validation.setComponent(oFieldSourceValue.getComponent());
            }
            else {
                oFieldDestinyValue.setDouble(oFieldSourceValue.getDouble());
            }
        }

        return validation;
    }

    private erp.lib.form.SFormValidation validateCurrencyValues(int nParamDsmEtyType, erp.lib.form.SFormField oFieldFkCurrencyId, erp.lib.form.SFormField oFieldValueCy,
            erp.lib.form.SFormField oFieldValue, erp.lib.form.SFormField oFieldExchangeRate, erp.lib.form.SFormValidation validation) {
        String sMsg = "";

        if (oFieldFkCurrencyId.getKeyAsIntArray()[0] <= 0) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + oFieldFkCurrencyId.getFieldName() + "'.");
            validation.setComponent(oFieldFkCurrencyId.getComponent());
        }
        else if (oFieldValueCy.getDouble() <= 0) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + oFieldValueCy.getFieldName() + "'.");
            validation.setComponent(oFieldValueCy.getComponent());
        }
        else if (nParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_SOURCE && oFieldValue.getDouble() <= 0) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + oFieldValue.getFieldName() + "'.");
                validation.setComponent(oFieldValue.getComponent());
        }
        else if (oFieldExchangeRate.getDouble() <= 0) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + oFieldExchangeRate.getFieldName() + "'.");
            validation.setComponent(oFieldExchangeRate.getComponent());
        }

        // Validate exchange rate:

        if (!validation.getIsError()) {
            sMsg = SDataUtilities.validateExchangeRate(miClient, oFieldValueCy.getDouble(), oFieldExchangeRate.getDouble(), oFieldValue.getDouble(), "T. cambio: *");

            if (sMsg.length() > 0) {
                if (miClient.showMsgBoxConfirm(sMsg + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + "Valor: *" + "'.");
                    validation.setComponent(oFieldValueCy.getComponent());
                }
            }
        }

        return validation;
    }

    private erp.lib.form.SFormValidation validatePanelReference(erp.mtrn.form.SPanelReference panel, erp.lib.form.SFormValidation validation) {

        validation = validateCurrencyValues(panel.getParamDsmEtyType(), panel.getFieldFkCurrencyId(), panel.getFieldValueCy(), panel.getFieldValue(), panel.getFieldExchangeRate(), validation);

        return validation;
    }

    private erp.lib.form.SFormValidation validatePanelDps(erp.mtrn.form.SPanelDpsBalance panel, erp.lib.form.SFormValidation validation) {

        if (panel.getFieldFkDpsId().getKeyAsIntArray()[0] <= 0) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + panel.getFieldFkDpsId().getFieldName() + "'.");
            validation.setComponent(panel.getFieldFkDpsId().getComponent());
        }
        else {
            validation = validateCurrencyValues(panel.getParamDsmEtyType(), panel.getFieldFkCurrencyId(), panel.getFieldValueCy(), panel.getFieldValue(), panel.getFieldExchangeRate(), validation);
        }

        return validation;
    }

    private erp.lib.form.SFormValidation validatePanelAccount(erp.mfin.form.SPanelAccount panel, erp.lib.form.SFormValidation validation) {
        String sMsg = SDataUtilities.validateAccount(miClient, panel.getCurrentInputAccount(),mtParamDate);

        if (panel.isEmptyAccountId()) {
            validation.setMessage("La cuenta contable no existe.");
            validation.setComponent(panel.getFieldAccount().getComponent());
        }
        else if (sMsg.length() > 0) {
            validation.setMessage(sMsg);
            validation.setComponent(panel.getFieldAccount().getComponent());
        }
        else if (panel.getCurrentInputAccount().getFkAccountSystemTypeId() != SDataConstantsSys.FINS_TP_ACC_SYS_NA) {
            validation.setMessage("La cuenta contable es de sistema.");
            validation.setComponent(moPanelFkAccountId.getFieldAccount().getComponent());
        }

        return validation;
    }

    private erp.lib.form.SFormValidation validatePanelCurrency(erp.mtrn.form.SPanelCurrency panel, erp.lib.form.SFormValidation validation) {

        validation = validateCurrencyValues(panel.getParamDsmEtyType(), panel.getFieldFkCurrencyId(), panel.getFieldValueCy(), panel.getFieldValue(), panel.getFieldExchangeRate(), validation);

        return validation;
    }

    private java.lang.Object renderBalanceDps(java.lang.Object oKey) {
        Vector<Object> mvParams = new Vector<Object>();

        mvParams.removeAllElements();
        mvParams.add(((int []) oKey)[0]);
        mvParams.add(((int []) oKey)[1]);
        mvParams.add(mnParamTypeSysMov);
        mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.TRN_DPS_BAL_GET, mvParams, SLibConstants.EXEC_MODE_SILENT);

        return new double[] { SLibUtilities.parseDouble(mvParams.get(0).toString()), SLibUtilities.parseDouble(mvParams.get(1).toString()) };
    }

    private java.lang.Object renderBalanceReference(java.lang.String sReference, int nCurrencyId) {
        Object oBp = null;
        Vector<Object> mvParams = new Vector<Object>();

        mvParams.removeAllElements();
        mvParams.add(sReference);

        if (SLibUtilities.compareKeys(mnParamTypeSysMov, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP)) {
            mvParams.add(moBizPartner.getDbmsCategorySettingsSup().getPkBizPartnerCategoryId());
        }
        else if (SLibUtilities.compareKeys(mnParamTypeSysMov, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR)) {
            mvParams.add(moBizPartner.getDbmsCategorySettingsCdr().getPkBizPartnerCategoryId());
        }
        else if (SLibUtilities.compareKeys(mnParamTypeSysMov, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS)) {
            mvParams.add(moBizPartner.getDbmsCategorySettingsCus().getPkBizPartnerCategoryId());
        }
        else if (SLibUtilities.compareKeys(mnParamTypeSysMov, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR)) {
            mvParams.add(moBizPartner.getDbmsCategorySettingsDbr().getPkBizPartnerCategoryId());
        }
        else {
            mvParams.add(SDataConstants.UNDEFINED);
        }

        mvParams.add(mnParamFkBizPartnerId);
        mvParams.add(nCurrencyId);

        oBp = renderTypeAccountBizPartner(SDataConstantsSys.FINS_TP_ACC_BP_PAY);
        if (((String []) oBp)[0].length() > 0) {
            msAccBpPay = ((String []) oBp)[0];
            mvParams.add(msAccBpPay);
        }
        else {
            mvParams.add("");
        }
        mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.TRN_DSM_REF_BAL_GET,  mvParams, SLibConstants.EXEC_MODE_SILENT);

        return new double[] { SLibUtilities.parseDouble(mvParams.get(0).toString()), SLibUtilities.parseDouble(mvParams.get(1).toString()) };
    }

    private java.lang.String validateBalanceSourceReference(erp.mtrn.form.SPanelReference oPanelFkReferenceId) {
        double nValueCy = 0;
        Object oBalance = null;
        String sMsgBalance = "";

        // Validate balance source before transaction:

        oBalance = renderBalanceReference(oPanelFkReferenceId.getFieldReference().getString(), oPanelFkReferenceId.getFieldFkCurrencyId().getKeyAsIntArray()[0]);

        if (moDsmEntry != null) {
            nValueCy = (((double []) oBalance)[1]) + moDsmEntry.getSourceValueCy();
        }

        if (((((double []) oBalance)[1]) - oPanelFkReferenceId.getFieldValueCy().getDouble()) < 0) {
            sMsgBalance = "El saldo actual del repositorio contable '" + (oPanelFkReferenceId.getFieldReference().getString().length() > 0 ? oPanelFkReferenceId.getFieldReference().getString() : SDataConstantsSys.REF_BLANK) + "', no es suficiente para realizar la operación. ¿Desea continuar?";
        }

        // Validate balance source after transaction:

        if (sMsgBalance.length() < 0 && nValueCy != 0) {
            if (nValueCy - oPanelFkReferenceId.getFieldValueCy().getDouble() < 0) {
                sMsgBalance = "El saldo después de la operación del repositorio contable '" + (oPanelFkReferenceId.getFieldReference().getString().length() > 0 ? oPanelFkReferenceId.getFieldReference().getString() : SDataConstantsSys.REF_BLANK) + "', no es suficiente para realizar la operación. ¿Desea continuar?";
            }
        }

        return sMsgBalance;
    }

    private java.lang.String validateBalanceSourceDps(erp.mtrn.form.SPanelDpsBalance oPanelFkDpsId) {
        double nValueCy = 0;
        Object oBalance = null;
        String sMsgBalance = "";

        // Validate balance source before transaction:

        oBalance = renderBalanceDps(oPanelFkDpsId.getFieldFkDpsId().getKey());

        if (moDsmEntry != null) {
            nValueCy = (((double []) oBalance)[1]) + moDsmEntry.getSourceValueCy();
        }

        if (((((double []) oBalance)[1]) - oPanelFkDpsId.getFieldValueCy().getDouble()) < 0) {
            sMsgBalance = "El saldo actual de doc. de compras-ventas, no es suficiente para realizar la operación. ¿Desea continuar?";
        }

        // Validate balance source after transaction:

        if (sMsgBalance.length() <= 0 && nValueCy != 0) {
            if ((nValueCy - oPanelFkDpsId.getFieldValueCy().getDouble()) < 0) {
                sMsgBalance = "El saldo después de la operación del doc. de compras-ventas, no es suficiente para realizar la operación. ¿Desea continuar?";
            }
        }

        return sMsgBalance;
    }

    private void renderBalanceDps() {

        // Get balance of DPS if subsystem applies

        if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP)) {

            moDsmEntry.setDbmsBalanceDps(moPanelFkDpsId1.getFieldBalance().getDouble());
        }
        else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_APP) ||
                SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_TRA) ||
                SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_CLO)) {

            moDsmEntry.setDbmsBalanceDps(moPanelFkDpsId.getFieldBalance().getDouble());
        }
    }

    private void renderIsEnablePanel(boolean b) {

        if (moPanelFkReferenceId != null) {
            moPanelFkReferenceId.enableFields(b);
            moPanelFkReferenceId.refreshPanel();
        }

        if (moPanelFkReferenceId1 != null) {
            moPanelFkReferenceId1.enableFields(b);
            moPanelFkReferenceId1.refreshPanel();
        }

        if (moPanelFkDpsId != null) {
            moPanelFkDpsId.enableFields(b);
        }

        if (moPanelFkDpsId1 != null) {
            moPanelFkDpsId1.enableFields(b);
        }

        if (moPanelFkAccountId != null) {
            moPanelFkAccountId.enableFields(b);
            moPanelFkAccountId.refreshPanel();

            moPanelFkCurrencyId.enableFields(b);
            moPanelFkCurrencyId.refreshPanel();
        }

        jtfCurrentBalance.setEnabled(b);
    }

    private int getBizPartnerBranchId() {
        SDataBizPartnerBranch oBizPartnerBranch = null;

        if (moBizPartner != null) {

            for (int i = 0; i < moBizPartner.getDbmsBizPartnerBranches().size(); i++ ) {
                oBizPartnerBranch = moBizPartner.getDbmsBizPartnerBranches().get(i);

                if (!oBizPartnerBranch.getIsDeleted()) {
                    break;
                }
                else {
                    oBizPartnerBranch = null;
                }
            }
        }

        return (oBizPartnerBranch != null ? oBizPartnerBranch.getPkBizPartnerBranchId() : 0);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionNotesNew() {
        int index = 0;
        SFormDsmEntryNotes formNotes = new erp.mtrn.form.SFormDsmEntryNotes(miClient);
        SDataDsmEntryNotes dataNotes = null;
        SDataDsmEntryNotesRow dataNotesRow = null;

        formNotes.formReset();
        formNotes.formRefreshCatalogues();
        formNotes.setVisible(true);
        if (formNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            dataNotes = (SDataDsmEntryNotes) formNotes.getRegistry();

            moDsmEntryNotesPane.addTableRow(dataNotesRow = new SDataDsmEntryNotesRow(dataNotes));
            moDsmEntryNotesPane.renderTableRows();
            index = moDsmEntryNotesPane.getTableGuiRowCount() - 1;
            moDsmEntryNotesPane.getTable().setRowSelectionInterval(index, index);
            moDsmEntryNotesPane.getVerticalScrollBar().setValue((index + 1) * moDsmEntryNotesPane.getTable().getRowHeight());
        }
    }

    private void actionNotesEdit() {
        int index = moDsmEntryNotesPane.getTable().getSelectedRow();
        SFormDsmEntryNotes formNotes = new erp.mtrn.form.SFormDsmEntryNotes(miClient);
        SDataDsmEntryNotes dataNotes = null;
        SDataDsmEntryNotesRow dataNotesRow = null;

        formNotes.formReset();
        formNotes.formRefreshCatalogues();
        dataNotes = (SDataDsmEntryNotes) formNotes.getRegistry();
        if (index != -1) {
            dataNotes = (SDataDsmEntryNotes) moDsmEntryNotesPane.getTableRow(index).getData();
            formNotes.setRegistry(dataNotes);
            formNotes.setVisible(true);
            if (formNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                dataNotes = (SDataDsmEntryNotes) formNotes.getRegistry();

                moDsmEntryNotesPane.setTableRow(dataNotesRow = new SDataDsmEntryNotesRow(dataNotes), index);
                moDsmEntryNotesPane.renderTableRows();
            }
        }
    }

    private void actionNotesDelete() {
        int index = moDsmEntryNotesPane.getTable().getSelectedRow();

        if (index != -1) {
            if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                moDsmEntryNotesPane.removeTableRow(index);
                moDsmEntryNotesPane.renderTableRows();

                if (moDsmEntryNotesPane.getTableGuiRowCount() > 0) {
                    moDsmEntryNotesPane.setTableRowSelection(index < moDsmEntryNotesPane.getTableGuiRowCount() ? index : moDsmEntryNotesPane.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    public void publicActionNotesEdit() {
        actionNotesEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel98;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkBizPartnerId;
    private javax.swing.JButton jbNotesDelete;
    private javax.swing.JButton jbNotesEdit;
    private javax.swing.JButton jbNotesNew;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFkBizPartnerId;
    private javax.swing.JLabel jlCurrencyBiz;
    private javax.swing.JLabel jlCurrentBalance;
    private javax.swing.JLabel jlDummyRef1;
    private javax.swing.JLabel jlDummyRef2;
    private javax.swing.JLabel jlDummyRef3;
    private javax.swing.JLabel jlDummyRef4;
    private javax.swing.JLabel jlDummyRef5;
    private javax.swing.JLabel jlFkBizPartnerId;
    private javax.swing.JLabel jlYearId;
    private javax.swing.JPanel jpCenter;
    private javax.swing.JPanel jpDestiny1;
    private javax.swing.JPanel jpDestiny2;
    private javax.swing.JPanel jpNorth;
    private javax.swing.JPanel jpNotes;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpSource1;
    private javax.swing.JPanel jpSource2;
    private javax.swing.JPanel jpSouth;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfCurrencyBiz;
    private javax.swing.JTextField jtfCurrentBalance;
    private javax.swing.JTextField jtfYearId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDsmEntry = null;
        moBizPartner = null;

        moPanelFkReferenceId = null;
        moPanelFkReferenceId1  = null;
        moPanelFkDpsId = null;
        moPanelFkDpsId1 = null;
        moPanelFkAccountId = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moDsmEntryNotesPane.createTable();
        moDsmEntryNotesPane.clearTableRows();

        msBizPartner = "";
        msAccBpPay = "";
        msAccBpOp = "";

        jcbFkBizPartnerId.setEnabled(true);
        jbFkBizPartnerId.setEnabled(true);
        jtfCurrentBalance.setEnabled(false);

        jtfYearId.setText("" + miClient.getSessionXXX().getWorkingYear());
        jtfCurrency.setText("");
        jtfCurrencyBiz.setText("");

        mtParamDate = miClient.getSessionXXX().getWorkingDate();
    }

    @Override
    public void formRefreshCatalogues() {
        switch (mnParamCategoryBp) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_SUP);
                break;
            case SDataConstantsSys.BPSS_CT_BP_DBR:
                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_DBR);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_CUS);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CDR:
                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_CDR);
                break;
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        erp.lib.form.SFormValidation validation = new SFormValidation();
        Object oBp = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        // Validate subsystems:

        if (!validation.getIsError()) {

            validation = validateSubsystems(validation);
        }

        // Get account pay for biz:

        if (!validation.getIsError()) {
            if (msAccBpPay.length() <= 0) {
                oBp = renderTypeAccountBizPartner(SDataConstantsSys.FINS_TP_ACC_BP_PAY);

                if (((String []) oBp)[0].length() > 0) {
                    msAccBpPay = ((String []) oBp)[0];
                }
                else {
                    validation.setMessage(((String []) oBp)[1]);
                    validation.setComponent(jcbFkBizPartnerId);
                }
            }
        }

        // Get account operation for biz:

        if (!validation.getIsError()) {
            oBp = renderTypeAccountBizPartner(SDataConstantsSys.FINS_TP_ACC_BP_OP);
            if (((String []) oBp)[0].length() > 0) {
                msAccBpOp = ((String []) oBp)[0];
            }
            else {
                validation.setMessage(((String []) oBp)[1]);
                validation.setComponent(jcbFkBizPartnerId);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataDsmEntryNotesRow dataNotesRow = null;
        moDsmEntry = (SDataDsmEntry) registry;

        mnParamFkBizPartnerId = moDsmEntry.getFkBizPartnerId();
        moFieldFkBizPartnerId.setKey(new int[] { moDsmEntry.getFkBizPartnerId() });
        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkBizPartnerId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);
        focusLostChangedFkBizPartnerId();

        if (moPanelFkReferenceId != null) {
            moPanelFkReferenceId.getFieldReference().setFieldValue(moDsmEntry.getSourceReference());
            moPanelFkReferenceId.getFieldFkCurrencyId().setKey(new int[] { moDsmEntry.getFkSourceCurrencyId() });
            moPanelFkReferenceId.getFieldValue().setFieldValue(moDsmEntry.getSourceValue());
            moPanelFkReferenceId.getFieldValueCy().setFieldValue(moDsmEntry.getSourceValueCy());
            moPanelFkReferenceId.getFieldExchangeRateSystem().setFieldValue(moDsmEntry.getSourceExchangeRateSystem());
            moPanelFkReferenceId.getFieldExchangeRate().setFieldValue(moDsmEntry.getSourceExchangeRate());

            moPanelFkReferenceId.renderSetValueCyPanels(new int[] { moDsmEntry.getFkSourceCurrencyId() }, moDsmEntry.getSourceValueCy(), moDsmEntry.getSourceValue(), moDsmEntry.getSourceExchangeRate(), moDsmEntry.getSourceExchangeRateSystem());
        }

        if (moPanelFkReferenceId1 != null) {
            moPanelFkReferenceId1.getFieldReference().setFieldValue(moDsmEntry.getDestinyReference());
            moPanelFkReferenceId1.getFieldFkCurrencyId().setKey(new int[] { moDsmEntry.getFkDestinyCurrencyId() } );
            moPanelFkReferenceId1.getFieldValue().setFieldValue(moDsmEntry.getDestinyValue());
            moPanelFkReferenceId1.getFieldValueCy().setFieldValue(moDsmEntry.getDestinyValueCy());
            moPanelFkReferenceId1.getFieldExchangeRateSystem().setFieldValue(moDsmEntry.getDestinyExchangeRateSystem());
            moPanelFkReferenceId1.getFieldExchangeRate().setFieldValue(moDsmEntry.getDestinyExchangeRate());

            moPanelFkReferenceId1.renderGetValueCyPanels(new int[] { moDsmEntry.getFkDestinyCurrencyId() });
        }

        if (moPanelFkDpsId != null) {
            moPanelFkDpsId.getFieldFkDpsId().setKey(new int[] { moDsmEntry.getFkSourceDpsYearId_n(), moDsmEntry.getFkSourceDpsDocId_n() });

            moPanelFkDpsId.getFieldFkCurrencyId().setKey(new int[] { moDsmEntry.getFkSourceCurrencyId() });
            moPanelFkDpsId.getFieldValue().setDouble(moDsmEntry.getSourceValue());
            moPanelFkDpsId.getFieldValueCy().setDouble(moDsmEntry.getSourceValueCy());
            moPanelFkDpsId.getFieldExchangeRateSystem().setDouble(moDsmEntry.getSourceExchangeRateSystem());
            moPanelFkDpsId.getFieldExchangeRate().setDouble(moDsmEntry.getSourceExchangeRate());

            moPanelFkDpsId.renderSetValueCyPanels(new int[] { moDsmEntry.getFkSourceCurrencyId() }, moDsmEntry.getSourceValueCy(), moDsmEntry.getSourceValue(), moDsmEntry.getSourceExchangeRate(), moDsmEntry.getSourceExchangeRateSystem());
        }

        if (moPanelFkDpsId1 != null) {
            moPanelFkDpsId1.getFieldFkDpsId().setKey(new int[] { moDsmEntry.getFkDestinyDpsYearId_n(), moDsmEntry.getFkDestinyDpsDocId_n() });

            moPanelFkDpsId1.getFieldFkCurrencyId().setKey(new int[] { moDsmEntry.getFkDestinyCurrencyId() });
            moPanelFkDpsId1.getFieldValue().setDouble(moDsmEntry.getDestinyValue());
            moPanelFkDpsId1.getFieldValueCy().setDouble(moDsmEntry.getDestinyValueCy());
            moPanelFkDpsId1.getFieldExchangeRateSystem().setDouble(moDsmEntry.getDestinyExchangeRateSystem());
            moPanelFkDpsId1.getFieldExchangeRate().setDouble(moDsmEntry.getDestinyExchangeRate());

            moPanelFkDpsId1.renderGetValueCyPanels(new int[] { moDsmEntry.getFkDestinyCurrencyId() });
        }

        if ((moPanelFkReferenceId != null || moPanelFkDpsId != null) && moPanelFkAccountId != null) {
            moPanelFkAccountId.getFieldAccount().setFieldValue(moDsmEntry.getFkDestinyAccountId_n());
            moPanelFkAccountId.refreshPanel();

            moPanelFkCurrencyId.getFieldFkCurrencyId().setKey(new int[] { moDsmEntry.getFkDestinyCurrencyId() });
            moPanelFkCurrencyId.getFieldValue().setDouble(moDsmEntry.getDestinyValue());
            moPanelFkCurrencyId.getFieldValueCy().setDouble(moDsmEntry.getDestinyValueCy());
            moPanelFkCurrencyId.getFieldExchangeRateSystem().setDouble(moDsmEntry.getDestinyExchangeRateSystem());
            moPanelFkCurrencyId.getFieldExchangeRate().setDouble(moDsmEntry.getDestinyExchangeRate());

            moPanelFkCurrencyId.renderGetValueCyPanels(new int[] { moDsmEntry.getFkDestinyCurrencyId() });
        }

        if (moPanelFkAccountId != null && (moPanelFkReferenceId1 != null || moPanelFkDpsId1 != null)) {
            moPanelFkAccountId.getFieldAccount().setFieldValue(moDsmEntry.getFkSourceAccountId_n());
            moPanelFkAccountId.refreshPanel();

            moPanelFkCurrencyId.getFieldFkCurrencyId().setKey(new int[] { moDsmEntry.getFkSourceCurrencyId() });
            moPanelFkCurrencyId.getFieldValue().setDouble(moDsmEntry.getSourceValue());
            moPanelFkCurrencyId.getFieldValueCy().setDouble(moDsmEntry.getSourceValueCy());
            moPanelFkCurrencyId.getFieldExchangeRateSystem().setDouble(moDsmEntry.getSourceExchangeRateSystem());
            moPanelFkCurrencyId.getFieldExchangeRate().setDouble(moDsmEntry.getSourceExchangeRate());

            moPanelFkCurrencyId.renderSetValueCyPanels(new int[] { moDsmEntry.getFkSourceCurrencyId() }, moDsmEntry.getSourceValueCy(), moDsmEntry.getSourceValue(), moDsmEntry.getSourceExchangeRate(), moDsmEntry.getSourceExchangeRateSystem());
        }

        moPanelIsDeleted.getFieldIsDeleted().setBoolean(moDsmEntry.getIsDeleted());

        for (i = 0; i < moDsmEntry.getDbmsNotes().size(); i++) {
            dataNotesRow = new SDataDsmEntryNotesRow(moDsmEntry.getDbmsNotes().get(i));
            moDsmEntryNotesPane.addTableRow(dataNotesRow);
        }

        jcbFkBizPartnerId.setEnabled(false);
        jbFkBizPartnerId.setEnabled(false);
        moPanelIsDeleted.getFieldIsDeleted().getComponent().setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataDps oDps = null;

        if (moDsmEntry == null) {
            int[] period = SLibTimeUtilities.digestYearMonth(miClient.getSessionXXX().getWorkingDate());

            moDsmEntry = new SDataDsmEntry();
            moDsmEntry.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
            moDsmEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moDsmEntry.setUserNewTs(miClient.getSessionXXX().getSystemDate());
            moDsmEntry.setDbmsUserEdit("(n/a)");
            moDsmEntry.setUserEditTs(miClient.getSessionXXX().getSystemDate());
            moDsmEntry.setDbmsUserDelete("(n/a)");
            moDsmEntry.setUserDeleteTs(miClient.getSessionXXX().getSystemDate());

            moDsmEntry.setPkYearId(period[0]);

            renderBalanceDps();
        }
        else {
            moDsmEntry.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
            moDsmEntry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moDsmEntry.setUserEditTs(miClient.getSessionXXX().getSystemDate());
        }

        if (moPanelFkReferenceId != null) {
            moDsmEntry.setSourceReference(moPanelFkReferenceId.getFieldReference().getString());

            moDsmEntry.setFkSourceCurrencyId(moPanelFkReferenceId.getFieldFkCurrencyId().getKeyAsIntArray()[0]);
            moDsmEntry.setSourceValue(moPanelFkReferenceId.getFieldValue().getDouble());
            moDsmEntry.setSourceValueCy(moPanelFkReferenceId.getFieldValueCy().getDouble());
            moDsmEntry.setSourceExchangeRateSystem(moPanelFkReferenceId.getFieldExchangeRateSystem().getDouble() == 0 ? moPanelFkReferenceId.getFieldExchangeRate().getDouble() : moPanelFkReferenceId.getFieldExchangeRateSystem().getDouble());
            moDsmEntry.setSourceExchangeRate(moPanelFkReferenceId.getFieldExchangeRate().getDouble());
        }

        if (moPanelFkAccountId != null && (moPanelFkReferenceId1 != null || moPanelFkDpsId1 != null)) {
            moDsmEntry.setFkSourceAccountId_n(moPanelFkAccountId.getFieldAccount().getString());

            moDsmEntry.setFkSourceCurrencyId(moPanelFkCurrencyId.getFieldFkCurrencyId().getKeyAsIntArray()[0]);
            moDsmEntry.setSourceValue(moPanelFkCurrencyId.getFieldValue().getDouble());
            moDsmEntry.setSourceValueCy(moPanelFkCurrencyId.getFieldValueCy().getDouble());
            moDsmEntry.setSourceExchangeRateSystem(moPanelFkCurrencyId.getFieldExchangeRateSystem().getDouble() == 0 ? moPanelFkCurrencyId.getFieldExchangeRate().getDouble() : moPanelFkCurrencyId.getFieldExchangeRateSystem().getDouble());
            moDsmEntry.setSourceExchangeRate(moPanelFkCurrencyId.getFieldExchangeRate().getDouble());
            moDsmEntry.setDbmsSourceAccount(moPanelFkAccountId.getCurrentInputAccount().getAccount());
        }

        if (moPanelFkReferenceId1 != null) {
            moDsmEntry.setDestinyReference(moPanelFkReferenceId1.getFieldReference().getString());

            moDsmEntry.setFkDestinyCurrencyId(moPanelFkReferenceId1.getFieldFkCurrencyId().getKeyAsIntArray()[0]);
            moDsmEntry.setDestinyValue(moPanelFkReferenceId1.getFieldValue().getDouble());
            moDsmEntry.setDestinyValueCy(moPanelFkReferenceId1.getFieldValueCy().getDouble());
            moDsmEntry.setDestinyExchangeRateSystem(moPanelFkReferenceId1.getFieldExchangeRateSystem().getDouble() == 0 ? moPanelFkReferenceId1.getFieldExchangeRate().getDouble() : moPanelFkReferenceId1.getFieldExchangeRateSystem().getDouble());
            moDsmEntry.setDestinyExchangeRate(moPanelFkReferenceId1.getFieldExchangeRate().getDouble());
        }

        if (moPanelFkDpsId != null) {
            oDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, new int[] { moPanelFkDpsId.getFieldFkDpsId().getKeyAsIntArray()[0], moPanelFkDpsId.getFieldFkDpsId().getKeyAsIntArray()[1] }, SLibConstants.EXEC_MODE_VERBOSE);
            moDsmEntry.setFkSourceDpsYearId_n(moPanelFkDpsId.getFieldFkDpsId().getKeyAsIntArray()[0]);
            moDsmEntry.setFkSourceDpsDocId_n(moPanelFkDpsId.getFieldFkDpsId().getKeyAsIntArray()[1]);

            moDsmEntry.setFkSourceCurrencyId(moPanelFkDpsId.getFieldFkCurrencyId().getKeyAsIntArray()[0]);
            moDsmEntry.setSourceValue(moPanelFkDpsId.getFieldValue().getDouble());
            moDsmEntry.setSourceValueCy(moPanelFkDpsId.getFieldValueCy().getDouble());
            moDsmEntry.setSourceExchangeRateSystem(moPanelFkDpsId.getFieldExchangeRateSystem().getDouble() == 0 ? moPanelFkDpsId.getFieldExchangeRate().getDouble() : moPanelFkDpsId.getFieldExchangeRateSystem().getDouble());
            moDsmEntry.setSourceExchangeRate(moPanelFkDpsId.getFieldExchangeRate().getDouble());

            moDsmEntry.setDbmsSourceDps(moPanelFkDpsId.getFieldNumberDps());
            moDsmEntry.setDbmsFkDpsCategoryId(moPanelFkDpsId.getParamFkDpsCategoryId());

            if (oDps != null) {
                moDsmEntry.setDbmsSourceTpDps(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNU_TP_DPS, new int[] { oDps.getFkDpsCategoryId(), oDps.getFkDpsClassId(), oDps.getFkDpsTypeId() }, SLibConstants.DESCRIPTION_CODE));
            }
            else {
                moDsmEntry.setDbmsSourceTpDps("FAC");
            }
        }

        if (moPanelFkDpsId1 != null) {
            oDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, new int[] { moPanelFkDpsId1.getFieldFkDpsId().getKeyAsIntArray()[0], moPanelFkDpsId1.getFieldFkDpsId().getKeyAsIntArray()[1] }, SLibConstants.EXEC_MODE_VERBOSE);
            moDsmEntry.setFkDestinyDpsYearId_n(moPanelFkDpsId1.getFieldFkDpsId().getKeyAsIntArray()[0]);
            moDsmEntry.setFkDestinyDpsDocId_n(moPanelFkDpsId1.getFieldFkDpsId().getKeyAsIntArray()[1]);

            moDsmEntry.setFkDestinyCurrencyId(moPanelFkDpsId1.getFieldFkCurrencyId().getKeyAsIntArray()[0]);
            moDsmEntry.setDestinyValue(moPanelFkDpsId1.getFieldValue().getDouble());
            moDsmEntry.setDestinyValueCy(moPanelFkDpsId1.getFieldValueCy().getDouble());
            moDsmEntry.setDestinyExchangeRateSystem(moPanelFkDpsId1.getFieldExchangeRateSystem().getDouble() == 0 ? moPanelFkDpsId1.getFieldExchangeRate().getDouble() : moPanelFkDpsId1.getFieldExchangeRateSystem().getDouble());
            moDsmEntry.setDestinyExchangeRate(moPanelFkDpsId1.getFieldExchangeRate().getDouble());

            moDsmEntry.setDbmsDestinyDps(moPanelFkDpsId1.getFieldNumberDps());
            moDsmEntry.setDbmsFkDpsCategoryId(moPanelFkDpsId1.getParamFkDpsCategoryId());

            if (oDps != null) {
                moDsmEntry.setDbmsDestinyTpDps(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNU_TP_DPS, new int[] { oDps.getFkDpsCategoryId(), oDps.getFkDpsClassId(), oDps.getFkDpsTypeId() }, SLibConstants.DESCRIPTION_CODE));
            }
            else {
                moDsmEntry.setDbmsDestinyTpDps("FAC");
            }
        }

        if ((moPanelFkReferenceId != null || moPanelFkDpsId != null) && moPanelFkAccountId != null) {
            moDsmEntry.setFkDestinyAccountId_n(moPanelFkAccountId.getFieldAccount().getString());

            moDsmEntry.setFkDestinyCurrencyId(moPanelFkCurrencyId.getFieldFkCurrencyId().getKeyAsIntArray()[0]);
            moDsmEntry.setDestinyValue(moPanelFkCurrencyId.getFieldValue().getDouble());
            moDsmEntry.setDestinyValueCy(moPanelFkCurrencyId.getFieldValueCy().getDouble());
            moDsmEntry.setDestinyExchangeRateSystem(moPanelFkCurrencyId.getFieldExchangeRateSystem().getDouble() == 0 ? moPanelFkCurrencyId.getFieldExchangeRate().getDouble() : moPanelFkCurrencyId.getFieldExchangeRateSystem().getDouble());
            moDsmEntry.setDestinyExchangeRate(moPanelFkCurrencyId.getFieldExchangeRate().getDouble());
            moDsmEntry.setDbmsDestinyAccount(moPanelFkAccountId.getCurrentInputAccount().getAccount());
        }

        moDsmEntry.setFkAccountingMoveTypeId(mnParamSubclassAccMovId[0]);
        moDsmEntry.setFkAccountingMoveClassId(mnParamSubclassAccMovId[1]);
        moDsmEntry.setFkAccountingMoveSubclassId(mnParamSubclassAccMovId[2]);
        moDsmEntry.setFkBizPartnerId(moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
        moDsmEntry.setDbmsFkBizPartnerBranchId_n(getBizPartnerBranchId());

        moDsmEntry.setDbmsBiz(msBizPartner);
        moDsmEntry.setDbmsSubclassMove(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, mnParamSubclassAccMovId));

        moDsmEntry.setDbmsSourceAccount(moDsmEntry.getFkSourceAccountId_n().toString().length() > 0 ? moDsmEntry.getDbmsSourceAccount() : "(n/a)");
        moDsmEntry.setDbmsSourceCurrencyKey(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moDsmEntry.getFkSourceCurrencyId() }, SLibConstants.DESCRIPTION_CODE));

        moDsmEntry.setDbmsDestinyAccount(moDsmEntry.getFkDestinyAccountId_n().toString().length() > 0 ? moDsmEntry.getDbmsDestinyAccount() : "(n/a)");
        moDsmEntry.setDbmsDestinyCurrencyKey(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moDsmEntry.getFkDestinyCurrencyId() }, SLibConstants.DESCRIPTION_CODE));

        moDsmEntry.setIsDeleted(moPanelIsDeleted.getFieldIsDeleted().getBoolean());

        moDsmEntry.setDbmsCtSysMovId(mnParamTypeSysMov[0]);
        moDsmEntry.setDbmsTpSysMovId(mnParamTypeSysMov[1]);

        moDsmEntry.setDbmsAccountPay(msAccBpPay);
        moDsmEntry.setDbmsAccountOp(msAccBpOp);

        moDsmEntry.getDbmsNotes().removeAllElements();
        for (int i = 0; i < moDsmEntryNotesPane.getTableGuiRowCount(); i++) {
            moDsmEntry.getDbmsNotes().add((SDataDsmEntryNotes) moDsmEntryNotesPane.getTableRow(i).getData());
        }

        return moDsmEntry;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnParamCategoryBp = ((int []) value)[0];
                switch (mnParamCategoryBp) {
                    case SDataConstantsSys.BPSS_CT_BP_CUS:
                        jlFkBizPartnerId.setText("Cliente: *");
                        mnParamTypeSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_SUP:
                        jlFkBizPartnerId.setText("Proveedor: *");
                        mnParamTypeSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_DBR:
                        jlFkBizPartnerId.setText("Deudor diverso: *");
                        mnParamTypeSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_CDR:
                        jlFkBizPartnerId.setText("Acreedor diverso: *");
                        mnParamTypeSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
                        break;
                }
                break;
            case 2:
                mnParamSubclassAccMovId = (int []) value;
                break;
            case 3:
                mtParamDate = (java.util.Date) value;
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbNotesNew) {
                actionNotesNew();
            }
            else if (button == jbNotesEdit) {
                actionNotesEdit();
            }
            else if (button == jbNotesDelete) {
                actionNotesDelete();
            }
            else if (button == jbFkBizPartnerId) {
                actionFkBizPartnerId();
            }
        }
    }

    public void formRefreshPanels() {

        // Create and add form panels:

        try {
            if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP)) {

                    // Panel source:
                    moPanelFkReferenceId = new SPanelReference(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkReferenceId, BorderLayout.CENTER);
                    moPanelFkReferenceId.formRefreshCatalogues();
                    moPanelFkReferenceId.resetPanel();
                    moPanelFkReferenceId.refreshPanel();
                    moPanelFkReferenceId.enableFields(false);

                    jpSource2.remove(jlDummyRef2);

                    // Panel destiny:

                    moPanelFkDpsId1 = new SPanelDpsBalance(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkDpsId1, BorderLayout.CENTER);
                    moPanelFkDpsId1.formRefreshCatalogues();
                    moPanelFkDpsId1.resetPanel();
                    moPanelFkDpsId1.refreshPanel();
                    moPanelFkDpsId1.enableFields(false);

                    jpDestiny2.remove(jlDummyRef4);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkReferenceId.setValue(3, moPanelFkDpsId1);
                    moPanelFkReferenceId.setValue(7, mtParamDate);
                    moPanelFkDpsId1.setValue(4, moPanelFkReferenceId);
                    moPanelFkDpsId1.setValue(7, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_TRA)) {

                    // Panel source:

                    moPanelFkReferenceId = new SPanelReference(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkReferenceId, BorderLayout.CENTER);
                    moPanelFkReferenceId.formRefreshCatalogues();
                    moPanelFkReferenceId.resetPanel();
                    moPanelFkReferenceId.refreshPanel();
                    moPanelFkReferenceId.enableFields(false);

                    jpSource2.remove(jlDummyRef2);

                    // Panel destiny:

                    moPanelFkReferenceId1 = new SPanelReference(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkReferenceId1, BorderLayout.CENTER);
                    moPanelFkReferenceId1.formRefreshCatalogues();
                    moPanelFkReferenceId1.resetPanel();
                    moPanelFkReferenceId1.refreshPanel();
                    moPanelFkReferenceId1.enableFields(false);

                    jpDestiny2.remove(jlDummyRef4);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkReferenceId.setValue(4, moPanelFkReferenceId1);
                    moPanelFkReferenceId.setValue(7, mtParamDate);
                    moPanelFkReferenceId1.setValue(4, moPanelFkReferenceId);
                    moPanelFkReferenceId1.setValue(7, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_CLO)) {

                    // Panel source:

                    moPanelFkReferenceId = new SPanelReference(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkReferenceId, BorderLayout.CENTER);
                    moPanelFkReferenceId.formRefreshCatalogues();
                    moPanelFkReferenceId.resetPanel();
                    moPanelFkReferenceId.refreshPanel();
                    moPanelFkReferenceId.enableFields(false);

                    jpSource2.remove(jlDummyRef2);

                    // Panel destiny:

                    moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkAccountId, BorderLayout.CENTER);
                    moPanelFkAccountId.resetPanel();
                    moPanelFkAccountId.enableFields(false);

                    moPanelFkCurrencyId = new SPanelCurrency(miClient, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny2.remove(jlDummyRef4);
                    jpDestiny2.add(moPanelFkCurrencyId, BorderLayout.CENTER);
                    moPanelFkCurrencyId.formRefreshCatalogues();
                    moPanelFkCurrencyId.resetPanel();
                    moPanelFkCurrencyId.refreshPanel();
                    moPanelFkCurrencyId.enableFields(false);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkReferenceId.setValue(5, moPanelFkCurrencyId);
                    moPanelFkReferenceId.setValue(7, mtParamDate);
                    moPanelFkCurrencyId.setValue(4, moPanelFkReferenceId);
                    moPanelFkCurrencyId.setValue(6, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_OPE)) {

                    // Panel source:

                    moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkAccountId, BorderLayout.CENTER);
                    moPanelFkAccountId.resetPanel();
                    moPanelFkAccountId.enableFields(false);

                    moPanelFkCurrencyId = new SPanelCurrency(miClient, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource2.remove(jlDummyRef2);
                    jpSource2.add(moPanelFkCurrencyId, BorderLayout.CENTER);
                    moPanelFkCurrencyId.formRefreshCatalogues();
                    moPanelFkCurrencyId.resetPanel();
                    moPanelFkCurrencyId.refreshPanel();
                    moPanelFkCurrencyId.enableFields(false);

                    // Panel destiny:

                    moPanelFkReferenceId1 = new SPanelReference(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkReferenceId1, BorderLayout.CENTER);
                    moPanelFkReferenceId1.formRefreshCatalogues();
                    moPanelFkReferenceId1.resetPanel();
                    moPanelFkReferenceId1.refreshPanel();
                    moPanelFkReferenceId1.enableFields(false);

                    jpDestiny2.remove(jlDummyRef4);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkCurrencyId.setValue(4, moPanelFkReferenceId1);
                    moPanelFkCurrencyId.setValue(6, mtParamDate);
                    moPanelFkReferenceId1.setValue(5, moPanelFkCurrencyId);
                    moPanelFkReferenceId1.setValue(7, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_APP)) {

                    // Panel source:

                    moPanelFkDpsId = new SPanelDpsBalance(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkDpsId, BorderLayout.CENTER);
                    moPanelFkDpsId.formRefreshCatalogues();
                    moPanelFkDpsId.resetPanel();
                    moPanelFkDpsId.refreshPanel();
                    moPanelFkDpsId.enableFields(false);

                    jpSource2.remove(jlDummyRef2);

                    // Panel destiny:

                    moPanelFkReferenceId1 = new SPanelReference(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkReferenceId1, BorderLayout.CENTER);
                    moPanelFkReferenceId1.formRefreshCatalogues();
                    moPanelFkReferenceId1.resetPanel();
                    moPanelFkReferenceId1.refreshPanel();
                    moPanelFkReferenceId1.enableFields(false);

                    jpDestiny2.remove(jlDummyRef4);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkDpsId.setValue(4, moPanelFkReferenceId1);
                    moPanelFkDpsId.setValue(7, mtParamDate);
                    moPanelFkReferenceId1.setValue(3, moPanelFkDpsId);
                    moPanelFkReferenceId1.setValue(7, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_TRA)) {

                    // Panel source:

                    moPanelFkDpsId = new SPanelDpsBalance(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkDpsId, BorderLayout.CENTER);
                    moPanelFkDpsId.formRefreshCatalogues();
                    moPanelFkDpsId.resetPanel();
                    moPanelFkDpsId.refreshPanel();
                    moPanelFkDpsId.enableFields(false);

                    jpSource2.remove(jlDummyRef2);

                    // Panel destiny:

                    moPanelFkDpsId1 = new SPanelDpsBalance(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkDpsId1, BorderLayout.CENTER);
                    moPanelFkDpsId1.formRefreshCatalogues();
                    moPanelFkDpsId1.resetPanel();
                    moPanelFkDpsId1.refreshPanel();
                    moPanelFkDpsId1.enableFields(false);

                    jpDestiny2.remove(jlDummyRef4);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkDpsId.setValue(3, moPanelFkDpsId1);
                    moPanelFkDpsId.setValue(7, mtParamDate);
                    moPanelFkDpsId1.setValue(3, moPanelFkDpsId);
                    moPanelFkDpsId1.setValue(7, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_CLO)) {

                    // Panel source:

                    moPanelFkDpsId = new SPanelDpsBalance(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkDpsId, BorderLayout.CENTER);
                    moPanelFkDpsId.formRefreshCatalogues();
                    moPanelFkDpsId.resetPanel();
                    moPanelFkDpsId.refreshPanel();
                    moPanelFkDpsId.enableFields(false);

                    jpSource2.remove(jlDummyRef2);

                    // Panel destiny:

                    moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkAccountId, BorderLayout.CENTER);
                    moPanelFkAccountId.resetPanel();
                    moPanelFkAccountId.enableFields(false);

                    moPanelFkCurrencyId = new SPanelCurrency(miClient, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny2.remove(jlDummyRef4);
                    jpDestiny2.add(moPanelFkCurrencyId, BorderLayout.CENTER);
                    moPanelFkCurrencyId.formRefreshCatalogues();
                    moPanelFkCurrencyId.resetPanel();
                    moPanelFkCurrencyId.refreshPanel();
                    moPanelFkCurrencyId.enableFields(false);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkDpsId.setValue(5, moPanelFkCurrencyId);
                    moPanelFkDpsId.setValue(7, mtParamDate);
                    moPanelFkCurrencyId.setValue(3, moPanelFkDpsId);
                    moPanelFkCurrencyId.setValue(6, mtParamDate);
            }
            else if (SLibUtilities.compareKeys(mnParamSubclassAccMovId, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_OPE)) {

                    // Panel source:

                    moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
                    jpSource1.remove(jlDummyRef1);
                    jpSource1.add(moPanelFkAccountId, BorderLayout.CENTER);
                    moPanelFkAccountId.resetPanel();
                    moPanelFkAccountId.enableFields(false);

                    moPanelFkCurrencyId = new SPanelCurrency(miClient, SDataConstants.TRNX_DSM_ETY_SOURCE);
                    jpSource2.remove(jlDummyRef2);
                    jpSource2.add(moPanelFkCurrencyId, BorderLayout.CENTER);
                    moPanelFkCurrencyId.formRefreshCatalogues();
                    moPanelFkCurrencyId.resetPanel();
                    moPanelFkCurrencyId.refreshPanel();
                    moPanelFkCurrencyId.enableFields(false);

                    // Panel destiny:

                    moPanelFkDpsId1 = new SPanelDpsBalance(miClient, mnParamTypeSysMov, mnParamFkBizPartnerId, SDataConstants.TRNX_DSM_ETY_DESTINY);
                    jpDestiny1.remove(jlDummyRef3);
                    jpDestiny1.add(moPanelFkDpsId1, BorderLayout.CENTER);
                    moPanelFkDpsId1.formRefreshCatalogues();
                    moPanelFkDpsId1.resetPanel();
                    moPanelFkDpsId1.refreshPanel();
                    moPanelFkDpsId1.enableFields(false);

                    jpDestiny2.remove(jlDummyRef4);

                    // Panel delete:

                    moPanelIsDeleted = new SPanelIsDeleted(miClient);
                    jpSouth.remove(jlDummyRef5);
                    jpSouth.add(moPanelIsDeleted, BorderLayout.CENTER);
                    moPanelIsDeleted.resetPanel();

                    // Send panels parameters:

                    moPanelFkCurrencyId.setValue(3, moPanelFkDpsId1);
                    moPanelFkCurrencyId.setValue(6, mtParamDate);
                    moPanelFkDpsId1.setValue(5, moPanelFkCurrencyId);
                    moPanelFkDpsId1.setValue(7, mtParamDate);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }
}
