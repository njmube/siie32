/*
 * DFormCompany.java
 *
 * Created on 17 de agosto de 2008, 01:42 AM
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataRecord;
import erp.mfin.form.SDialogRecordPicker;
import erp.mfin.form.SPanelRecord;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDsm;
import erp.mtrn.data.SDataDsmEntry;
import erp.mtrn.data.SDataDsmEntryRow;
import erp.mtrn.data.SDataDsmNotes;
import erp.mtrn.data.SDataDsmNotesRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import sa.lib.srv.SSrvLock;
import sa.lib.srv.SSrvUtils;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormDsm extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, javax.swing.event.ListSelectionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataDsm moDsm;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldIsAudited;
    private erp.lib.form.SFormField moFieldIsAuthorized;
    private erp.lib.form.SFormField moFieldIsSystem;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldFkSubsystemCategoryId;
    private erp.lib.form.SFormField moFieldFkCompanyBranchId;

    private java.lang.Object moRecordUserKey;
    private sa.lib.srv.SSrvLock moRecordUserLock;
    private erp.mfin.data.SDataRecord moRecordUser;
    private erp.mfin.form.SDialogRecordPicker moDialogRecordPicker;

    private erp.lib.table.STablePane moEntriesPane;
    private erp.lib.table.STablePane moNotesPane;
    private erp.mfin.form.SPanelRecord moPanelRecord;

    private int mnParamCategoryBp;

    /** Creates new form DFormCompany */
    public SFormDsm(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_DSM;
        mnParamCategoryBp = 0;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jpData = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel53 = new javax.swing.JPanel();
        jlFkSubsystemCategoryId = new javax.swing.JLabel();
        jPanel54 = new javax.swing.JPanel();
        jtfFkSubsystemCategoryId = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlFkCompanyBranchId = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jcbFkCompanyBranchId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel4 = new javax.swing.JPanel();
        jbFkCompanyBranchId = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jPanel38 = new javax.swing.JPanel();
        jpStartDate = new javax.swing.JPanel();
        jtfDate = new javax.swing.JFormattedTextField();
        jPanel39 = new javax.swing.JPanel();
        jbDate = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jtfConcept = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jckIsAudited = new javax.swing.JCheckBox();
        jckIsAuthorized = new javax.swing.JCheckBox();
        jPanel16 = new javax.swing.JPanel();
        jckIsSystem = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel23 = new javax.swing.JPanel();
        jckRecordUser = new javax.swing.JCheckBox();
        jPanel34 = new javax.swing.JPanel();
        jtfRecordDate = new javax.swing.JTextField();
        jtfRecordBranch = new javax.swing.JTextField();
        jtfRecordNumber = new javax.swing.JTextField();
        jbRecordSelect = new javax.swing.JButton();
        jbRecordView = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpLevel = new javax.swing.JPanel();
        jpLevelAction = new javax.swing.JPanel();
        jbSubsysPayApp = new javax.swing.JButton();
        jbSubsysPayTra = new javax.swing.JButton();
        jbSubsysPayClo = new javax.swing.JButton();
        jbSubsysPayOpe = new javax.swing.JButton();
        jbSubsysBalApp = new javax.swing.JButton();
        jbSubsysBalTra = new javax.swing.JButton();
        jbSubsysBalClo = new javax.swing.JButton();
        jbSubsysBalOpe = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlBizAccountSource = new javax.swing.JLabel();
        jtfAccountSource = new javax.swing.JTextField();
        jlBizAccountDestiny = new javax.swing.JLabel();
        jtfAccountDestiny = new javax.swing.JTextField();
        jpNotes = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbNotesNew = new javax.swing.JButton();
        jbNotesEdit = new javax.swing.JButton();
        jbNotesDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jpControlsRecord = new javax.swing.JPanel();
        jpControlsButtons = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        jLabel3.setText("Lote sugerido: *");

        jTextField2.setText("LOTE SUGERIDO");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movimientos de asociados de negocios"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpData.setPreferredSize(new java.awt.Dimension(520, 145));
        jpData.setLayout(new java.awt.BorderLayout());

        jPanel10.setPreferredSize(new java.awt.Dimension(520, 145));
        jPanel10.setLayout(new java.awt.GridLayout(1, 1, 5, 5));

        jPanel11.setPreferredSize(new java.awt.Dimension(520, 145));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel15.setPreferredSize(new java.awt.Dimension(570, 140));
        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jPanel13.setMinimumSize(new java.awt.Dimension(176, 150));
        jPanel13.setPreferredSize(new java.awt.Dimension(561, 90));
        jPanel13.setLayout(new java.awt.GridLayout(4, 1, 5, 5));

        jPanel53.setLayout(new java.awt.BorderLayout());

        jlFkSubsystemCategoryId.setText("Categoría subsistema:");
        jlFkSubsystemCategoryId.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel53.add(jlFkSubsystemCategoryId, java.awt.BorderLayout.WEST);

        jPanel54.setLayout(new java.awt.BorderLayout());

        jtfFkSubsystemCategoryId.setEditable(false);
        jtfFkSubsystemCategoryId.setText("CATEGORY");
        jtfFkSubsystemCategoryId.setFocusable(false);
        jtfFkSubsystemCategoryId.setPreferredSize(new java.awt.Dimension(220, 20));
        jPanel54.add(jtfFkSubsystemCategoryId, java.awt.BorderLayout.WEST);

        jPanel53.add(jPanel54, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel53);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jlFkCompanyBranchId.setForeground(java.awt.Color.blue);
        jlFkCompanyBranchId.setText("Sucursal de la empresa: *");
        jlFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel14.add(jlFkCompanyBranchId, java.awt.BorderLayout.WEST);

        jPanel7.setPreferredSize(new java.awt.Dimension(250, 20));
        jPanel7.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jcbFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(250, 20));
        jPanel7.add(jcbFkCompanyBranchId);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jbFkCompanyBranchId.setText("...");
        jbFkCompanyBranchId.setToolTipText("Seleccionar sucursal");
        jbFkCompanyBranchId.setFocusable(false);
        jbFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkCompanyBranchId, java.awt.BorderLayout.WEST);

        jPanel7.add(jPanel4);

        jPanel14.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel14);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jlDate.setText("Fecha: *");
        jlDate.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel12.add(jlDate, java.awt.BorderLayout.WEST);

        jPanel38.setLayout(new java.awt.BorderLayout());

        jpStartDate.setLayout(new java.awt.BorderLayout(5, 0));

        jtfDate.setText("dd/mm/yyyy");
        jtfDate.setPreferredSize(new java.awt.Dimension(75, 20));
        jpStartDate.add(jtfDate, java.awt.BorderLayout.WEST);

        jPanel38.add(jpStartDate, java.awt.BorderLayout.WEST);

        jPanel39.setLayout(new java.awt.BorderLayout());

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel39.add(jbDate, java.awt.BorderLayout.WEST);

        jPanel38.add(jPanel39, java.awt.BorderLayout.CENTER);
        jPanel38.add(jPanel41, java.awt.BorderLayout.LINE_END);

        jPanel12.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel12);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jlConcept.setText("Concepto: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(150, 14));
        jPanel19.add(jlConcept, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(220, 23));
        jtfConcept.setRequestFocusEnabled(false);
        jPanel6.add(jtfConcept);

        jPanel19.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel19);

        jPanel15.add(jPanel13, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado del documento:"));
        jPanel5.setMinimumSize(new java.awt.Dimension(135, 150));
        jPanel5.setPreferredSize(new java.awt.Dimension(146, 100));
        jPanel5.setLayout(new java.awt.GridLayout(4, 1));

        jPanel9.setLayout(new java.awt.BorderLayout());

        jckIsAudited.setText("Registro auditado");
        jckIsAudited.setEnabled(false);
        jckIsAudited.setFocusable(false);
        jckIsAudited.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jckIsAudited, java.awt.BorderLayout.WEST);

        jckIsAuthorized.setText("Registro autorizado");
        jckIsAuthorized.setEnabled(false);
        jckIsAuthorized.setFocusable(false);
        jckIsAuthorized.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel9.add(jckIsAuthorized, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel9);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jckIsSystem.setText("Registro sistema");
        jckIsSystem.setEnabled(false);
        jckIsSystem.setFocusable(false);
        jckIsSystem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jckIsSystem, java.awt.BorderLayout.WEST);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel16.add(jckIsDeleted, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel16);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jckRecordUser.setText("Póliza contable:");
        jckRecordUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel23.add(jckRecordUser);

        jPanel5.add(jPanel23);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jtfRecordDate.setEditable(false);
        jtfRecordDate.setText("01/01/2000");
        jtfRecordDate.setToolTipText("Fecha de la póliza contable");
        jtfRecordDate.setFocusable(false);
        jtfRecordDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel34.add(jtfRecordDate);

        jtfRecordBranch.setEditable(false);
        jtfRecordBranch.setText("SUC");
        jtfRecordBranch.setToolTipText("Sucursal de la empresa");
        jtfRecordBranch.setFocusable(false);
        jtfRecordBranch.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel34.add(jtfRecordBranch);

        jtfRecordNumber.setEditable(false);
        jtfRecordNumber.setText("TP-000001");
        jtfRecordNumber.setToolTipText("Número de póliza contable");
        jtfRecordNumber.setFocusable(false);
        jtfRecordNumber.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel34.add(jtfRecordNumber);

        jbRecordSelect.setText("...");
        jbRecordSelect.setToolTipText("Seleccionar póliza contable");
        jbRecordSelect.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel34.add(jbRecordSelect);

        jbRecordView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbRecordView.setToolTipText("Ver póliza contable");
        jbRecordView.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel34.add(jbRecordView);

        jPanel5.add(jPanel34);

        jPanel15.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel15, java.awt.BorderLayout.PAGE_START);

        jPanel10.add(jPanel11);

        jpData.add(jPanel10, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpData, java.awt.BorderLayout.PAGE_START);
        jpData.getAccessibleContext().setAccessibleName("");

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jpLevel.setLayout(new java.awt.BorderLayout());

        jpLevelAction.setPreferredSize(new java.awt.Dimension(779, 23));
        jpLevelAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbSubsysPayApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysPayApp.setToolTipText("Crear aplicación de pago");
        jbSubsysPayApp.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysPayApp);

        jbSubsysPayTra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysPayTra.setToolTipText("Crear traspaso de pago");
        jbSubsysPayTra.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysPayTra);

        jbSubsysPayClo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysPayClo.setToolTipText("Crear cierre de pago");
        jbSubsysPayClo.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysPayClo);

        jbSubsysPayOpe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysPayOpe.setToolTipText("Crear apertura de pago");
        jbSubsysPayOpe.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysPayOpe);

        jbSubsysBalApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysBalApp.setToolTipText("Crear aplicación de saldo");
        jbSubsysBalApp.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysBalApp);

        jbSubsysBalTra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysBalTra.setToolTipText("Crear traspaso de saldo");
        jbSubsysBalTra.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysBalTra);

        jbSubsysBalClo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysBalClo.setToolTipText("Crear cierre de saldo");
        jbSubsysBalClo.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysBalClo);

        jbSubsysBalOpe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubsysBalOpe.setToolTipText("Crear apertura de saldo");
        jbSubsysBalOpe.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbSubsysBalOpe);

        jpLevel.add(jpLevelAction, java.awt.BorderLayout.PAGE_START);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlBizAccountSource.setText("Cuenta contable origen:");
        jlBizAccountSource.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel8.add(jlBizAccountSource);

        jtfAccountSource.setEditable(false);
        jtfAccountSource.setText("ACCOUNT");
        jtfAccountSource.setPreferredSize(new java.awt.Dimension(300, 20));
        jPanel8.add(jtfAccountSource);

        jlBizAccountDestiny.setText("Cuenta contable destino:");
        jlBizAccountDestiny.setPreferredSize(new java.awt.Dimension(125, 14));
        jPanel8.add(jlBizAccountDestiny);

        jtfAccountDestiny.setEditable(false);
        jtfAccountDestiny.setText("ACCOUNT");
        jtfAccountDestiny.setPreferredSize(new java.awt.Dimension(300, 20));
        jPanel8.add(jtfAccountDestiny);

        jpLevel.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Partidas", jpLevel);

        jpNotes.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(779, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbNotesNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbNotesNew.setToolTipText("Crear");
        jbNotesNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesNew);

        jbNotesEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbNotesEdit.setToolTipText("Modificar");
        jbNotesEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesEdit);

        jbNotesDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbNotesDelete.setToolTipText("Eliminar");
        jbNotesDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesDelete);

        jpNotes.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Notas", jpNotes);

        jPanel3.add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Subproductos");

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel3.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.GridLayout(1, 2));

        jpControlsRecord.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jpControls.add(jpControlsRecord);

        jpControlsButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControlsButtons.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jpControlsButtons.add(jbCancel);

        jpControls.add(jpControlsButtons);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-898)/2, (screenSize.height-714)/2, 898, 714);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm tableColumnsLevel[];
        erp.lib.table.STableColumnForm tableColumnsNotes[];

        mvFields = new Vector<SFormField>();
        moEntriesPane = new STablePane(miClient);
        moEntriesPane.setDoubleClickAction(this, "publicActionEdit");
        jpLevel.add(moEntriesPane, BorderLayout.CENTER);
        moNotesPane = new STablePane(miClient);
        moNotesPane.setDoubleClickAction(this, "publicActionEdit");
        jpNotes.add(moNotesPane, BorderLayout.CENTER);

        moFieldDate = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDate, jlDate);
        moFieldConcept = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldIsAudited = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsAudited);
        moFieldIsAuthorized = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsAuthorized);
        moFieldIsSystem = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsSystem);
        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);
        moFieldFkSubsystemCategoryId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfFkSubsystemCategoryId, jlFkSubsystemCategoryId);
        moFieldFkCompanyBranchId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCompanyBranchId, jlFkCompanyBranchId);
        moFieldFkCompanyBranchId.setPickerButton(jbFkCompanyBranchId);

        mvFields.add(moFieldFkCompanyBranchId);
        mvFields.add(moFieldDate);
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldIsAudited);
        mvFields.add(moFieldIsAuthorized);
        mvFields.add(moFieldIsSystem);

        jbFkCompanyBranchId.addActionListener(this);
        jbDate.addActionListener(this);
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbSubsysPayApp.addActionListener(this);
        jbSubsysPayTra.addActionListener(this);
        jbSubsysPayClo.addActionListener(this);
        jbSubsysPayOpe.addActionListener(this);
        jbSubsysBalApp.addActionListener(this);
        jbSubsysBalTra.addActionListener(this);
        jbSubsysBalClo.addActionListener(this);
        jbSubsysBalOpe.addActionListener(this);
        jbNotesNew.addActionListener(this);
        jbNotesEdit.addActionListener(this);
        jbNotesDelete.addActionListener(this);

        moPanelRecord = new SPanelRecord(miClient);
        jpControlsRecord.add(moPanelRecord);

        jbRecordSelect.addActionListener(this);
        jbRecordView.addActionListener(this);

        jckRecordUser.addItemListener(this);

        moDialogRecordPicker = new SDialogRecordPicker(miClient, SDataConstants.FINX_REC_USER);

        i = 0;
        tableColumnsLevel = new STableColumnForm[23];
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado negocios", 250);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo movimiento", 100);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Repositorio origen", 100);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable origen", STableConstants.WIDTH_ACCOUNT_ID);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Doc. origen", STableConstants.WIDTH_DOC_NUM);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor origen $", STableConstants.WIDTH_VALUE);
        tableColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio origen", STableConstants.WIDTH_EXCHANGE_RATE);
        tableColumnsLevel[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor moneda origen $", STableConstants.WIDTH_VALUE);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda origen", STableConstants.WIDTH_CURRENCY_KEY);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Repositorio destino", 100);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable destino", STableConstants.WIDTH_ACCOUNT_ID);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Doc. destino", STableConstants.WIDTH_DOC_NUM);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor destino $", STableConstants.WIDTH_VALUE);
        tableColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio destino", STableConstants.WIDTH_EXCHANGE_RATE);
        tableColumnsLevel[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor moneda destino $", STableConstants.WIDTH_VALUE);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda destino", STableConstants.WIDTH_CURRENCY_KEY);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        tableColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < tableColumnsLevel.length; i++) {
            moEntriesPane.addTableColumn(tableColumnsLevel[i]);
        }

        i = 0;
        tableColumnsNotes = new STableColumnForm[9];
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Notas", 500);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Impresión", STableConstants.WIDTH_BOOLEAN);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < tableColumnsNotes.length; i++) {
            moNotesPane.addTableColumn(tableColumnsNotes[i]);
        }

        SFormUtilities.createActionMap(rootPane, this, "publicActionNew", "new", KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEdit", "modify", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionDelete", "delete", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
        SFormUtilities.putActionMap(moPanelRecord, actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkCompanyBranchId.isEnabled()) jcbFkCompanyBranchId.requestFocus(); else jtfConcept.requestFocus();
        }
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDate.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDate.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDate.requestFocus();
        }
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCompanyBranchId, new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
    }

    private void renderSubsystemCategory(int subsys) {
        switch (subsys) {
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                moFieldFkSubsystemCategoryId.setString("CLIENTE");
                break;
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                moFieldFkSubsystemCategoryId.setString("PROVEEDOR");
                break;
            case SDataConstantsSys.BPSS_CT_BP_DBR:
                moFieldFkSubsystemCategoryId.setString("DEUDOR DIVERSO");
                break;
            case SDataConstantsSys.BPSS_CT_BP_CDR:
                moFieldFkSubsystemCategoryId.setString("ACREEDOR DIVERSO");
                break;
        }
    }

    private java.lang.Object renderTypeAccountBizPartner(int bizPartnerId, int typeAccountBizPartner) {
        SDataBizPartner oBizPartner = null;

        Vector<Object> mvParams = new Vector<Object>();
        String sMessage = "";
        String sAccBp = "";

        mvParams.removeAllElements();

        oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { bizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);

        if (oBizPartner != null) {
            mvParams.add(oBizPartner.getPkBizPartnerId());

            switch (mnParamCategoryBp) {
                case SDataConstantsSys.BPSS_CT_BP_SUP:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsSup().getPkBizPartnerCategoryId());
                    break;
                case SDataConstantsSys.BPSS_CT_BP_DBR:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsDbr().getPkBizPartnerCategoryId());
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CUS:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsCus().getPkBizPartnerCategoryId());
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CDR:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsCdr().getPkBizPartnerCategoryId());
                    break;
            }

            mvParams.add(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsHqBranch().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId());
            mvParams.add(typeAccountBizPartner);
            mvParams.add(miClient.getSessionXXX().getWorkingDate());
            mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.FIN_ACC_BP_GET,  mvParams, SLibConstants.EXEC_MODE_SILENT);

            if (mvParams.size() > 0) {
                if (SLibUtilities.parseInt(mvParams.get(1).toString()) > 0) {
                    sMessage = mvParams.get(2).toString();
                }
                sAccBp = mvParams.get(0).toString();
            }
            else {
                sMessage = "No se encuentra la cuenta contable del asociado de negocio";
            }
        }
        else {
            sMessage = "No se encuentra el asociado de negocios";
        }

        return new String[] { sAccBp, sMessage };
    }

    private void renderRecord() {
        moPanelRecord.setRecordKey(moDsm.getDbmsRecordKey());
    }

    private java.lang.String renderSubsystemTitle(int[] subSys) {
        String sTitle = "?";

        if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP)) {
                sTitle = "Aplicación de pago";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_TRA)) {
                sTitle = "Traspaso de pago";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_CLO)) {
                sTitle = "Cierre de pago";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_OPE)) {
                sTitle = "Apertura de pago";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_APP)) {
                sTitle = "Aplicación de saldo";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_TRA)) {
                sTitle = "Traspaso de saldo";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_CLO)) {
                sTitle = "Cierre de saldo";
        }
        else if (SLibUtilities.compareKeys(subSys, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_OPE)) {
                sTitle = "Apertura de saldo";
        }

        return sTitle;
    }

    private void showAccount() {
        if (moEntriesPane.getSelectedTableRow() != null && moEntriesPane.getTableGuiRowCount() > 0) {
            jtfAccountSource.setText(((SDataDsmEntry)moEntriesPane.getSelectedTableRow().getData()).getDbmsSourceAccount());
            jtfAccountDestiny.setText(((SDataDsmEntry)moEntriesPane.getSelectedTableRow().getData()).getDbmsDestinyAccount());
        }
    }

    private sa.lib.srv.SSrvLock gainRecordUserLock(java.lang.Object pk, long timeout) {
        SSrvLock lock = null;

        try {
            lock = SSrvUtils.gainLock(miClient.getSession(), miClient.getSessionXXX().getCompany().getPkCompanyId(), SDataConstants.FIN_REC, pk, timeout);
        }
        catch (Exception e) {
            lock = null;
            miClient.showMsgBoxWarning("No fue posible obtener el acceso exclusivo al registro '" + jckRecordUser.getText() + "'.\n" + e);
        }

        return lock;
    }

    private void releaseRecordUserLock() {
        if (moRecordUserLock != null) {
            try {
                SSrvUtils.releaseLock(miClient.getSession(), moRecordUserLock);
                moRecordUserLock = null;
            }
            catch (Exception e) {
                miClient.showMsgBoxWarning("No fue posible liberar el acceso exclusivo del registro '" + jckRecordUser.getText() + "'.\n" + e);
            }
        }
    }

    private boolean readRecordUser(Object pk) {
        boolean error = true;
        SDataRecord record = null;
        SSrvLock lock = null;

        releaseRecordUserLock();
        moRecordUser = null;

        if (pk != null) {
            record = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, pk, SLibConstants.EXEC_MODE_VERBOSE);
            lock = gainRecordUserLock(pk, record.getRegistryTimeout());

            if (lock != null) {
                moRecordUser = record;
                moRecordUserLock = lock;
                error = false;
            }
        }

        return !error;
    }

    private void renderRecordUser() {
        if (moRecordUser == null) {
            jtfRecordDate.setText("");
            jtfRecordBranch.setText("");
            jtfRecordNumber.setText("");
            jbRecordView.setEnabled(false);
        }
        else {
            jtfRecordDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moRecordUser.getDate()));
            jtfRecordBranch.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moRecordUser.getFkCompanyBranchId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordNumber.setText(moRecordUser.getPkRecordTypeId() + "-" + moRecordUser.getPkNumberId());
            jbRecordView.setEnabled(jckRecordUser.isSelected());
        }
    }

    private void actionRecordSelect() {
        Object key = null;
        String message = "";

        moDialogRecordPicker.formReset();
        moDialogRecordPicker.setFilterKey(moFieldDate.getDate());
        moDialogRecordPicker.formRefreshOptionPane();
        moDialogRecordPicker.setSelectedPrimaryKey(moRecordUserKey);
        moDialogRecordPicker.setFormVisible(true);

        if (moDialogRecordPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            releaseRecordUserLock();
            key = moDialogRecordPicker.getSelectedPrimaryKey();

            if (readRecordUser(key)) {
                if (moRecordUser != null) {
                    if (moRecordUser.getIsSystem()) {
                        message = "No puede seleccionarse esta póliza contable porque es de sistema.";
                    }
                    else if (moRecordUser.getIsAudited()) {
                        message = "No puede seleccionarse esta póliza contable porque ya está auditada.";
                    }
                    else if (moRecordUser.getIsAuthorized()) {
                        message = "No puede seleccionarse esta póliza contable porque ya está autorizada.";
                    }

                    if (message.length() > 0) {
                        miClient.showMsgBoxWarning(message);
                    }
                    else {
                        moRecordUserKey = key;
                        renderRecordUser();
                    }
                }
            }
        }
    }

    private void actionRecordView() {
        miClient.getGuiModule(SDataConstants.MOD_FIN).showForm(SDataConstants.FINX_REC_RO, moRecordUserKey);
    }

    private void itemStateRecordUser() {
        boolean enabled = jckRecordUser.isSelected();

        jtfRecordDate.setEnabled(enabled);
        jtfRecordBranch.setEnabled(enabled);
        jtfRecordNumber.setEnabled(enabled);
        jbRecordSelect.setEnabled(enabled);
        jbRecordView.setEnabled(enabled && moRecordUserKey != null);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_FORM_CLOSE) == JOptionPane.YES_OPTION) {
            releaseRecordUserLock();
            mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
            setVisible(false);
        }
    }

    private void actionEntryNew(int[] subSys) {
        int index = 0;
        SFormDsmEntry formEntry = new SFormDsmEntry(miClient);
        SDataDsmEntry dataEntry = null;
        SDataDsmEntryRow dataEntryRow = null;

        formEntry.formReset();
        formEntry.setValue(1, new int[] { mnParamCategoryBp });
        formEntry.setValue(2, subSys);
        formEntry.setValue(3, moFieldDate.getDate());
        formEntry.formRefreshCatalogues();
        formEntry.formRefreshPanels();
        formEntry.setTitle(renderSubsystemTitle(subSys));
        formEntry.setVisible(true);
        if (formEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            dataEntry = (SDataDsmEntry) formEntry.getRegistry();

            moEntriesPane.addTableRow(dataEntryRow = new SDataDsmEntryRow(dataEntry));
            moEntriesPane.renderTableRows();
            index = moEntriesPane.getTableGuiRowCount() - 1;
            moEntriesPane.getTable().setRowSelectionInterval(index, index);
            moEntriesPane.getVerticalScrollBar().setValue((index + 1) * moEntriesPane.getTable().getRowHeight());
        }
    }

    private void actionEntryEdit() {
        int index = moEntriesPane.getTable().getSelectedRow();
        SFormDsmEntry formEntry = new SFormDsmEntry(miClient);
        SDataDsmEntry dataEntry = null;
        SDataDsmEntryRow dataEntryRow = null;

        if (index != -1) {
            dataEntry = (SDataDsmEntry) moEntriesPane.getTableRow(index).getData();

            formEntry.setValue(1, new int[] { mnParamCategoryBp });
            formEntry.setValue(2, new int[] { dataEntry.getFkAccountingMoveTypeId(), dataEntry.getFkAccountingMoveClassId(), dataEntry.getFkAccountingMoveSubclassId()  } );
            formEntry.formReset();
            formEntry.formRefreshCatalogues();
            formEntry.formRefreshPanels();
            formEntry.setTitle(renderSubsystemTitle(new int[] { dataEntry.getFkAccountingMoveTypeId(), dataEntry.getFkAccountingMoveClassId(), dataEntry.getFkAccountingMoveSubclassId()  } ));
            formEntry.setRegistry(dataEntry);
            formEntry.setVisible(true);
            if (formEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                dataEntry = (SDataDsmEntry) formEntry.getRegistry();

                moEntriesPane.setTableRow(dataEntryRow = new SDataDsmEntryRow(dataEntry), index);
                moEntriesPane.renderTableRows();
            }
        }
    }

    private void actionNotesNew() {
        int index = 0;
        SFormDsmNotes formDsmNotes = new SFormDsmNotes(miClient);
        SDataDsmNotes dataDsmNotes = null;
        SDataDsmNotesRow dataDsmNotesRow = null;

        formDsmNotes.formRefreshCatalogues();
        formDsmNotes.formReset();
        formDsmNotes.setVisible(true);
        if (formDsmNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            dataDsmNotes = (SDataDsmNotes) formDsmNotes.getRegistry();

            moNotesPane.addTableRow(dataDsmNotesRow = new SDataDsmNotesRow(dataDsmNotes));
            moNotesPane.renderTableRows();
            index = moNotesPane.getTableGuiRowCount() - 1;
            moNotesPane.getTable().setRowSelectionInterval(index, index);
            moNotesPane.getVerticalScrollBar().setValue((index + 1) * moNotesPane.getTable().getRowHeight());
        }
    }

    private void actionNotesEdit() {
        int index = moNotesPane.getTable().getSelectedRow();
        SFormDsmNotes formNotes = new SFormDsmNotes(miClient);
        SDataDsmNotes dataNotes = null;
        SDataDsmNotesRow dataNotesRow = null;

        formNotes.formRefreshCatalogues();
        formNotes.formReset();
        if (index != -1) {
            dataNotes = (SDataDsmNotes) moNotesPane.getTableRow(index).getData();
            formNotes.setRegistry(dataNotes);
            formNotes.setVisible(true);
            if (formNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                dataNotes = (SDataDsmNotes) formNotes.getRegistry();

                moNotesPane.setTableRow(dataNotesRow = new SDataDsmNotesRow(dataNotes), index);
                moNotesPane.renderTableRows();
            }
        }
    }

    private void actionNotesDelete() {
        int index = moNotesPane.getTable().getSelectedRow();

        if (index != -1) {
            if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                moNotesPane.removeTableRow(index);
                moNotesPane.renderTableRows();

                if (moNotesPane.getTableGuiRowCount() > 0) {
                    moNotesPane.setTableRowSelection(index < moNotesPane.getTableGuiRowCount() ? index : moNotesPane.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    public void publicActionNew() {
        if (jTabbedPane1.getSelectedIndex() == 0) {
            // XXX Validate called of subsystem
        }
        else if (jTabbedPane1.getSelectedIndex() == 1) {
            actionNotesNew();
        }
    }

    public void publicActionEdit() {
        if (jTabbedPane1.getSelectedIndex() == 0) {
            actionEntryEdit();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1) {
            actionNotesEdit();
        }
    }

    public void publicActionDelete() {
        if (jTabbedPane1.getSelectedIndex() == 0) {
            // XXX Validate called of subsystem
        }
        else if (jTabbedPane1.getSelectedIndex() == 1) {
            actionNotesDelete();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbFkCompanyBranchId;
    private javax.swing.JButton jbNotesDelete;
    private javax.swing.JButton jbNotesEdit;
    private javax.swing.JButton jbNotesNew;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbRecordSelect;
    private javax.swing.JButton jbRecordView;
    private javax.swing.JButton jbSubsysBalApp;
    private javax.swing.JButton jbSubsysBalClo;
    private javax.swing.JButton jbSubsysBalOpe;
    private javax.swing.JButton jbSubsysBalTra;
    private javax.swing.JButton jbSubsysPayApp;
    private javax.swing.JButton jbSubsysPayClo;
    private javax.swing.JButton jbSubsysPayOpe;
    private javax.swing.JButton jbSubsysPayTra;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCompanyBranchId;
    private javax.swing.JCheckBox jckIsAudited;
    private javax.swing.JCheckBox jckIsAuthorized;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsSystem;
    private javax.swing.JCheckBox jckRecordUser;
    private javax.swing.JLabel jlBizAccountDestiny;
    private javax.swing.JLabel jlBizAccountSource;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlFkCompanyBranchId;
    private javax.swing.JLabel jlFkSubsystemCategoryId;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpControlsButtons;
    private javax.swing.JPanel jpControlsRecord;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpLevel;
    private javax.swing.JPanel jpLevelAction;
    private javax.swing.JPanel jpNotes;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JPanel jpStartDate;
    private javax.swing.JTextField jtfAccountDestiny;
    private javax.swing.JTextField jtfAccountSource;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JFormattedTextField jtfDate;
    private javax.swing.JTextField jtfFkSubsystemCategoryId;
    private javax.swing.JTextField jtfRecordBranch;
    private javax.swing.JTextField jtfRecordDate;
    private javax.swing.JTextField jtfRecordNumber;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moDsm = new SDataDsm();

        moEntriesPane.createTable(this);
        moEntriesPane.clearTableRows();
        moNotesPane.createTable(null);
        moNotesPane.clearTableRows();
        jTabbedPane1.setSelectedIndex(0);

        moFieldDate.setFieldValue(miClient.getSessionXXX().getWorkingDate());

        renderRecord();

        moFieldFkCompanyBranchId.setKey(new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });

        jcbFkCompanyBranchId.setEnabled(true);
        jbFkCompanyBranchId.setEnabled(true);

        jtfAccountSource.setText("");
        jtfAccountDestiny.setText("");

        moRecordUserKey = null;
        moRecordUser = null;
        moRecordUserLock = null;

        renderRecordUser();
        renderRecord();

        jckRecordUser.setSelected(false);
        jckIsDeleted.setEnabled(false);

        itemStateRecordUser();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCompanyBranchId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (jckRecordUser.isSelected() && moRecordUserKey == null) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jckRecordUser.getText() + "'.");
                validation.setComponent(jbRecordSelect);
            }
            else if (jckRecordUser.isSelected()) {
                if (moRecordUser == null) {
                    validation.setMessage("No fue posible leer el registro '" + jckRecordUser.getText() + "'.");
                    validation.setComponent(jbRecordSelect);
                }
                else if (moRecordUserLock == null) {
                    validation.setMessage("No fue posible obtener el acceso exclusivo al registro '" + jckRecordUser.getText() + "'.");
                    validation.setComponent(jbRecordSelect);
                }
                else {
                    try {
                        SSrvUtils.verifyLockStatus(miClient.getSession(), moRecordUserLock);
                    }
                    catch (Exception e) {
                        validation.setMessage("No fue posible validar el acceso exclusivo al registro '" + jckRecordUser.getText() + "'.\n" + e);
                        validation.setComponent(jbRecordSelect);
                    }
                }
            }
        }

        if (!validation.getIsError()) {
            if (!SDataUtilities.isPeriodOpen(miClient, moFieldDate.getDate())) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_CLOSE);
                validation.setComponent(jtfDate);
            }
            else if (moDsm.getPkYearId() != SLibTimeUtilities.digestYear(moFieldDate.getDate())[0]) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_YEAR);
                validation.setComponent(jtfDate);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        Object o = null;
        String msAccBpPay = "";
        String msAccBpOp = "";
        SDataDsmEntryRow dataEntryRow = null;
        SDataDsmNotesRow dataNotesRow = null;
        SDataDps oDps = null;

        moDsm = (SDataDsm) registry;

        renderSubsystemCategory(moDsm.getFkSubsystemCategoryId());
        moFieldFkCompanyBranchId.setKey(new int[] { moDsm.getFkCompanyBranchId() });
        moFieldDate.setFieldValue(moDsm.getDate());
        moFieldConcept.setString(moDsm.getConcept());
        moFieldIsAudited.setBoolean(moDsm.getIsAudited());
        moFieldIsAuthorized.setBoolean(moDsm.getIsAuthorized());
        moFieldIsSystem.setBoolean(moDsm.getIsSystem());
        moFieldIsDeleted.setBoolean(moDsm.getIsDeleted());

        for (i = 0; i < moDsm.getDbmsEntry().size(); i++) {

            // Get account of Biz:

            o = renderTypeAccountBizPartner(moDsm.getDbmsEntry().get(i).getFkBizPartnerId(), SDataConstantsSys.FINS_TP_ACC_BP_PAY);
            if (((String []) o)[0].length() > 0) {
                msAccBpPay = ((String []) o)[0];
            }

            o = renderTypeAccountBizPartner(moDsm.getDbmsEntry().get(i).getFkBizPartnerId(), SDataConstantsSys.FINS_TP_ACC_BP_OP);
            if (((String []) o)[0].length() > 0) {
                msAccBpOp = ((String []) o)[0];
            }

            moDsm.getDbmsEntry().get(i).setDbmsAccountPay(msAccBpPay);
            moDsm.getDbmsEntry().get(i).setDbmsAccountOp(msAccBpOp);

            // Add category DPS:

            if (moDsm.getDbmsEntry().get(i).getFkSourceDpsYearId_n() > 0 && moDsm.getDbmsEntry().get(i).getFkSourceDpsDocId_n() > 0) {
                oDps = oDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, new int[] { moDsm.getDbmsEntry().get(i).getFkSourceDpsYearId_n(), moDsm.getDbmsEntry().get(i).getFkSourceDpsDocId_n() }, SLibConstants.EXEC_MODE_SILENT);

                if (oDps != null) {
                    moDsm.getDbmsEntry().get(i).setDbmsFkDpsCategoryId(oDps.getFkDpsCategoryId());
                }
            }

            if (moDsm.getDbmsEntry().get(i).getFkDestinyDpsYearId_n() > 0 && moDsm.getDbmsEntry().get(i).getFkDestinyDpsDocId_n() > 0) {
                oDps = oDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, new int[] { moDsm.getDbmsEntry().get(i).getFkDestinyDpsYearId_n(), moDsm.getDbmsEntry().get(i).getFkDestinyDpsDocId_n() }, SLibConstants.EXEC_MODE_SILENT);

                if (oDps != null) {
                    moDsm.getDbmsEntry().get(i).setDbmsFkDpsCategoryId(oDps.getFkDpsCategoryId());
                }
            }

            // Add type account system:

            switch (mnParamCategoryBp) {
                case SDataConstantsSys.BPSS_CT_BP_SUP:
                    moDsm.getDbmsEntry().get(i).setDbmsCtSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0]);
                    moDsm.getDbmsEntry().get(i).setDbmsTpSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1]);
                    break;
                case SDataConstantsSys.BPSS_CT_BP_DBR:
                    moDsm.getDbmsEntry().get(i).setDbmsCtSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[0]);
                    moDsm.getDbmsEntry().get(i).setDbmsTpSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[1]);
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CUS:
                    moDsm.getDbmsEntry().get(i).setDbmsCtSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0]);
                    moDsm.getDbmsEntry().get(i).setDbmsTpSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1]);
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CDR:
                    moDsm.getDbmsEntry().get(i).setDbmsCtSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[0]);
                    moDsm.getDbmsEntry().get(i).setDbmsTpSysMovId(SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[1]);
                    break;
            }

            dataEntryRow = new SDataDsmEntryRow(moDsm.getDbmsEntry().get(i));
            moEntriesPane.addTableRow(dataEntryRow);
        }

        if (!moDsm.getIsRecordAutomatic() && moDsm.getDbmsRecordKey() != null) {
            if (readRecordUser(moDsm.getDbmsRecordKey())) {
                moRecordUserKey = moDsm.getDbmsRecordKey();
            }
        }

        for (i = 0; i < moDsm.getDbmsNotes().size(); i++) {
            dataNotesRow = new SDataDsmNotesRow(moDsm.getDbmsNotes().get(i));
            moNotesPane.addTableRow(dataNotesRow);
        }

        renderRecord();
        renderRecordUser();
        itemStateRecordUser();
        jckRecordUser.setSelected(!moDsm.getIsRecordAutomatic()); // XXX

        jcbFkCompanyBranchId.setEnabled(false);
        jbFkCompanyBranchId.setEnabled(false);

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        int[] period = SLibTimeUtilities.digestYearMonth(moFieldDate.getDate());

        if (moDsm.getIsRegistryNew()) {
            moDsm.setPkYearId(period[0]);

            moDsm.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moDsm.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        if (moEntriesPane.getTableGuiRowCount() > 0) {
            moDsm.setDbmsPkPeriodId(period[1]);
            moDsm.setDbmsPkBookkeepingCenterId(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsHqBranch().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId());

            switch (mnParamCategoryBp) {
                case SDataConstantsSys.BPSS_CT_BP_SUP:
                    moDsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_SUP);
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CDR:
                    moDsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_CDR);
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CUS:
                    moDsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_CUS);
                    break;
                case SDataConstantsSys.BPSS_CT_BP_DBR:
                    moDsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_DBR);
                    break;
            }
        }

        moDsm.setDbmsErpTaxModel(miClient.getSessionXXX().getParamsErp().getTaxModel());
        moDsm.setFkSubsystemCategoryId(mnParamCategoryBp);
        moDsm.setFkCompanyBranchId(moFieldFkCompanyBranchId.getKeyAsIntArray()[0]);
        moDsm.setDate(moFieldDate.getDate());
        moDsm.setConcept(moFieldConcept.getString());
        moDsm.setIsAudited(moFieldIsAudited.getBoolean());
        moDsm.setIsAuthorized(moFieldIsAuthorized.getBoolean());
        moDsm.setIsSystem(moFieldIsSystem.getBoolean());
        moDsm.setIsDeleted(moFieldIsDeleted.getBoolean());

        moDsm.setDbmsSubsystemTypeBiz(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSS_CT_BP, new int[] { mnParamCategoryBp }, SLibConstants.DESCRIPTION_CODE));
        moDsm.setDbmsFkCompanyBranch(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsHqBranch().getPkBizPartnerBranchId());
        moDsm.setDbmsCompanyBranchCode(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, moFieldFkCompanyBranchId.getKey(), SLibConstants.DESCRIPTION_CODE));
        moDsm.setDbmsErpDecimalsValue(miClient.getSessionXXX().getParamsErp().getDecimalsValue());
        moDsm.setIsRecordAutomatic(!jckRecordUser.isSelected());

        moDsm.getDbmsEntry().removeAllElements();
        for (int i = 0; i < moEntriesPane.getTableGuiRowCount(); i++) {
            moDsm.getDbmsEntry().add((SDataDsmEntry) moEntriesPane.getTableRow(i).getData());
        }

        moDsm.getDbmsNotes().removeAllElements();
        for (int i = 0; i < moNotesPane.getTableGuiRowCount(); i++) {
            moDsm.getDbmsNotes().add((SDataDsmNotes) moNotesPane.getTableRow(i).getData());
        }

        // [DSM]: Set record user object:

        moDsm.getRegistryComplements().clear(); // XXX

        if (!jckRecordUser.isSelected()) {
            moDsm.setDbmsRecordKey(null);
        }
        else {
            moDsm.setDbmsRecordKey(moRecordUserKey);
            moDsm.getRegistryComplements().add(moRecordUserLock);
        }

        return moDsm;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnParamCategoryBp = (Integer) value;
                renderSubsystemCategory(mnParamCategoryBp);
                break;
            default:
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbSubsysPayApp) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP);
            }
            else if (button == jbSubsysPayTra) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_TRA);
            }
            else if (button == jbSubsysPayClo) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_CLO);
            }
            else if (button == jbSubsysPayOpe) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_OPE);
            }
            else if (button == jbSubsysBalApp) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_APP);
            }
            else if (button == jbSubsysBalTra) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_TRA);
            }
            else if (button == jbSubsysBalClo) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_CLO);
            }
            else if (button == jbSubsysBalOpe) {
                actionEntryNew(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_BAL_OPE);
            }
            else if (button == jbNotesNew) {
                actionNotesNew();
            }
            else if (button == jbNotesEdit) {
                actionNotesEdit();
            }
            else if (button == jbNotesDelete) {
                actionNotesDelete();
            }
            else if (button == jbDate) {
                actionDate();
            }
            else if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkCompanyBranchId) {
                actionFkCobId();
            }
            else if (button == jbRecordSelect) {
                actionRecordSelect();
            }
            else if (button == jbRecordView) {
                actionRecordView();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            showAccount();
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbResetingForm) {
            if (e.getSource() instanceof javax.swing.JCheckBox) {
                JCheckBox checkBox = (JCheckBox) e.getSource();

                if (checkBox == jckRecordUser) {
                    itemStateRecordUser();
                }
            }
            else if (e.getSource() instanceof javax.swing.JComboBox) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    JComboBox comboBox = (JComboBox) e.getSource();

                }
            }
        }
    }
}
