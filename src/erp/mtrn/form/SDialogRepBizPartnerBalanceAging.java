/*
 * DFormCompany.java
 *
 * Created on 19 de agosto de 2008, 11:10 AM
 */

package erp.mtrn.form;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormValidation;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.mfin.data.SDataAccountCash;
import erp.SClient;

import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.save.JRPdfSaveContributor.*;
import net.sf.jasperreports.view.JRViewer.*;
import net.sf.jasperreports.view.save.JRMultipleSheetsXlsSaveContributor.*;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author  Néstor Ávalos
 */
public class SDialogRepBizPartnerBalanceAging extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldFkCobId;
    private erp.lib.form.SFormField moFieldFkBpId;
    private erp.lib.form.SFormField moFieldDateCut;

    private int[] mnParamTpSysMovId;

    /** Creates new form DFormCompany */
    public SDialogRepBizPartnerBalanceAging(erp.client.SClientInterface client, java.lang.Object oType) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();

        formRefreshCatalogues();
        formReset();
        setValue(1, oType);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jpReg = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateCut = new javax.swing.JLabel();
        jPanel38 = new javax.swing.JPanel();
        jtfDateCut = new javax.swing.JFormattedTextField();
        jpStartDate = new javax.swing.JPanel();
        jbDateCut = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlFkCobId = new javax.swing.JLabel();
        jcbFkCobId = new javax.swing.JComboBox();
        jbFkCobId = new javax.swing.JButton();
        jPanel98 = new javax.swing.JPanel();
        jlFkEntityId = new javax.swing.JLabel();
        jcbFkBpId = new javax.swing.JComboBox();
        jbFkEntityId = new javax.swing.JButton();
        jPanel99 = new javax.swing.JPanel();
        jlDateBase = new javax.swing.JLabel();
        jrbDateDoc = new javax.swing.JRadioButton();
        jrbDateCred = new javax.swing.JRadioButton();
        jPanel100 = new javax.swing.JPanel();
        jlSort = new javax.swing.JLabel();
        jrbSortDate = new javax.swing.JRadioButton();
        jrbSortDoc = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de antigüedad de saldos de "); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setLayout(new java.awt.BorderLayout());

        jpReg.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jpReg.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel8.setLayout(new java.awt.GridLayout(1, 1, 5, 2));

        jPanel4.setLayout(new java.awt.BorderLayout(0, 2));

        jlDateCut.setText("Fecha de corte: *");
        jlDateCut.setPreferredSize(new java.awt.Dimension(125, 14));
        jPanel4.add(jlDateCut, java.awt.BorderLayout.WEST);

        jPanel38.setLayout(new java.awt.BorderLayout(2, 0));

        jtfDateCut.setText("dd/mm/yyyy");
        jtfDateCut.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel38.add(jtfDateCut, java.awt.BorderLayout.WEST);

        jpStartDate.setLayout(new java.awt.BorderLayout(2, 0));

        jbDateCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateCut.setToolTipText("Seleccionar fecha de corte");
        jbDateCut.setFocusable(false);
        jbDateCut.setPreferredSize(new java.awt.Dimension(23, 23));
        jpStartDate.add(jbDateCut, java.awt.BorderLayout.WEST);

        jPanel38.add(jpStartDate, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel4);

        jpReg.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro:"));
        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 2));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkCobId.setText("Sucursal de la empresa:");
        jlFkCobId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel15.add(jlFkCobId);

        jcbFkCobId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Seleccionar sucursal)" }));
        jcbFkCobId.setPreferredSize(new java.awt.Dimension(315, 23));
        jPanel15.add(jcbFkCobId);

        jbFkCobId.setText("...");
        jbFkCobId.setToolTipText("Seleccionar sucursal");
        jbFkCobId.setFocusable(false);
        jbFkCobId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbFkCobId);

        jPanel7.add(jPanel15);

        jPanel98.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkEntityId.setText("[Asoc. de neg.:]");
        jlFkEntityId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel98.add(jlFkEntityId);

        jcbFkBpId.setPreferredSize(new java.awt.Dimension(315, 23));
        jPanel98.add(jcbFkBpId);

        jbFkEntityId.setText("...");
        jbFkEntityId.setToolTipText("Seleccionar proveedor");
        jbFkEntityId.setFocusable(false);
        jbFkEntityId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel98.add(jbFkEntityId);

        jPanel7.add(jPanel98);

        jPanel99.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateBase.setText("Fecha:");
        jlDateBase.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel99.add(jlDateBase);

        buttonGroup1.add(jrbDateDoc);
        jrbDateDoc.setSelected(true);
        jrbDateDoc.setText("Vencimiento");
        jPanel99.add(jrbDateDoc);

        buttonGroup1.add(jrbDateCred);
        jrbDateCred.setText("Base crédito");
        jPanel99.add(jrbDateCred);

        jPanel7.add(jPanel99);

        jPanel100.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlSort.setText("Ordenar por:");
        jlSort.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel100.add(jlSort);

        buttonGroup2.add(jrbSortDate);
        jrbSortDate.setSelected(true);
        jrbSortDate.setText("Fecha venc./base crédito");
        jPanel100.add(jrbSortDate);

        buttonGroup2.add(jrbSortDoc);
        jrbSortDoc.setText("Folio doc.");
        jPanel100.add(jrbSortDoc);

        jPanel7.add(jPanel100);

        jpReg.add(jPanel7, java.awt.BorderLayout.CENTER);

        jpData.add(jpReg, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpData.add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbPrint);

        jbCancel.setText("Cerrar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-508)/2, (screenSize.height-308)/2, 508, 308);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkBpId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkBpId, jlFkEntityId);
        moFieldFkBpId.setPickerButton(jbFkEntityId);
        moFieldFkCobId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkCobId, jlFkCobId);
        moFieldFkCobId.setPickerButton(jbFkCobId);
        moFieldDateCut = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDateCut, jlDateCut);
        moFieldDateCut.setPickerButton(jbDateCut);

        mvFields.add(moFieldFkBpId);
        mvFields.add(moFieldFkCobId);
        mvFields.add(moFieldDateCut);

        jbCancel.addActionListener(this);
        jbDateCut.addActionListener(this);
        jbFkEntityId.addActionListener(this);
        jbFkCobId.addActionListener(this);
        jbPrint.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionRenderReport(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfDateCut.requestFocus();
        }
    }

    private void actionFkEntityId() {
        if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS)) {
            miClient.pickOption(SDataConstants.BPSX_BP_CUS, moFieldFkBpId, moFieldFkBpId.getKey());
        }
        else {
            miClient.pickOption(SDataConstants.BPSX_BP_SUP, moFieldFkBpId, moFieldFkBpId.getKey());
        }
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCobId, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    private void actionDateCut() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateCut.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateCut.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateCut.requestFocus();
        }
    }

    private void actionRenderReport() {
        String sBp = "";
        String sCob = "";
        String sReportTitle = "ANTIGÜEDAD DE SALDOS DE " + (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS) ? "CLIENTES" : "PROVEEDORES");
        String sSqlCob = "";
        String sSqlFkBpId = "";
        String sSqlOrderBy = "";

        SFormValidation validation = new SFormValidation();

        validation = formValidate();

        if (!validation.getIsError()) {

            // By company branch (cob) or to all companies branches:

            if (jcbFkCobId.getSelectedIndex() > 0) {
                sSqlCob = " AND d.fid_cob = " + moFieldFkCobId.getKeyAsIntArray()[0] + " ";
                sCob = jcbFkCobId.getSelectedItem().toString();
            }
            else {
                sCob = "(TODAS)";
            }

            // By Bp or to all Bps:

            if (jcbFkBpId.getSelectedIndex() > 0) {
                sSqlFkBpId = " AND re.fid_bp_nr = " + moFieldFkBpId.getKeyAsIntArray()[0] + " ";
                sBp = jcbFkBpId.getSelectedItem().toString();
            }
            else {
                sBp = "(TODOS)";
            }

            // Query order by:

            if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS)) {
                if (miClient.getSessionXXX().getParamsErp().getFkSortingCustomerTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                    sSqlOrderBy = "ct.bp_key, bp.bp_comm, bp.bp, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r DESC ";
                }
                else if (miClient.getSessionXXX().getParamsErp().getFkSortingCustomerTypeId() == SDataConstantsSys.CFGS_TP_SORT_NAME_KEY) {
                    sSqlOrderBy = "bp.bp, ct.bp_key, bp.bp_comm, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r DESC ";
                }
                else {
                    sSqlOrderBy = "bp.bp_comm, ct.bp_key, bp.bp, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r DESC ";
                }
            }
            else {
                if (miClient.getSessionXXX().getParamsErp().getFkSortingSupplierTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                    sSqlOrderBy = "ct.bp_key, bp.bp_comm, bp.bp, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r ASC ";
                }
                else if (miClient.getSessionXXX().getParamsErp().getFkSortingSupplierTypeId() == SDataConstantsSys.CFGS_TP_SORT_NAME_KEY) {
                    sSqlOrderBy = "bp.bp, ct.bp_key, bp.bp_comm, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r ASC ";
                }
                else {
                    sSqlOrderBy = "bp.bp_comm, ct.bp_key, bp.bp, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r ASC ";
                }
            }

            printReport(sReportTitle, sSqlCob, sSqlFkBpId,  sCob, sBp, sSqlOrderBy);
        }
        else {
            miClient.showMsgBoxWarning(validation.getMessage());
            validation.getComponent().requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void printReport(java.lang.String sReportTitle, java.lang.String sSqlCob, java.lang.String sSqlFkBpId, java.lang.String sCob, java.lang.String sBp, java.lang.String sSqlOrderBy) {
        Cursor oCursor = getCursor();
        JasperPrint oPrint = null;
        JasperViewer oViewer = null;
        Map<String, Object> oMap = null;

        try {

            // Report params:

            oMap = miClient.createReportParams();
            oMap.put("sReportTitle", sReportTitle);
            oMap.put("sCob", sCob);
            oMap.put("sBp", sBp);
            oMap.put("sCurrency", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency());
            oMap.put("nFkCtBpId", SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS) ? SDataConstantsSys.BPSS_CT_BP_CUS : SDataConstantsSys.BPSS_CT_BP_SUP);
            oMap.put("nFkCtSysMovSupId", SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0]);
            oMap.put("nFkTpSysMovSupId", SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1]);
            oMap.put("nFkCtSysMovId", mnParamTpSysMovId[0]);
            oMap.put("nFkTpSysMovId", mnParamTpSysMovId[1]);
            oMap.put("nFkYearId", SLibTimeUtilities.digestYear(moFieldDateCut.getDate())[0]);
            oMap.put("tDateCut", moFieldDateCut.getDate());
            oMap.put("nDateEval", (jrbDateDoc.isSelected() ? 1 : 0)); // 1: Due's date, 0: Credit's date.
            oMap.put("nSort", (jrbSortDate.isSelected() ? 1 : 0)); // 1: Sort by date, 0: Sort by num doc.
            oMap.put("sSqlFkBpId", sSqlFkBpId);
            oMap.put("sSqlCob", sSqlCob);
            oMap.put("sSqlOrderBy", sSqlOrderBy);
            oMap.put("nTP_ACC", SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS) ? SDataConstantsSys.FINS_CL_ACC_LIABTY[0] : SDataConstantsSys.FINS_CL_ACC_ASSET[0]);
            oMap.put("nCL_ACC", SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS) ? SDataConstantsSys.FINS_CL_ACC_LIABTY[1] : SDataConstantsSys.FINS_CL_ACC_ASSET[1]);
            oMap.put("nFkBpCtSupId", SDataConstantsSys.BPSS_CT_BP_SUP);
            oMap.put("nRange1", 15);
            oMap.put("nRange2", 30);
            oMap.put("nRange3", 45);
            oMap.put("nRange4", 60);
            oMap.put("nRange5", 90);
            oMap.put("nRange6", 180);
            oMap.put("nRange7", 360);

            oPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_TRN_BAL_AGI, oMap);
            oViewer = new JasperViewer(oPrint, false);
            oViewer.setTitle("Reporte de " + sReportTitle.toLowerCase());
            oViewer.setVisible(true);
        }
        catch(Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(oCursor);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel100;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel98;
    private javax.swing.JPanel jPanel99;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateCut;
    private javax.swing.JButton jbFkCobId;
    private javax.swing.JButton jbFkEntityId;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox jcbFkBpId;
    private javax.swing.JComboBox jcbFkCobId;
    private javax.swing.JLabel jlDateBase;
    private javax.swing.JLabel jlDateCut;
    private javax.swing.JLabel jlFkCobId;
    private javax.swing.JLabel jlFkEntityId;
    private javax.swing.JLabel jlSort;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpReg;
    private javax.swing.JPanel jpStartDate;
    private javax.swing.JRadioButton jrbDateCred;
    private javax.swing.JRadioButton jrbDateDoc;
    private javax.swing.JRadioButton jrbSortDate;
    private javax.swing.JRadioButton jrbSortDoc;
    private javax.swing.JFormattedTextField jtfDateCut;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateCut.setDate(miClient.getSessionXXX().getWorkingDate());
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCobId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {

    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {

        return null;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnParamTpSysMovId = (int []) value;

                if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS)) {
                    jlFkEntityId.setText("Cliente:");
                    this.setTitle(this.getTitle() + "clientes ");
                    jbFkEntityId.setToolTipText("Seleccionar cliente");
                    SFormUtilities.populateComboBox(miClient, jcbFkBpId, SDataConstants.BPSX_BP_CUS);
                }
                else {
                    jlFkEntityId.setText("Proveedor:");
                    this.setTitle(this.getTitle() + "proveedores ");
                    jbFkEntityId.setToolTipText("Seleccionar proveedor");
                    SFormUtilities.populateComboBox(miClient, jcbFkBpId, SDataConstants.BPSX_BP_SUP);
                }

                if (miClient.getSessionXXX().getCurrentCompanyBranch() != null) {
                    moFieldFkCobId.setKey(miClient.getSessionXXX().getCurrentCompanyBranch().getPrimaryKey());
                }

                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDateCut) {
                actionDateCut();
            }
            else if (button == jbPrint) {
                actionRenderReport();
            }
            else if (button == jbFkEntityId) {
                actionFkEntityId();
            }
            else if (button == jbFkCobId) {
                actionFkCobId();
            }
        }
    }
}
