/*
 * SFormOrdPeriod.java
 *
 * Created on 29 de septiembre de 2009, 14:08
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mmfg.data.SDataManufacturingLineConfigItem;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormManufacturingLineConfigItem extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataManufacturingLineConfigItem moManufacturingLineConfigItem;
    private erp.lib.form.SFormField moFieldPkLinkTypeId;
    private erp.lib.form.SFormField moFieldPkReferenceId;
    private erp.lib.form.SFormField moFieldPkManufacturingLineId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.form.SFormComboBoxGroup moComboBoxLinkTypeRef;

    /** Creates new form */
    public SFormManufacturingLineConfigItem(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SLibConstants.UNDEFINED;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPkLinkTypeId = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jcbPkLinkTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel7 = new javax.swing.JPanel();
        jlPkReferenceId = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jcbPkReferenceId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkReferenceId = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlPkManufacturingLineId = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jcbPkManufacturingLineId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel9 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuración de línea de producción"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(150, 80));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(4, 1, 5, 5));

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jlPkLinkTypeId.setForeground(java.awt.Color.blue);
        jlPkLinkTypeId.setText("Tipo de referencia: *"); // NOI18N
        jlPkLinkTypeId.setPreferredSize(new java.awt.Dimension(110, 14));
        jPanel6.add(jlPkLinkTypeId, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.BorderLayout(1, 0));

        jcbPkLinkTypeId.setPreferredSize(new java.awt.Dimension(200, 20));
        jcbPkLinkTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkLinkTypeIdItemStateChanged(evt);
            }
        });
        jPanel1.add(jcbPkLinkTypeId, java.awt.BorderLayout.WEST);

        jPanel6.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 5));

        jlPkReferenceId.setForeground(java.awt.Color.blue);
        jlPkReferenceId.setText("Referencia: *"); // NOI18N
        jlPkReferenceId.setPreferredSize(new java.awt.Dimension(110, 14));
        jPanel7.add(jlPkReferenceId, java.awt.BorderLayout.WEST);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel4.add(jcbPkReferenceId, java.awt.BorderLayout.CENTER);

        jbPkReferenceId.setText("...");
        jbPkReferenceId.setToolTipText("Seleccionar referencia");
        jbPkReferenceId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPkReferenceId, java.awt.BorderLayout.EAST);

        jPanel7.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel7);

        jPanel8.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel11.setLayout(new java.awt.BorderLayout(5, 5));

        jlPkManufacturingLineId.setForeground(java.awt.Color.blue);
        jlPkManufacturingLineId.setText("Línea de producción: *"); // NOI18N
        jlPkManufacturingLineId.setPreferredSize(new java.awt.Dimension(110, 14));
        jPanel11.add(jlPkManufacturingLineId, java.awt.BorderLayout.WEST);

        jPanel12.setLayout(new java.awt.BorderLayout(1, 0));

        jcbPkManufacturingLineId.setPreferredSize(new java.awt.Dimension(200, 20));
        jcbPkManufacturingLineId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkManufacturingLineIdItemStateChanged(evt);
            }
        });
        jPanel12.add(jcbPkManufacturingLineId, java.awt.BorderLayout.WEST);

        jPanel11.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel8);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 5));

        jckIsDeleted.setText("Registro eliminado");
        jPanel9.add(jckIsDeleted, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel9);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(2));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-576)/2, (screenSize.height-388)/2, 576, 388);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkLinkTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkLinkTypeIdItemStateChanged
        itemStateChangedFkLinkTypeId();
    }//GEN-LAST:event_jcbPkLinkTypeIdItemStateChanged

    private void jcbPkManufacturingLineIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkManufacturingLineIdItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbPkManufacturingLineIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moComboBoxLinkTypeRef = new SFormComboBoxGroup(miClient);

        moFieldPkLinkTypeId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkLinkTypeId, jlPkLinkTypeId);
        moFieldPkReferenceId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkReferenceId, jlPkReferenceId);
        moFieldPkManufacturingLineId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkManufacturingLineId, jlPkManufacturingLineId);
        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkLinkTypeId);
        mvFields.add(moFieldPkReferenceId);
        mvFields.add(moFieldPkManufacturingLineId);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkReferenceId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkLinkTypeId.isEnabled()) jcbPkLinkTypeId.requestFocus(); else jckIsDeleted.requestFocus();
        }
    }

    private void itemStateChangedFkLinkTypeId() {
        if (jcbPkLinkTypeId.getSelectedIndex() > 0) {

            if (jcbPkReferenceId.getSelectedIndex() <= 0) {
                loadReference();
            }
        } else {
            jcbPkReferenceId.setEnabled(false);
            jbPkReferenceId.setEnabled(false);
        }
    }

    private void actionFkReferenceId() {
        int nTypeLink = 0;
        int[] anFilterItem = null;

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                nTypeLink = SDataConstants.UNDEFINED;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                nTypeLink = SDataConstants.ITMS_CT_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                nTypeLink = SDataConstants.ITMS_CL_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                nTypeLink = SDataConstants.ITMS_TP_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                nTypeLink = SDataConstants.ITMU_IFAM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                nTypeLink = SDataConstants.ITMU_IGRP;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                nTypeLink = SDataConstants.ITMU_IGEN;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                nTypeLink = SDataConstants.ITMU_LINE;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                nTypeLink = SDataConstants.ITMU_BRD;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                nTypeLink = SDataConstants.ITMU_MFR;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                nTypeLink = SDataConstants.ITMX_ITEM_IOG;
                anFilterItem = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                break;
        }
        miClient.pickOption(nTypeLink, moFieldPkReferenceId, anFilterItem);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void loadReference() {
        jcbPkReferenceId.setEnabled(true);
        jbPkReferenceId.setEnabled(true);

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CT_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CL_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_TP_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IFAM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGRP);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGEN);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_LINE);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_BRD);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_MFR);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_ITEM);
                break;
            default:
                jcbPkReferenceId.setEnabled(false);
                jbPkReferenceId.setEnabled(false);
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkReferenceId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkLinkTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkManufacturingLineId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkReferenceId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlPkLinkTypeId;
    private javax.swing.JLabel jlPkManufacturingLineId;
    private javax.swing.JLabel jlPkReferenceId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moManufacturingLineConfigItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moComboBoxLinkTypeRef.reset();

        jcbPkLinkTypeId.setEnabled(true);
        jcbPkLinkTypeId.setFocusable(true);

        jcbPkReferenceId.setEnabled(false);
        jcbPkReferenceId.setFocusable(false);

        jbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setFocusable(false);

        jcbPkManufacturingLineId.setEnabled(true);
        jcbPkManufacturingLineId.setFocusable(true);

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        //moComboBoxLinkTypeRef.clear();
        //moComboBoxLinkTypeRef.addComboBox(SDataConstants.TRNS_TP_LINK, jcbFkLinkTypeId, jbFkLinkTypeId);
        //moComboBoxLinkTypeRef.addComboBox(SDataConstants.ITMS_CT_ITEM, jcbFkReferenceId, jbFkReferenceId);

        SFormUtilities.populateComboBox(miClient, jcbPkLinkTypeId, SDataConstants.TRNS_TP_LINK);
        SFormUtilities.populateComboBox(miClient, jcbPkManufacturingLineId, SDataConstants.MFGU_LINE);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i = 0;
        erp.lib.form.SFormValidation validation = new SFormValidation();

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        /*
        if (!validation.getIsError()) {
             if (mnFormType == SDataConstants.MFG_LT_CO) {
                if (moManufacturingLineConfigItem == null) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_LTIME_LINK_CO_VAL,
                            new Object[] { mnPkSupplierId, moFieldPkLinkTypeId.getKeyAsIntArray()[0],
                            moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? moFieldPkReferenceId.getKeyAsIntArray()[0] : SDataConstants.UNDEFINED },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("El registro ya existe");
                        validation.setComponent(jcbPkLinkTypeId);
                    }
                    else {
                        for (i = 0; i < mvLeadtimeCoType.size(); i++) {
                            leadtimeCo = mvLeadtimeCoType.get(i);

                            if (leadtimeCo.getFkLinkTypeId() == moFieldPkLinkTypeId.getKeyAsIntArray()[0] &&
                                    leadtimeCo.getFkReferenceId() == moFieldPkReferenceId.getKeyAsIntArray()[0]) {
                                validation.setMessage("El registro ya existe");
                                validation.setComponent(jcbPkLinkTypeId);
                            }
                        }
                    }
                }
             } else if (mnFormType == SDataConstants.MFG_LT_COB) {
                if (moLinkTypeCob == null) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_LTIME_LINK_COB_VAL,
                            new Object[] { mnPkCobId, mnPkSupplierId, moFieldPkLinkTypeId.getKeyAsIntArray()[0],
                            moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? moFieldPkReferenceId.getKeyAsIntArray()[0] : SDataConstants.UNDEFINED },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("El registro ya existe");
                        validation.setComponent(jcbPkLinkTypeId);
                    }
                    else {
                        for (i = 0; i < mvLeadtimeCobType.size(); i++) {
                            leadtimeCob = mvLeadtimeCobType.get(i);

                            if (leadtimeCob.getFkLinkTypeId() == moFieldPkLinkTypeId.getKeyAsIntArray()[0] &&
                                    leadtimeCob.getFkReferenceId() == moFieldPkReferenceId.getKeyAsIntArray()[0]) {
                                validation.setMessage("El registro ya existe");
                                validation.setComponent(jcbPkLinkTypeId);
                            }
                        }
                    }
                }
            }
        }
        */

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moManufacturingLineConfigItem = (SDataManufacturingLineConfigItem) registry;

        moFieldPkLinkTypeId.setKey(new int[] { moManufacturingLineConfigItem.getPkLinkTypeId() });
        loadReference();

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                SFormUtilities.locateComboBoxItemByComplement(jcbPkReferenceId, moManufacturingLineConfigItem.getPkReferenceId());
                break;
            default:
                moFieldPkReferenceId.setFieldValue(new int[] { moManufacturingLineConfigItem.getPkReferenceId() });
        }

        moFieldPkManufacturingLineId.setFieldValue(new int[] { moManufacturingLineConfigItem.getPkMfgLineId() });
        moFieldIsDeleted.setFieldValue(moManufacturingLineConfigItem.getIsDeleted());

        jcbPkLinkTypeId.setEnabled(false);
        jcbPkLinkTypeId.setFocusable(false);

        jcbPkReferenceId.setEnabled(false);
        jcbPkReferenceId.setFocusable(false);

        jbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setFocusable(false);

        jcbPkManufacturingLineId.setEnabled(false);
        jcbPkManufacturingLineId.setFocusable(false);

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {

        if (moManufacturingLineConfigItem == null) {
            moManufacturingLineConfigItem = new SDataManufacturingLineConfigItem();

            moManufacturingLineConfigItem.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);
            moManufacturingLineConfigItem.setPkReferenceId(moFieldPkReferenceId.getKeyAsIntArray()[0]);
            moManufacturingLineConfigItem.setPkMfgLineId(moFieldPkManufacturingLineId.getKeyAsIntArray()[0]);

            moManufacturingLineConfigItem.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        } else {
            moManufacturingLineConfigItem.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

            if (moFieldIsDeleted.getBoolean()) {
                moManufacturingLineConfigItem.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                moManufacturingLineConfigItem.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
            }
        }

        moManufacturingLineConfigItem.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moManufacturingLineConfigItem;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkReferenceId) {
                actionFkReferenceId();
            }
        }
    }
}
