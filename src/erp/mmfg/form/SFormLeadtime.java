/*
 *
 *
 * Created on 18 de agosto de 2009, 01:42 AM
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mmfg.data.SDataLeadtimeCo;
import erp.mmfg.data.SDataLeadtimeCob;
import erp.mmfg.data.SDataLeadtimeRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormLeadtime extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataLeadtimeCo moLeadtimeCo;
    private erp.mmfg.data.SDataLeadtimeCob moLeadtimeCob;
    private erp.lib.form.SFormField moFieldPkCobId;
    private erp.lib.form.SFormField moFieldPkSupplierId;

    private erp.lib.table.STablePane moLeadtimeType;

    /** Creates new form DFormCompany */
    public SFormLeadtime(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_SUP_LT_CO;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpHead = new javax.swing.JPanel();
        jpHead1 = new javax.swing.JPanel();
        jpData = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPkCobId = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jcbPkCobId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel5 = new javax.swing.JPanel();
        jbPkCobId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlPkSupplierId = new javax.swing.JLabel();
        jpRowMaterial = new javax.swing.JPanel();
        jcbPkSupplierId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel6 = new javax.swing.JPanel();
        jbPkSupplierId = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jpType = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbTypeNew = new javax.swing.JButton();
        jbTypeEdit = new javax.swing.JButton();
        jbTypeDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Leadtime"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        jpHead.setLayout(new java.awt.BorderLayout(5, 5));

        jpHead1.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jpData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpData.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        jPanel3.setLayout(new java.awt.BorderLayout(5, 5));

        jlPkCobId.setForeground(java.awt.Color.blue);
        jlPkCobId.setText("Sucursal: *");
        jlPkCobId.setPreferredSize(new java.awt.Dimension(80, 14));
        jPanel3.add(jlPkCobId, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));

        jcbPkCobId.setPreferredSize(new java.awt.Dimension(300, 20));
        jPanel1.add(jcbPkCobId, java.awt.BorderLayout.WEST);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jbPkCobId.setText("...");
        jbPkCobId.setToolTipText("Seleccionar sucursal");
        jbPkCobId.setFocusable(false);
        jbPkCobId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPkCobId, java.awt.BorderLayout.WEST);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        jpData.add(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jlPkSupplierId.setForeground(java.awt.Color.blue);
        jlPkSupplierId.setText("Proveedor: *");
        jlPkSupplierId.setPreferredSize(new java.awt.Dimension(80, 14));
        jPanel4.add(jlPkSupplierId, java.awt.BorderLayout.WEST);

        jpRowMaterial.setLayout(new java.awt.BorderLayout(5, 5));

        jcbPkSupplierId.setPreferredSize(new java.awt.Dimension(300, 20));
        jpRowMaterial.add(jcbPkSupplierId, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jbPkSupplierId.setText("...");
        jbPkSupplierId.setToolTipText("Seleccionar proveedor");
        jbPkSupplierId.setFocusable(false);
        jbPkSupplierId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbPkSupplierId, java.awt.BorderLayout.WEST);

        jpRowMaterial.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel4.add(jpRowMaterial, java.awt.BorderLayout.CENTER);

        jpData.add(jPanel4);

        jpHead1.add(jpData);

        jpHead.add(jpHead1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpHead, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jpType.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipos de referencia:"));
        jpType.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(771, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbTypeNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbTypeNew.setToolTipText("Crear");
        jbTypeNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbTypeNew);

        jbTypeEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbTypeEdit.setToolTipText("Modificar");
        jbTypeEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbTypeEdit);

        jbTypeDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbTypeDelete.setToolTipText("Eliminar");
        jbTypeDelete.setEnabled(false);
        jbTypeDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbTypeDelete);

        jpType.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpType, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-618)/2, (screenSize.height-417)/2, 618, 417);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm tableColumnsType[];

        mvFields = new Vector<SFormField>();
        moLeadtimeType = new STablePane(miClient);
        moLeadtimeType.setDoubleClickAction(this, "publicActionTypeEdit");
        jpType.add(moLeadtimeType, BorderLayout.CENTER);

        moFieldPkCobId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCobId, jlPkCobId);
        moFieldPkSupplierId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkSupplierId, jlPkSupplierId);

        mvFields.add(moFieldPkCobId);
        mvFields.add(moFieldPkSupplierId);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbTypeNew.addActionListener(this);
        jbTypeEdit.addActionListener(this);
        jbPkCobId.addActionListener(this);
        jbPkSupplierId.addActionListener(this);

        i = 0;
        tableColumnsType = new STableColumnForm[10];
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo", 100);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Referencia", 300);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Leadtime (días)", 100);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < tableColumnsType.length; i++) {
            moLeadtimeType.addTableColumn(tableColumnsType[i]);
        }
        moLeadtimeType.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkCobId.isEnabled()) jcbPkCobId.requestFocus();
        }
    }

    private void actionPkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldPkCobId, null);
    }

    private void actionPkSupplierId() {
        miClient.pickOption(SDataConstants.BPSX_BP_SUP, moFieldPkSupplierId, null);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionLtimeTypeNew() {
        int index = 0;
        SFormLeadtimeLink formLtimeLink = new erp.mmfg.form.SFormLeadtimeLink(miClient);
        SDataLeadtimeCo  dataLinkCo = null;
        SDataLeadtimeCob dataLinkCob = null;
        SDataLeadtimeRow dataLinkRow = null;

        if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
            if (jcbPkCobId.getSelectedIndex() <= 0) {
                miClient.showMsgBoxWarning("Se debe seleccionar una opción para el campo 'Sucursal: *'.");
                jcbPkCobId.requestFocus();
                return ;
            }
        }

        if (jcbPkSupplierId.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning("Se debe seleccionar una opción para el campo 'Proveedor: *'.");
            jcbPkSupplierId.requestFocus();
            return ;
        }

        formLtimeLink.formReset();
        formLtimeLink.formRefreshCatalogues();

        if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
            for (int i = 0; i < moLeadtimeType.getTableGuiRowCount(); i++) {
                dataLinkCo = ((SDataLeadtimeCo) moLeadtimeType.getTableRow(i).getData());
                formLtimeLink.setValue(4, dataLinkCo);
            }
        } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
            formLtimeLink.setValue(1, moFieldPkCobId.getKeyAsIntArray()[0]);

            for (int i = 0; i < moLeadtimeType.getTableGuiRowCount(); i++) {
                dataLinkCob = ((SDataLeadtimeCob) moLeadtimeType.getTableRow(i).getData());
                formLtimeLink.setValue(5, dataLinkCob);
            }
        }

        formLtimeLink.setValue(2, moFieldPkSupplierId.getKeyAsIntArray()[0]);
        formLtimeLink.setValue(3, mnFormType);
        formLtimeLink.setVisible(true);
        if (formLtimeLink.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
                dataLinkCo = (SDataLeadtimeCo) formLtimeLink.getRegistry();

                moLeadtimeType.addTableRow(dataLinkRow = new SDataLeadtimeRow(dataLinkCo, mnFormType));
            } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
                dataLinkCob = (SDataLeadtimeCob) formLtimeLink.getRegistry();

                moLeadtimeType.addTableRow(dataLinkRow = new SDataLeadtimeRow(dataLinkCob, mnFormType));
            }

            moLeadtimeType.renderTableRows();
            index = moLeadtimeType.getTableGuiRowCount() - 1;
            moLeadtimeType.getTable().setRowSelectionInterval(index, index);
            moLeadtimeType.getVerticalScrollBar().setValue((index + 1) * moLeadtimeType.getTable().getRowHeight());
        }
    }

    private void actionLtimeTypeEdit() {
        int index = moLeadtimeType.getTable().getSelectedRow();
        SFormLeadtimeLink formLtimeLink = new erp.mmfg.form.SFormLeadtimeLink(miClient);
        SDataLeadtimeCo dataLinkCo = null;
        SDataLeadtimeCob dataLinkCob = null;
        SDataLeadtimeRow dataLinkRow = null;

        formLtimeLink.formReset();
        formLtimeLink.formRefreshCatalogues();

        if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
            for (int i = 0; i < moLeadtimeType.getTableGuiRowCount(); i++) {
                dataLinkCo = ((SDataLeadtimeCo) moLeadtimeType.getTableRow(i).getData());
                formLtimeLink.setValue(4, dataLinkCo);
            }
        } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
            formLtimeLink.setValue(1, moFieldPkCobId.getKeyAsIntArray()[0]);

            for (int i = 0; i < moLeadtimeType.getTableGuiRowCount(); i++) {
                dataLinkCob = ((SDataLeadtimeCob) moLeadtimeType.getTableRow(i).getData());
                formLtimeLink.setValue(5, dataLinkCob);
            }
        }

        formLtimeLink.setValue(2, moFieldPkSupplierId.getKeyAsIntArray()[0]);
        formLtimeLink.setValue(3, mnFormType);
        if (index != -1) {
            if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
                dataLinkCo = (SDataLeadtimeCo) moLeadtimeType.getTableRow(index).getData();
                formLtimeLink.setRegistry(dataLinkCo);
            } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
                dataLinkCob = (SDataLeadtimeCob) moLeadtimeType.getTableRow(index).getData();
                formLtimeLink.setRegistry(dataLinkCob);
            }

            formLtimeLink.setVisible(true);
            if (formLtimeLink.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
                    dataLinkCo = (SDataLeadtimeCo) formLtimeLink.getRegistry();

                    moLeadtimeType.setTableRow(dataLinkRow = new SDataLeadtimeRow(dataLinkCo, mnFormType), index);
                } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
                    dataLinkCob = (SDataLeadtimeCob) formLtimeLink.getRegistry();

                    moLeadtimeType.setTableRow(dataLinkRow = new SDataLeadtimeRow(dataLinkCob, mnFormType), index);
                }

                moLeadtimeType.renderTableRows();
            }
        }
    }

    public void publicActionTypeEdit() {
        actionLtimeTypeEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkCobId;
    private javax.swing.JButton jbPkSupplierId;
    private javax.swing.JButton jbTypeDelete;
    private javax.swing.JButton jbTypeEdit;
    private javax.swing.JButton jbTypeNew;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCobId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkSupplierId;
    private javax.swing.JLabel jlPkCobId;
    private javax.swing.JLabel jlPkSupplierId;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpHead;
    private javax.swing.JPanel jpHead1;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JPanel jpRowMaterial;
    private javax.swing.JPanel jpType;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moLeadtimeCo = null;
        moLeadtimeCob = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moLeadtimeType.createTable(null);
        moLeadtimeType.clearTableRows();

        if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
            jcbPkCobId.setEnabled(false);
            jcbPkCobId.setFocusable(false);

            jbPkCobId.setEnabled(false);
            jbPkCobId.setFocusable(false);
        } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
            jcbPkCobId.setEnabled(true);
            jcbPkCobId.setFocusable(true);

            jbPkCobId.setEnabled(true);
            jbPkCobId.setFocusable(false);

            moFieldPkCobId.setKey(new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
        }

        jcbPkSupplierId.setEnabled(true);
        jcbPkSupplierId.setFocusable(true);

        jbPkSupplierId.setEnabled(true);
        jbPkSupplierId.setFocusable(false);
    }

    @Override
    public void formRefreshCatalogues() {
        if (mnFormType == SDataConstants.TRN_SUP_LT_COB)
            SFormUtilities.populateComboBox(miClient, jcbPkCobId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });

        SFormUtilities.populateComboBox(miClient, jcbPkSupplierId, SDataConstants.BPSX_BP_SUP);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i = 0;
        erp.lib.form.SFormValidation validation = new SFormValidation();
        SDataLeadtimeCo leadtimeCo = null;
        SDataLeadtimeCob leadtimeCob = null;


        if (mnFormType == SDataConstants.TRN_SUP_LT_CO)
            moFieldPkCobId.setIsMandatory(false);

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
                if (moLeadtimeCo == null) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_LTIME_CO_VAL,
                            new Object[] { moFieldPkSupplierId.getKeyAsIntArray()[0] },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("El registro ya existe");
                        validation.setComponent(jcbPkSupplierId);
                    } else if (moLeadtimeType.getTableGuiRowCount() == 0) {
                        validation.setMessage("Falta agregar al menos una referencia");
                        validation.setComponent(jcbPkSupplierId);
                    }
                }
            } else  if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
                if (moLeadtimeCob == null) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_LTIME_COB_VAL,
                            new Object[] { moFieldPkCobId.getKeyAsIntArray()[0], moFieldPkSupplierId.getKeyAsIntArray()[0] },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("El registro ya existe");
                        validation.setComponent(jcbPkSupplierId);
                    } else if (moLeadtimeType.getTableGuiRowCount() == 0) {
                        validation.setMessage("Falta agregar al menos una referencia");
                        validation.setComponent(jcbPkSupplierId);
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataLeadtimeRow dataTypeRow = null;

        if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
            moLeadtimeCo = (erp.mmfg.data.SDataLeadtimeCo) registry;

            moFieldPkSupplierId.setKey(new int[] { moLeadtimeCo.getPkSupplierId() });

            for (i = 0; i < moLeadtimeCo.getDbmsTypes().size(); i++) {
                dataTypeRow = new SDataLeadtimeRow(moLeadtimeCo.getDbmsTypes().get(i), mnFormType);
                moLeadtimeType.addTableRow(dataTypeRow);
            }
        } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
            moLeadtimeCob = (erp.mmfg.data.SDataLeadtimeCob) registry;

            moFieldPkCobId.setKey(new int[] { moLeadtimeCob.getPkCobId() });
            moFieldPkSupplierId.setKey(new int[] { moLeadtimeCob.getPkSupplierId() });

            for (i = 0; i < moLeadtimeCob.getDbmsTypes().size(); i++) {
                dataTypeRow = new SDataLeadtimeRow(moLeadtimeCob.getDbmsTypes().get(i), mnFormType);
                moLeadtimeType.addTableRow(dataTypeRow);
            }
        }

        jcbPkSupplierId.setEnabled(false);
        jcbPkSupplierId.setFocusable(false);

        jbPkSupplierId.setEnabled(false);
        jbPkSupplierId.setFocusable(false);

        jcbPkCobId.setEnabled(false);
        jcbPkCobId.setFocusable(false);

        jbPkCobId.setEnabled(false);
        jbPkCobId.setFocusable(false);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (mnFormType == SDataConstants.TRN_SUP_LT_CO) {
            if (moLeadtimeCo == null) {
                moLeadtimeCo = new erp.mmfg.data.SDataLeadtimeCo();
                moLeadtimeCo.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moLeadtimeCo.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }

            moLeadtimeCo.setPkSupplierId(moFieldPkSupplierId.getKeyAsIntArray()[0]);

            moLeadtimeCo.getDbmsTypes().removeAllElements();
            for (int i = 0; i < moLeadtimeType.getTableGuiRowCount(); i++) {
                moLeadtimeCo.getDbmsTypes().add((SDataLeadtimeCo) moLeadtimeType.getTableRow(i).getData());
            }
        } else if (mnFormType == SDataConstants.TRN_SUP_LT_COB) {
            if (moLeadtimeCob == null) {
                moLeadtimeCob = new erp.mmfg.data.SDataLeadtimeCob();
                moLeadtimeCob.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moLeadtimeCob.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }

            moLeadtimeCob.setPkCobId(moFieldPkCobId.getKeyAsIntArray()[0]);
            moLeadtimeCob.setPkSupplierId(moFieldPkSupplierId.getKeyAsIntArray()[0]);

            moLeadtimeCob.getDbmsTypes().removeAllElements();
            for (int i = 0; i < moLeadtimeType.getTableGuiRowCount(); i++) {
                moLeadtimeCob.getDbmsTypes().add((SDataLeadtimeCob) moLeadtimeType.getTableRow(i).getData());
            }
        }

        return mnFormType == SDataConstants.TRN_SUP_LT_CO ? moLeadtimeCo : moLeadtimeCob;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        mnFormType = SLibUtilities.parseInt(value.toString());
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbTypeNew) {
                actionLtimeTypeNew();
            }
            else if (button == jbTypeEdit) {
                actionLtimeTypeEdit();
            }
            else if (button == jbPkCobId) {
                actionPkCobId();
            }
            else if (button == jbPkSupplierId) {
                actionPkSupplierId();
            }
        }
    }
}
