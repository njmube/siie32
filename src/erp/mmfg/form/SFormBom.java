/*
 * DFormCompany.java
 *
 * Created on 17 de agosto de 2008, 01:42 AM
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableCellRendererNumber;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STablePaneGrid;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataUnit;
import erp.mmfg.data.SDataBom;
import erp.mmfg.data.SDataBomLevelRow;
import erp.mmfg.data.SDataBomNotes;
import erp.mmfg.data.SDataBomNotesRow;
import erp.mmfg.data.SDataBomSubgoods;
import erp.mmfg.data.SDataBomSubgoodsRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JToggleButton;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormBom extends javax.swing.JDialog  implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataBom moBom;
    private erp.lib.form.SFormField moFieldFkCobId;
    private erp.lib.form.SFormField moFieldFkItemRmId;
    private erp.lib.form.SFormField moFieldBom;
    private erp.lib.form.SFormField moFieldLevel;
    private erp.lib.form.SFormField moFieldQty;
    private erp.lib.form.SFormField moFieldCostPercentage;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd_n;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moBomSubgoodPane;
    private erp.lib.table.STablePane moBomNotesPane;
    private erp.lib.table.STablePaneGrid moBomLevelPane;

    private erp.mitm.data.SDataItem moItem;
    private SDataUnit moUnit = null;

    /** Creates new form DFormCompany */
    public SFormBom(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_BOM;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jpData = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlFkCobId = new javax.swing.JLabel();
        jcbFkCobId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy = new javax.swing.JLabel();
        jbFkCobId = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jlFkItemRmId = new javax.swing.JLabel();
        jcbFkItemRmId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy1 = new javax.swing.JLabel();
        jbFkItemId = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jlBom = new javax.swing.JLabel();
        jtfBom = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jlQty = new javax.swing.JLabel();
        jtfQty = new javax.swing.JTextField();
        jlDummy2 = new javax.swing.JLabel();
        jtfDbmsLotSugUnitSymbol = new javax.swing.JTextField();
        jPanel53 = new javax.swing.JPanel();
        jlCostPercentage = new javax.swing.JLabel();
        jlDummy3 = new javax.swing.JLabel();
        jtfCostPercentage = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jtfDateStart = new javax.swing.JFormattedTextField();
        jlDummy4 = new javax.swing.JLabel();
        jbSetDateStart = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jtfDateEnd_n = new javax.swing.JFormattedTextField();
        jlDummy5 = new javax.swing.JLabel();
        jbSetDateEnd_n = new javax.swing.JButton();
        jPanel54 = new javax.swing.JPanel();
        jlLevel = new javax.swing.JLabel();
        jlDummy6 = new javax.swing.JLabel();
        jtfLevel = new javax.swing.JTextField();
        jPanel28 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jpLevel = new javax.swing.JPanel();
        jpLevelAction = new javax.swing.JPanel();
        jbBomLevelCurrent = new javax.swing.JButton();
        jbBomLevelNew = new javax.swing.JButton();
        jbBomLevelEdit = new javax.swing.JButton();
        jbBomLevelDelete = new javax.swing.JButton();
        jtbEntryFilter = new javax.swing.JToggleButton();
        jpSubgoods = new javax.swing.JPanel();
        jpSubgoodsAction = new javax.swing.JPanel();
        jbSubgoodsNew = new javax.swing.JButton();
        jbSubgoodsEdit = new javax.swing.JButton();
        jbSubgoodsDelete = new javax.swing.JButton();
        jpNotes = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbNotesNew = new javax.swing.JButton();
        jbNotesEdit = new javax.swing.JButton();
        jbNotesDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        jLabel3.setText("Lote sugerido: *");

        jTextField2.setText("LOTE SUGERIDO");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fórmula"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpData.setPreferredSize(new java.awt.Dimension(520, 250));
        jpData.setLayout(new java.awt.GridLayout(9, 0));

        jPanel14.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlFkCobId.setForeground(java.awt.Color.blue);
        jlFkCobId.setText("Sucursal: *");
        jlFkCobId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel14.add(jlFkCobId);

        jcbFkCobId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(jcbFkCobId);

        jlDummy.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel14.add(jlDummy);

        jbFkCobId.setText("...");
        jbFkCobId.setToolTipText("Seleccionar sucursal");
        jbFkCobId.setFocusable(false);
        jbFkCobId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbFkCobId);

        jpData.add(jPanel14);

        jPanel17.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlFkItemRmId.setForeground(java.awt.Color.blue);
        jlFkItemRmId.setText("Producto: *");
        jlFkItemRmId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel17.add(jlFkItemRmId);

        jcbFkItemRmId.setMaximumRowCount(16);
        jcbFkItemRmId.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbFkItemRmId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbFkItemRmIdFocusLost(evt);
            }
        });
        jPanel17.add(jcbFkItemRmId);

        jlDummy1.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel17.add(jlDummy1);

        jbFkItemId.setText("...");
        jbFkItemId.setToolTipText("Seleccionar producto terminado");
        jbFkItemId.setFocusable(false);
        jbFkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbFkItemId);

        jpData.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlBom.setText("Referencia: *");
        jlBom.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel19.add(jlBom);

        jtfBom.setText("DESCRIPTION");
        jtfBom.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel19.add(jtfBom);

        jpData.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlQty.setText("Lote sugerido:");
        jlQty.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel20.add(jlQty);

        jtfQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfQty.setText("SUGGEST LOT");
        jtfQty.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel20.add(jtfQty);

        jlDummy2.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel20.add(jlDummy2);

        jtfDbmsLotSugUnitSymbol.setEditable(false);
        jtfDbmsLotSugUnitSymbol.setFocusable(false);
        jtfDbmsLotSugUnitSymbol.setPreferredSize(new java.awt.Dimension(28, 23));
        jPanel20.add(jtfDbmsLotSugUnitSymbol);

        jpData.add(jPanel20);

        jPanel53.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlCostPercentage.setText("Costo asignado: *");
        jlCostPercentage.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel53.add(jlCostPercentage);

        jlDummy3.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel53.add(jlDummy3);

        jtfCostPercentage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCostPercentage.setText("COST PERCENTAGE");
        jtfCostPercentage.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel53.add(jtfCostPercentage);

        jpData.add(jPanel53);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlDateStart.setText("Fecha inicial vigencia: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel12.add(jlDateStart);

        jtfDateStart.setText("dd/mm/yyyy");
        jtfDateStart.setPreferredSize(new java.awt.Dimension(66, 23));
        jPanel12.add(jtfDateStart);

        jlDummy4.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel12.add(jlDummy4);

        jbSetDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbSetDateStart.setToolTipText("Seleccionar fecha inicial vigencia");
        jbSetDateStart.setFocusable(false);
        jbSetDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbSetDateStart);

        jpData.add(jPanel12);

        jPanel27.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlDateEnd.setText("Fecha final vigencia:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel27.add(jlDateEnd);

        jtfDateEnd_n.setText("dd/mm/yyyy");
        jtfDateEnd_n.setPreferredSize(new java.awt.Dimension(66, 23));
        jPanel27.add(jtfDateEnd_n);

        jlDummy5.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel27.add(jlDummy5);

        jbSetDateEnd_n.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbSetDateEnd_n.setToolTipText("Seleccionar fecha final vigencia");
        jbSetDateEnd_n.setFocusable(false);
        jbSetDateEnd_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel27.add(jbSetDateEnd_n);

        jpData.add(jPanel27);

        jPanel54.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jlLevel.setText("Nivel:");
        jlLevel.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel54.add(jlLevel);

        jlDummy6.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel54.add(jlDummy6);

        jtfLevel.setEditable(false);
        jtfLevel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfLevel.setText("LEVEL");
        jtfLevel.setFocusable(false);
        jtfLevel.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel54.add(jtfLevel);

        jpData.add(jPanel54);

        jPanel28.setLayout(new java.awt.BorderLayout());

        jckIsDeleted.setText("Registro eliminado");
        jPanel28.add(jckIsDeleted, java.awt.BorderLayout.WEST);

        jpData.add(jPanel28);

        getContentPane().add(jpData, java.awt.BorderLayout.PAGE_START);
        jpData.getAccessibleContext().setAccessibleName("");

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle:"));

        jpLevel.setLayout(new java.awt.BorderLayout());

        jpLevelAction.setPreferredSize(new java.awt.Dimension(779, 23));
        jpLevelAction.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jbBomLevelCurrent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new_main.gif"))); // NOI18N
        jbBomLevelCurrent.setToolTipText("Crear nivel 1");
        jbBomLevelCurrent.setFocusable(false);
        jbBomLevelCurrent.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbBomLevelCurrent);

        jbBomLevelNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbBomLevelNew.setToolTipText("Crear subnivel");
        jbBomLevelNew.setFocusable(false);
        jbBomLevelNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbBomLevelNew);

        jbBomLevelEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbBomLevelEdit.setToolTipText("Modificar");
        jbBomLevelEdit.setFocusable(false);
        jbBomLevelEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbBomLevelEdit);

        jbBomLevelDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbBomLevelDelete.setToolTipText("Eliminar");
        jbBomLevelDelete.setEnabled(false);
        jbBomLevelDelete.setFocusable(false);
        jbBomLevelDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLevelAction.add(jbBomLevelDelete);

        jtbEntryFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_off.gif"))); // NOI18N
        jtbEntryFilter.setToolTipText("Filtrar partidas eliminadas [Ctrl + F]");
        jtbEntryFilter.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbEntryFilter.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_on.gif"))); // NOI18N
        jpLevelAction.add(jtbEntryFilter);

        jpLevel.add(jpLevelAction, java.awt.BorderLayout.PAGE_START);

        jTabbedPane.addTab("Niveles", jpLevel);

        jpSubgoods.setLayout(new java.awt.BorderLayout());

        jpSubgoodsAction.setPreferredSize(new java.awt.Dimension(779, 23));
        jpSubgoodsAction.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jbSubgoodsNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbSubgoodsNew.setToolTipText("Crear");
        jbSubgoodsNew.setFocusable(false);
        jbSubgoodsNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpSubgoodsAction.add(jbSubgoodsNew);

        jbSubgoodsEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbSubgoodsEdit.setToolTipText("Modificar");
        jbSubgoodsEdit.setFocusable(false);
        jbSubgoodsEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpSubgoodsAction.add(jbSubgoodsEdit);

        jbSubgoodsDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbSubgoodsDelete.setToolTipText("Eliminar");
        jbSubgoodsDelete.setEnabled(false);
        jbSubgoodsDelete.setFocusable(false);
        jbSubgoodsDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpSubgoodsAction.add(jbSubgoodsDelete);

        jpSubgoods.add(jpSubgoodsAction, java.awt.BorderLayout.PAGE_START);

        jTabbedPane.addTab("Subproductos", jpSubgoods);

        jpNotes.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(779, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jbNotesNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbNotesNew.setToolTipText("Crear");
        jbNotesNew.setFocusable(false);
        jbNotesNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesNew);

        jbNotesEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbNotesEdit.setToolTipText("Modificar");
        jbNotesEdit.setFocusable(false);
        jbNotesEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesEdit);

        jbNotesDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbNotesDelete.setToolTipText("Eliminar");
        jbNotesDelete.setEnabled(false);
        jbNotesDelete.setFocusable(false);
        jbNotesDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNotesDelete);

        jpNotes.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        jTabbedPane.addTab("Notas", jpNotes);

        jPanel3.add(jTabbedPane, java.awt.BorderLayout.CENTER);
        jTabbedPane.getAccessibleContext().setAccessibleName("Subproductos");

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(2));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-858)/2, (screenSize.height-684)/2, 858, 684);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkItemRmIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbFkItemRmIdFocusLost
        fkItemIdFocusLostFkItemId();
    }//GEN-LAST:event_jcbFkItemRmIdFocusLost

    private void initComponentsExtra() {
        int i;
        STableColumnForm oColumnsSubgood[];
        STableColumnForm oColumnsLevel[];
        STableColumnForm oColumnsNotes[];

        mvFields = new Vector<SFormField>();
        moBomSubgoodPane = new STablePane(miClient);
        moBomSubgoodPane.setDoubleClickAction(this, "publicActionSubgoodEdit");
        jpSubgoods.add(moBomSubgoodPane, BorderLayout.CENTER);

        /*
        moBomLevelPane = new STablePane(miClient);
        moBomLevelPane.setDoubleClickAction(this, "publicActionLevelEdit");
        jpLevel.add(moBomLevelPane, BorderLayout.CENTER);
        */

        moBomNotesPane = new STablePane(miClient);
        moBomNotesPane.setDoubleClickAction(this, "publicActionNotesEdit");
        jpNotes.add(moBomNotesPane, BorderLayout.CENTER);

        // Pane of document entries:

        moBomLevelPane = new STablePaneGrid(miClient);
        moBomLevelPane.setDoubleClickAction(this, "publicActionLevelEdit");
        jpLevel.add(moBomLevelPane, BorderLayout.CENTER);

        moFieldFkCobId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCobId, jlFkCobId);
        moFieldFkItemRmId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemRmId, jlFkItemRmId);
        moFieldBom = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfBom, jlBom);
        moFieldBom.setLengthMax(50);
        moFieldLevel = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfLevel, jlLevel);
        moFieldQty = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQty, jlQty);
        moFieldQty.setDoubleMin(0);
        moFieldQty.setMinInclusive(true);
        moFieldCostPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_FLOAT, false, jtfCostPercentage, jlCostPercentage);
        moFieldCostPercentage.setDecimalFormat(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 4) + "%"));
        moFieldCostPercentage.setIsPercent(true);
        moFieldDateStart = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDateStart, jlDateStart);
        moFieldDateEnd_n = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfDateEnd_n, jlDateEnd);
        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldFkCobId);
        mvFields.add(moFieldFkItemRmId);
        mvFields.add(moFieldBom);
        mvFields.add(moFieldLevel);
        mvFields.add(moFieldQty);
        mvFields.add(moFieldCostPercentage);
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd_n);
        mvFields.add(moFieldIsDeleted);

        jbSetDateStart.addActionListener(this);
        jbSetDateEnd_n.addActionListener(this);
        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbSubgoodsNew.addActionListener(this);
        jbSubgoodsEdit.addActionListener(this);
        jbBomLevelNew.addActionListener(this);
        jbBomLevelEdit.addActionListener(this);
        jbBomLevelCurrent.addActionListener(this);
        jbNotesNew.addActionListener(this);
        jbNotesEdit.addActionListener(this);
        jbFkItemId.addActionListener(this);
        jbFkCobId.addActionListener(this);
        jtbEntryFilter.addActionListener(this);

        i = 0;
        oColumnsLevel = new STableColumnForm[24];
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nivel superior", 250);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Nivel", 37);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Insumo", 250);
        oColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY_2X);
        oColumnsLevel[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        oColumnsLevel[i++].setSumApplying(true);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        oColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Porcentaje", 85);
        oColumnsLevel[i].setCellRenderer(new STableCellRendererNumber(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 6) + "%")));
        oColumnsLevel[i++].setSumApplying(true);
        oColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Costo $", STableConstants.WIDTH_VALUE_2X);
        oColumnsLevel[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        oColumnsLevel[i++].setSumApplying(true);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fin. vigencia", STableConstants.WIDTH_DATE);

        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ins. sust. clave", STableConstants.WIDTH_ITEM_KEY);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ins. sust.", 250);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ins. sust. unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        oColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ins. sust. porcentaje", 85);
        oColumnsLevel[i++].setCellRenderer(new STableCellRendererNumber(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 6) + "%")));
        oColumnsLevel[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ins. sust. porcentaje máx.", 85);
        oColumnsLevel[i++].setCellRenderer(new STableCellRendererNumber(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 6) + "%")));

        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "No explosionar", STableConstants.WIDTH_UNIT_SYMBOL);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Req. inventarios", STableConstants.WIDTH_UNIT_SYMBOL);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        oColumnsLevel[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < oColumnsLevel.length; i++) {
            moBomLevelPane.addTableColumn(oColumnsLevel[i]);
        }
        moBomLevelPane.createTable(null);

        i = 0;
        oColumnsSubgood = new STableColumnForm[14];
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Subproducto", 250);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        oColumnsSubgood[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cto. asig.", STableConstants.WIDTH_PERCENTAGE);
        oColumnsSubgood[i].setCellRenderer(new STableCellRendererNumber(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 4) + "%")));
        oColumnsSubgood[i++].setSumApplying(true);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fin. vigencia", STableConstants.WIDTH_DATE);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        oColumnsSubgood[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < oColumnsSubgood.length; i++) {
            moBomSubgoodPane.addTableColumn(oColumnsSubgood[i]);
        }
        moBomSubgoodPane.createTable(null);

        i = 0;
        oColumnsNotes = new STableColumnForm[8];
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Notas", 500);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        oColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < oColumnsNotes.length; i++) {
            moBomNotesPane.addTableColumn(oColumnsNotes[i]);
        }
        moBomNotesPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.createActionMap(rootPane, this, "publicActionDependentFilter", "dependentFilter", KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkCobId.isEnabled()) jcbFkCobId.requestFocus(); else jtfBom.requestFocus();
        }
    }

    public void fkItemIdFocusLostFkItemId() {
        if (jcbFkItemRmId.getSelectedIndex() > 0) {

            // Assign unit from Bom or item:

            moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemRmId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);

            if (moBom != null) {
                moUnit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { moBom.getFkUnitId() }, SLibConstants.EXEC_MODE_VERBOSE);
                jtfDbmsLotSugUnitSymbol.setText(moUnit != null ? moUnit.getSymbol() : "(n/a)");
            }
            else {
                moUnit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { moItem.getFkUnitId() }, SLibConstants.EXEC_MODE_VERBOSE);
                jtfDbmsLotSugUnitSymbol.setText(((erp.lib.form.SFormComponentItem) jcbFkItemRmId.getModel().getSelectedItem()).getComplement().toString());
            }

            if (moFieldBom.getString().length() <= 0 ) {
                if (jcbFkItemRmId.getSelectedItem().toString().length()<50) {
                    moFieldBom.setFieldValue(jcbFkItemRmId.getSelectedItem().toString());
                }
                else {
                    moFieldBom.setFieldValue(jcbFkItemRmId.getSelectedItem().toString().substring(0,49));
                }
            }
        }
    }

    private void actionSetDateStart() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateStart.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateStart.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateStart.requestFocus();
        }
    }

    private void actionSetDateEnd_n() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd_n.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd_n.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateEnd_n.requestFocus();
        }
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCobId, new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
    }

    private void actionFkItemId() {
        // miClient.pickOption(SDataConstants.ITMX_ITEM_IOG, moFieldFkItemRmId, SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO);
        miClient.pickOption(SDataConstants.ITMX_ITEM_BOM_ITEM, moFieldFkItemRmId, null);
    }

    private void enabledFields(boolean b) {

        jcbFkCobId.setEnabled(b);
        jcbFkCobId.setFocusable(b);
        jbFkCobId.setEnabled(b);

        jcbFkItemRmId.setEnabled(b);
        jcbFkItemRmId.setFocusable(b);
        jbFkItemId.setEnabled(b);

        jckIsDeleted.setEnabled(!b);
    }

    private void sumLevelValues() {
        double dTotalCost = 0;
        double dTotalQuantity = 0;

        SDataBom oLevel = null;
        SDataBomLevelRow oRow = null;

        for (int i = 0; i < moBomLevelPane.getTableGuiRowCount(); i++) {

            oLevel = (SDataBom) moBomLevelPane.getTableRow(i).getData();

            // Sum only rows that not deleted:

            if (!oLevel.getIsDeleted()) {

                // Sum quantity:

                dTotalQuantity += oLevel.getQuantity();

                // Sum cost:

                dTotalCost += oLevel.getCost();
            }
        }

        for (int i = 0; i < moBomLevelPane.getTableGuiRowCount(); i++) {

            oLevel = (SDataBom) moBomLevelPane.getTableRow(i).getData();

            // Calculate percentaje:

            if (!oLevel.getIsDeleted()) {

                if (dTotalQuantity > 0) {
                    oLevel.setPercentage(oLevel.getQuantity() / dTotalQuantity);
                }
                else {
                    oLevel.setPercentage(0);
                }
            }
            else {
                oLevel.setPercentage(0);
            }

            oRow = new SDataBomLevelRow(oLevel);
            oRow.prepareTableRow();
            moBomLevelPane.setTableRow((SDataBomLevelRow) oRow, i);
        }

        // Create row totals:

        oLevel = new SDataBom();

        oLevel.setDbmsItem("TOTALES");
        oLevel.setQty(dTotalQuantity);
        oLevel.setPercentage(dTotalQuantity > 0 ? 1 : 0);
        oLevel.setCost(dTotalCost);

        oRow = new SDataBomLevelRow(oLevel);
        oRow.prepareTableRow();
        moBomLevelPane.addTableRow(oRow);
        moBomLevelPane.renderTableRows();
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionSubgoodNew() {
        int index = 0;
        SFormBomSubgood oFormBomSubgood = new SFormBomSubgood(miClient);
        SDataBomSubgoods oDataBomSubgood = null;
        SDataBomSubgoodsRow oDataBomSubgoodRow = null;

        oFormBomSubgood.formRefreshCatalogues();
        oFormBomSubgood.formReset();
        oFormBomSubgood.setValue(1, jcbFkItemRmId.getSelectedItem());
        oFormBomSubgood.setVisible(true);
        if (oFormBomSubgood.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            oDataBomSubgood = (SDataBomSubgoods) oFormBomSubgood.getRegistry();

            moBomSubgoodPane.addTableRow(oDataBomSubgoodRow = new SDataBomSubgoodsRow(oDataBomSubgood));
            moBomSubgoodPane.renderTableRows();
            index = moBomSubgoodPane.getTableGuiRowCount() - 1;
            moBomSubgoodPane.getTable().setRowSelectionInterval(index, index);
            moBomSubgoodPane.getVerticalScrollBar().setValue((index + 1) * moBomSubgoodPane.getTable().getRowHeight());
        }
    }

    private void actionSubgoodEdit() {
        int index = moBomSubgoodPane.getTable().getSelectedRow();
        SFormBomSubgood oFormBomSubgood = new SFormBomSubgood(miClient);
        SDataBomSubgoods oDataBomSubgood = null;
        SDataBomSubgoodsRow oDataBomSubgoodRow = null;

        oFormBomSubgood.formRefreshCatalogues();
        oFormBomSubgood.formReset();
        //oDataBomSubgood = (SDataBomSubgoods) oFormBomSubgood.getRegistry();
        if (index != -1) {
            oDataBomSubgood = (SDataBomSubgoods) moBomSubgoodPane.getTableRow(index).getData();
            oFormBomSubgood.setRegistry(oDataBomSubgood);
            oFormBomSubgood.setValue(1, jcbFkItemRmId.getSelectedItem());
            oFormBomSubgood.setVisible(true);
            if (oFormBomSubgood.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                oDataBomSubgood = (SDataBomSubgoods) oFormBomSubgood.getRegistry();

                moBomSubgoodPane.setTableRow(oDataBomSubgoodRow = new SDataBomSubgoodsRow(oDataBomSubgood), index);
                moBomSubgoodPane.renderTableRows();
            }
        }
    }

    private void actionEntryFilter() {
        if (jtbEntryFilter.isEnabled()) {
            int index = moBomLevelPane.getTable().getSelectedRow();

            moBomLevelPane.setGridViewStatus(!jtbEntryFilter.isSelected() ? STableConstants.VIEW_STATUS_ALL : STableConstants.VIEW_STATUS_ALIVE);
            moBomLevelPane.renderTableRows();
            moBomLevelPane.setTableRowSelection(index < moBomLevelPane.getTableGuiRowCount() ? index : moBomLevelPane.getTableGuiRowCount() - 1);
        }
    }

    private void actionLevelNew(int level) {
        int index = 0;
        int nFkItemId = 0;
        int nFkUnitId = 0;
        String sTopLevel = "";
        SFormBomLevels oFormBomLevel = null;
        SDataBom oDataBomLevel = null;
        SDataBomLevelRow oDataBomLevelRow = null;

        SDataBomLevelRow oRow = null;
        Vector<Object> vValues = new Vector<Object>();

        if (jcbFkItemRmId.getSelectedIndex() > 0) {

            oFormBomLevel = new SFormBomLevels(miClient);
            oFormBomLevel.formRefreshCatalogues();
            oFormBomLevel.formReset();

            // Level selected:

            index = moBomLevelPane.getTable().getSelectedRow();

            // Check if level isn´t 'TOTALS':

            if (level > 0 && index > 0 && (index+1) == moBomLevelPane.getTableGuiRowCount()) {
                miClient.showMsgBoxWarning("En el renglón de 'TOTALES' no se puede agregar un subnivel");
                nFkItemId = 0;
                nFkUnitId = 0;
            }
            else if (level > 0 && index != -1) {
                oDataBomLevel = (SDataBom) moBomLevelPane.getTableRow(index).getData();
                level = oDataBomLevel.getLevel() + 1;
                nFkItemId = oDataBomLevel.getFkItemId();
                nFkUnitId = oDataBomLevel.getFkUnitId();
                sTopLevel = oDataBomLevel.getDbmsItemKeyRm() + "-" +oDataBomLevel.getDbmsItemRm(); // moBomLevelPane.getSelectedTableRow().getValues().get(0).toString();
                oFormBomLevel.setValue(1, sTopLevel);
            } else {
                level = 1;
                nFkItemId = moFieldFkItemRmId.getKeyAsIntArray()[0];
                nFkUnitId = moUnit.getPkUnitId();
                sTopLevel = jcbFkItemRmId.getSelectedItem().toString();
                oFormBomLevel.setValue(1, sTopLevel);
            }

            // Valide if is possible add new row:

            if (nFkItemId > 0 && nFkUnitId > 0) {

                oFormBomLevel.setValue(2,(java.lang.Object) level);
                oFormBomLevel.setValue(3, moFieldFkItemRmId.getKeyAsIntArray()[0]);

                // Get sum total for percentaje:

                if (moBomLevelPane.getTableGuiRowCount() > 0) {
                    oRow = (SDataBomLevelRow) moBomLevelPane.getTableRow(moBomLevelPane.getTableGuiRowCount()-1);
                    vValues = oRow.getValues();
                    if (vValues.get(3).toString().length() <= 0) {
                        oFormBomLevel.setValue(4, ((Double) vValues.get(4)));
                    }
                    else {
                        oRow = (SDataBomLevelRow) moBomLevelPane.getTableRow(0);
                        vValues = oRow.getValues();
                        oFormBomLevel.setValue(4, ((Double) vValues.get(4)));
                    }
                }

                oFormBomLevel.setValue(5, moFieldDateStart.getDate());
                oFormBomLevel.setBomLevels(moBomLevelPane);

                oFormBomLevel.setVisible(true);
                if (oFormBomLevel.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                    oDataBomLevel = (SDataBom) oFormBomLevel.getRegistry();

                    oDataBomLevel.setDbmsItem(sTopLevel);
                    oDataBomLevel.setLevel(level);
                    oDataBomLevel.setFkItemId_n(nFkItemId);
                    oDataBomLevel.setFkUnitId_n(nFkUnitId);

                    // Remove totals:

                    if (moBomLevelPane.getTableGuiRowCount() > 0) {
                        moBomLevelPane.removeTableRow( moBomLevelPane.getTableGuiRowCount()-1);
                    }

                    moBomLevelPane.addTableRow(oDataBomLevelRow = new SDataBomLevelRow(oDataBomLevel));
                    moBomLevelPane.renderTableRows();
                    index = moBomLevelPane.getTableGuiRowCount() - 1;
                    moBomLevelPane.getTable().setRowSelectionInterval(index, index);
                    moBomLevelPane.getVerticalScrollBar().setValue((index + 1) * moBomLevelPane.getTable().getRowHeight());
                    moBomLevelPane.renderTableRows();
                    sumLevelValues();
                }
            }
        }
    }

    private void actionLevelEdit() {
        int index = moBomLevelPane.getTable().getSelectedRow();
        SFormBomLevels oFormBomLevel = new SFormBomLevels(miClient);
        SDataBom oDataBomLevel = null;
        SDataBomLevelRow oDataBomLevelRow = null;

        SDataBomLevelRow oRow = null;
        Vector<Object> vValues = new Vector<Object>();

        oFormBomLevel.formRefreshCatalogues();
        oFormBomLevel.formReset();

        if (index != -1 && index != moBomLevelPane.getTableGuiRowCount()-1) {
            oDataBomLevel = (SDataBom) moBomLevelPane.getTableRow(index).getData();
            oFormBomLevel.setRegistry(oDataBomLevel);
            oFormBomLevel.setValue(1, moBomLevelPane.getSelectedTableRow().getValues().get(0));

            // Get sum total for percentaje:

            if (moBomLevelPane.getTableGuiRowCount() > 0) {
                oRow = (SDataBomLevelRow) moBomLevelPane.getTableRow(moBomLevelPane.getTableGuiRowCount()-1);
                vValues = oRow.getValues();
                if (vValues.get(3).toString().length() <= 0) {
                    oFormBomLevel.setValue(4, ((Double) vValues.get(4)));
                }
                else {
                    oRow = (SDataBomLevelRow) moBomLevelPane.getTableRow(0);
                    vValues = oRow.getValues();
                    oFormBomLevel.setValue(4, ((Double) vValues.get(4)));
                }
            }

            oFormBomLevel.setBomLevels(moBomLevelPane);
            oFormBomLevel.setVisible(true);
            if (oFormBomLevel.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                oDataBomLevel = (erp.mmfg.data.SDataBom) oFormBomLevel.getRegistry();

                oDataBomLevel.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
                oDataBomLevel.setUserEditTs(miClient.getSessionXXX().getWorkingDate());

                if (oDataBomLevel.getIsDeleted()) {
                    oDataBomLevel.setDbmsUserDelete(miClient.getSessionXXX().getUser().getUser());
                    oDataBomLevel.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
                }

                // Remove totals:

                if (moBomLevelPane.getTableGuiRowCount() > 0) {
                    moBomLevelPane.removeTableRow( moBomLevelPane.getTableGuiRowCount()-1);
                }

                moBomLevelPane.setTableRow(oDataBomLevelRow = new SDataBomLevelRow(oDataBomLevel), index);
                moBomLevelPane.renderTableRows();
                sumLevelValues();
            }
        }
    }

    private void actionNotesNew() {
        int index = 0;
        SFormBomNotes formBomNotes = new SFormBomNotes(miClient);
        SDataBomNotes dataBomNotes = null;
        SDataBomNotesRow dataBomNotesRow = null;

        formBomNotes.formRefreshCatalogues();
        formBomNotes.formReset();
        formBomNotes.setVisible(true);
        if (formBomNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            dataBomNotes = (SDataBomNotes) formBomNotes.getRegistry();

            dataBomNotes.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
            dataBomNotes.setDbmsUserEdit("(n/a)");
            dataBomNotes.setDbmsUserDelete("(n/a)");
            dataBomNotes.setUserNewTs(miClient.getSessionXXX().getWorkingDate());
            dataBomNotes.setUserEditTs(miClient.getSessionXXX().getWorkingDate());
            dataBomNotes.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());

            moBomNotesPane.addTableRow(dataBomNotesRow = new SDataBomNotesRow(dataBomNotes));
            moBomNotesPane.renderTableRows();
            index = moBomNotesPane.getTableGuiRowCount() - 1;
            moBomNotesPane.getTable().setRowSelectionInterval(index, index);
            moBomNotesPane.getVerticalScrollBar().setValue((index + 1) * moBomNotesPane.getTable().getRowHeight());
        }
    }

    private void actionNotesEdit() {
        int index = moBomNotesPane.getTable().getSelectedRow();
        SFormBomNotes formNotes = new SFormBomNotes(miClient);
        SDataBomNotes dataNotes = null;
        SDataBomNotesRow dataNotesRow = null;

        formNotes.formRefreshCatalogues();
        formNotes.formReset();
        dataNotes = (SDataBomNotes) formNotes.getRegistry();
        if (index != -1) {
            dataNotes = (SDataBomNotes) moBomNotesPane.getTableRow(index).getData();
            formNotes.setRegistry(dataNotes);
            formNotes.setVisible(true);
            if (formNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                dataNotes = (SDataBomNotes) formNotes.getRegistry();

                dataNotes.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
                dataNotes.setUserEditTs(miClient.getSessionXXX().getWorkingDate());

                moBomNotesPane.setTableRow(dataNotesRow = new SDataBomNotesRow(dataNotes), index);
                moBomNotesPane.renderTableRows();
            }
        }
    }

    public void publicActionSubgoodEdit() {
        actionSubgoodEdit();
    }

    public void publicActionLevelEdit() {
        actionLevelEdit();
    }

    public void publicActionNotesEdit() {
        actionNotesEdit();
    }

    public void publicActionDependentFilter() {
        if (jTabbedPane.getSelectedIndex() == 0) {
            jtbEntryFilter.setSelected(!jtbEntryFilter.isSelected());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton jbBomLevelCurrent;
    private javax.swing.JButton jbBomLevelDelete;
    private javax.swing.JButton jbBomLevelEdit;
    private javax.swing.JButton jbBomLevelNew;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkCobId;
    private javax.swing.JButton jbFkItemId;
    private javax.swing.JButton jbNotesDelete;
    private javax.swing.JButton jbNotesEdit;
    private javax.swing.JButton jbNotesNew;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbSetDateEnd_n;
    private javax.swing.JButton jbSetDateStart;
    private javax.swing.JButton jbSubgoodsDelete;
    private javax.swing.JButton jbSubgoodsEdit;
    private javax.swing.JButton jbSubgoodsNew;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCobId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemRmId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlBom;
    private javax.swing.JLabel jlCostPercentage;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlDummy4;
    private javax.swing.JLabel jlDummy5;
    private javax.swing.JLabel jlDummy6;
    private javax.swing.JLabel jlFkCobId;
    private javax.swing.JLabel jlFkItemRmId;
    private javax.swing.JLabel jlLevel;
    private javax.swing.JLabel jlQty;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpLevel;
    private javax.swing.JPanel jpLevelAction;
    private javax.swing.JPanel jpNotes;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JPanel jpSubgoods;
    private javax.swing.JPanel jpSubgoodsAction;
    private javax.swing.JToggleButton jtbEntryFilter;
    private javax.swing.JTextField jtfBom;
    private javax.swing.JTextField jtfCostPercentage;
    private javax.swing.JFormattedTextField jtfDateEnd_n;
    private javax.swing.JFormattedTextField jtfDateStart;
    private javax.swing.JTextField jtfDbmsLotSugUnitSymbol;
    private javax.swing.JTextField jtfLevel;
    private javax.swing.JTextField jtfQty;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moBom = null;
        moItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moBomSubgoodPane.createTable(null);
        moBomSubgoodPane.clearTableRows();
        moBomLevelPane.createTable(null);
        moBomLevelPane.clearTableRows();
        moBomNotesPane.createTable(null);
        moBomNotesPane.clearTableRows();
        jTabbedPane.setSelectedIndex(0);

        moFieldDateStart.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        moFieldDateEnd_n.setFieldValue(null);

        enabledFields(true);

        jtfDbmsLotSugUnitSymbol.setText("");
        jtbEntryFilter.setSelected(true);
        moFieldFkCobId.setKey(new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
        moFieldCostPercentage.setDouble((double) 1);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCobId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
        SFormUtilities.populateComboBox(miClient, jcbFkItemRmId, SDataConstants.ITMX_ITEM_BOM_ITEM, null);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int nCount = 0;
        double dPercentage = 0;
        String sMsg = "";

        SDataBom oLevel = null;
        SDataBomSubgoods oBomSubgoods = null;
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (jlFkCobId.getText().compareTo(mvFields.get(i).getFieldName()) == 0 ||
                jlFkItemRmId.getText().compareTo(mvFields.get(i).getFieldName()) == 0) {
                if (!((erp.lib.form.SFormField) mvFields.get(i)).validateFieldForcing()) {
                    validation.setIsError(true);
                    validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                    break;
                }
            }
            else {
                if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                    validation.setIsError(true);
                    validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                    break;
                }
            }
        }

        if (!validation.getIsError()) {
            if (moFieldDateEnd_n.getDate() != null && moFieldDateEnd_n.getDate().before(moFieldDateStart.getDate())) {
                    validation.setMessage("La fecha final no puede ser anterior a la fecha inicial.");
                    validation.setComponent(jtfDateEnd_n);
            }
        }

        // Validate reference:

        if (!validation.getIsError()) {
            nCount = SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_BOM_VAL,
                    new Object[] { (moBom != null ? moBom.getPkBomId() : 0), moFieldBom.getString() },
                    SLibConstants.EXEC_MODE_VERBOSE);

            // When BOM is new, and there is a bom with the same reference:

            if ((moBom == null || moBom.getPkBomId() == 0) && nCount > 0) {
                sMsg = "Ya existe una fórmula con esta misma referencia.";
            }
            else if (moBom != null && moBom.getPkBomId() > 0) {

                // When BOM isn't new, and there is a bom with the same reference:

                if (nCount > 1 || (nCount == 1 && moBom.getBom().compareTo(moFieldBom.getString()) != 0)) {
                    sMsg = "Ya existe una fórmula con esta misma referencia.";
                }
            }

            if (sMsg.length() > 0) {
                validation.setMessage(sMsg);
                validation.setComponent(jtfBom);
            }
        }

        // Validate cost percentage:

        if (!validation.getIsError()) {
            dPercentage = moFieldCostPercentage.getDouble();

            for (int i = 0; i < moBomSubgoodPane.getTableGuiRowCount(); i++) {
                oBomSubgoods = (erp.mmfg.data.SDataBomSubgoods) moBomSubgoodPane.getTableRow(i).getData();

                if (!oBomSubgoods.getIsDeleted()) {
                    dPercentage += oBomSubgoods.getCostPercentage();
                }
            }

            if (dPercentage != 1) {
                validation.setMessage("El costo asignado al 'Producto term./proc.' y 'Subproductos' suman '" + (dPercentage * 100) +  "%',\n cuando deberían sumar el 100%.");
                validation.setComponent(jtfCostPercentage);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataBomSubgoodsRow dataBomSubgoodRow = null;
        SDataBomLevelRow dataBomLevelRow = null;
        SDataBomNotesRow dataBomNotesRow = null;

        moBom = (SDataBom) registry;

        moFieldFkCobId.setKey(new int[] { moBom.getFkCobId() });
        moFieldFkItemRmId.setKey(new int[] { moBom.getFkItemId() });
        moFieldBom.setFieldValue(moBom.getBom());
        moFieldLevel.setFieldValue(moBom.getLevel());
        moFieldQty.setFieldValue(moBom.getQuantity());
        moFieldCostPercentage.setFieldValue(moBom.getCostPercentage());
        moFieldDateStart.setFieldValue(moBom.getDateStart());
        moFieldDateEnd_n.setFieldValue(moBom.getDateEnd_n());
        moFieldIsDeleted.setBoolean(moBom.getIsDeleted());

        for (i = 0; i < moBom.getDbmsBomSubgoods().size(); i++) {
            dataBomSubgoodRow = new SDataBomSubgoodsRow(moBom.getDbmsBomSubgoods().get(i));
            moBomSubgoodPane.addTableRow(dataBomSubgoodRow);
        }

        for (i = 0; i < moBom.getDbmsLevel().size(); i++) {
            dataBomLevelRow = new SDataBomLevelRow(moBom.getDbmsLevel().get(i));
            moBomLevelPane.addTableRow(dataBomLevelRow);
        }
        moBomLevelPane.renderTableRows();
        moBomLevelPane.setTableRowSelection(0);
        actionEntryFilter();

        for (i = 0; i < moBom.getDbmsNotes().size(); i++) {
            dataBomNotesRow = new SDataBomNotesRow(moBom.getDbmsNotes().get(i));
            moBomNotesPane.addTableRow(dataBomNotesRow);
        }

        enabledFields(false);
        fkItemIdFocusLostFkItemId();
        sumLevelValues();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataBom oLevel = null;

        if (moBom == null) {
            moBom = new SDataBom();

            moBom.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moBom.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
            moBom.setDbmsUserEdit("(n/a)");
            moBom.setDbmsUserDelete("(n/a)");
            moBom.setUserNewTs(miClient.getSessionXXX().getWorkingDate());
            moBom.setUserEditTs(miClient.getSessionXXX().getWorkingDate());
            moBom.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());

            moBom.setFkCobId(moFieldFkCobId.getKeyAsIntArray()[0]);
            moBom.setFkItemId(moFieldFkItemRmId.getKeyAsIntArray()[0]);
            moBom.setFkUnitId(moItem.getFkUnitId());
        }
        else {
            moBom.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moBom.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
            moBom.setUserEditTs(miClient.getSessionXXX().getWorkingDate());

            if (moFieldIsDeleted.getBoolean()) {
                moBom.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                moBom.setDbmsUserDelete(miClient.getSessionXXX().getUser().getUser());
                moBom.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
            }
        }

        moBom.setBom(moFieldBom.getString());
        moBom.setLevel(moFieldLevel.getInteger());
        moBom.setQty(moFieldQty.getDouble());
        moBom.setCostPercentage(moFieldCostPercentage.getDouble());
        moBom.setDateStart(moFieldDateStart.getDate());
        moBom.setDateEnd_n(moFieldDateEnd_n.getDate());
        moBom.setIsDeleted(moFieldIsDeleted.getBoolean());
        moBom.setRoot(moFieldFkItemRmId.getKeyAsIntArray()[0]);

        moBom.getDbmsBomSubgoods().removeAllElements();
        for (int i = 0; i < moBomSubgoodPane.getTableGuiRowCount(); i++) {
            moBom.getDbmsBomSubgoods().add((erp.mmfg.data.SDataBomSubgoods) moBomSubgoodPane.getTableRow(i).getData());
        }

        moBomLevelPane.setGridViewStatus(STableConstants.VIEW_STATUS_ALL);
        moBomLevelPane.renderTableRows();
        moBom.getDbmsLevel().removeAllElements();
        for (int i = 0; i < moBomLevelPane.getTableGuiRowCount()-1; i++) {
            oLevel = (SDataBom) moBomLevelPane.getTableRow(i).getData();
            //oLevel.setIsDeleted(moBom.getIsDeleted());
            moBom.getDbmsLevel().add(oLevel);
        }

        moBom.getDbmsNotes().removeAllElements();
        for (int i = 0; i < moBomNotesPane.getTableGuiRowCount(); i++) {
            moBom.getDbmsNotes().add((SDataBomNotes) moBomNotesPane.getTableRow(i).getData());
        }

        return moBom;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbSubgoodsNew) {
                actionSubgoodNew();
            }
            else if (button == jbSubgoodsEdit) {
                actionSubgoodEdit();
            }
            else if (button == jbBomLevelNew) {
                actionLevelNew(1);
            }
            else if (button == jbBomLevelEdit) {
                actionLevelEdit();
            }
            else if (button == jbBomLevelCurrent) {
                actionLevelNew(0);
            }
            else if (button == jbNotesNew) {
                actionNotesNew();
            }
            else if (button == jbNotesEdit) {
                actionNotesEdit();
            }
            else if (button == jbSetDateStart) {
                actionSetDateStart();
            }
            else if (button == jbSetDateEnd_n) {
                actionSetDateEnd_n();
            }
            else if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkItemId) {
                actionFkItemId();
            }
            else if (button == jbFkCobId) {
                actionFkCobId();
            }
        }
        if (e.getSource() instanceof javax.swing.JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbEntryFilter) {
                actionEntryFilter();
            }
        }
    }
}
