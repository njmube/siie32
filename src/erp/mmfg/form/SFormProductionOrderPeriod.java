/*
 * SFormProductionOrderPeriod.java
 *
 * Created on 29 de septiembre de 2009, 14:08
 */

package erp.mmfg.form;

import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormValidation;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.mmfg.data.SDataProductionOrderPeriod;
import javax.swing.JLabel;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormProductionOrderPeriod extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataProductionOrderPeriod moPeriod;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldQty;

    /** Creates new form DFormCompany */
    public SFormProductionOrderPeriod(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_ORD_PER;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jtfDateStart = new javax.swing.JFormattedTextField();
        jPanel6 = new javax.swing.JPanel();
        jbDateStart = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jtfDateEnd = new javax.swing.JFormattedTextField();
        jPanel11 = new javax.swing.JPanel();
        jbDateEnd = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlQty = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jtfQty = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jtfUnitSymbol = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Período"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(150, 80));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jlDateStart.setText("Fecha inicial: *"); // NOI18N
        jlDateStart.setPreferredSize(new java.awt.Dimension(90, 14));
        jPanel4.add(jlDateStart, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.BorderLayout(1, 5));

        jtfDateStart.setText("PERIOD DATE");
        jtfDateStart.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel1.add(jtfDateStart, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.BorderLayout(2, 5));

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha del periodo");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbDateStart, java.awt.BorderLayout.WEST);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel4);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 5));

        jlDateEnd.setText("Fecha final: *"); // NOI18N
        jlDateEnd.setPreferredSize(new java.awt.Dimension(90, 14));
        jPanel9.add(jlDateEnd, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout(1, 5));

        jtfDateEnd.setText("PERIOD DATE");
        jtfDateEnd.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel10.add(jtfDateEnd, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.BorderLayout(5, 5));

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha del periodo");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbDateEnd, java.awt.BorderLayout.WEST);

        jPanel10.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel9);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jlQty.setText("Cantidad: *"); // NOI18N
        jlQty.setPreferredSize(new java.awt.Dimension(90, 14));
        jPanel5.add(jlQty, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.BorderLayout(1, 5));

        jtfQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfQty.setText("0"); // NOI18N
        jtfQty.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel7.add(jtfQty, java.awt.BorderLayout.WEST);

        jPanel8.setLayout(new java.awt.BorderLayout(5, 5));

        jtfUnitSymbol.setEditable(false);
        jtfUnitSymbol.setText("UNIT");
        jtfUnitSymbol.setFocusable(false);
        jtfUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 20));
        jPanel8.add(jtfUnitSymbol, java.awt.BorderLayout.WEST);

        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel5);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-313)/2, (screenSize.height-200)/2, 313, 200);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldDateStart = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDateStart, jlDateStart);
        moFieldDateEnd = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDateEnd, jlDateEnd);
        moFieldQty = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQty, jlQty);

        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldQty);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDateStart.addActionListener(this);
        jbDateEnd.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfDateStart.requestFocus();
        }
    }

    private void actionSetDateStart() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateStart.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateStart.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateStart.requestFocus();
        }
    }

    private void actionSetDateEnd() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateEnd.requestFocus();
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbOK;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlQty;
    private javax.swing.JFormattedTextField jtfDateEnd;
    private javax.swing.JFormattedTextField jtfDateStart;
    private javax.swing.JTextField jtfQty;
    private javax.swing.JTextField jtfUnitSymbol;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moPeriod = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateStart.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        moFieldDateEnd.setFieldValue(miClient.getSessionXXX().getWorkingDate());

        jtfUnitSymbol.setColumns(4);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        erp.lib.form.SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        /*
        if (!validation.getIsError()) {
            // Validate accounting record period:

            if (moPeriod == null) {
                if (!SDataUtilities.isPeriodOpen(miClient, moFieldDateStart.getDateStart())) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_CLOSE);
                    validation.setComponent(jtfDateStart);
                }
                if (!validation.getIsError()) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_ORD_PER_VAL,
                            new Object[] { moFieldDateStart.getDateStart() },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("Ya existe un registro para este periodo.");
                        validation.setComponent(jtfDateStart);
                    }
                }
            }
            else {
                if (!SLibTimeUtilities.isBelongingToPeriod(moFieldDateStart.getDateStart(),
                        SLibTimeUtilities.getBeginOfMonth(moPeriod.getDateStart()),
                        SLibTimeUtilities.getEndOfMonth(moPeriod.getDateStart()))) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_DATE);
                    validation.setComponent(jtfDateStart);
                }
            }
        }
        */

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moPeriod = (SDataProductionOrderPeriod) registry;

        moFieldDateStart.setFieldValue(moPeriod.getDateStart());
        moFieldDateEnd.setFieldValue(moPeriod.getDateEnd());
        moFieldQty.setFieldValue(moPeriod.getQty());
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moPeriod == null) {
            moPeriod = new SDataProductionOrderPeriod();
        }

        moPeriod.setDateStart(moFieldDateStart.getDate());
        moPeriod.setDateEnd(moFieldDateEnd.getDate());
        moPeriod.setQty(moFieldQty.getDouble());
        moPeriod.setDbmsUnitSymbol(jtfUnitSymbol.getText());

        return moPeriod;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                jtfUnitSymbol.setText(value.toString());
                break;
            case 2:
                // Validate if is enabled 'save' button:

                if ((Integer) value < SDataConstantsSys.MFGS_ST_ORD_PROC) {
                    jbOK.setEnabled(true);
                }
                else {
                    jbOK.setEnabled(false);
                }

                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDateStart) {
                actionSetDateStart();
            }
            else if (button == jbDateEnd) {
                actionSetDateEnd();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusLost(FocusEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
