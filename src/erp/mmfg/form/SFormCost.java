/*
 *
 *
 * Created on 18 de agosto de 2009, 01:42 AM
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mmfg.data.SDataCost;
import erp.mmfg.data.SDataCostRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormCost extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataCost moCost;
    private erp.mmfg.data.SDataCostRow moCostRow;
    private erp.mmfg.form.SFormCostGangEmployee moFormCostGangEmployee;

    private erp.lib.form.SFormField moFieldWeekStart;
    private erp.lib.form.SFormField moFieldWeekEnd;
    private erp.lib.form.SFormField moFieldPkTypeCostObjectId;
    private erp.lib.form.SFormField moFieldPkCompanyBranchId;
    private erp.lib.form.SFormField moFieldPkEntityId_n;
    private erp.lib.form.SFormField moFieldPkLineId_n;
    private erp.lib.form.SFormField moFieldPkProductionOrderId_n;

    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moEntriesPane;

    private boolean mbGang;
    private java.util.Vector<erp.mmfg.data.SDataCost> mvCostDel;

    /** Creates new form DFormCompany */
    public SFormCost(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_COST;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpHead = new javax.swing.JPanel();
        jPanel52 = new javax.swing.JPanel();
        jlWeekStart = new javax.swing.JLabel();
        jtfWeekStart = new javax.swing.JFormattedTextField();
        jlDummy3 = new javax.swing.JLabel();
        jbWeekStart = new javax.swing.JButton();
        jPanel53 = new javax.swing.JPanel();
        jlWeekEnd = new javax.swing.JLabel();
        jtfWeekEnd = new javax.swing.JFormattedTextField();
        jlDummy4 = new javax.swing.JLabel();
        jbWeekEnd = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlPkTypeCostObjectId = new javax.swing.JLabel();
        jcbPkTypeCostObjectId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jlPkCompanyBranchId = new javax.swing.JLabel();
        jcbPkCompanyBranchId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy1 = new javax.swing.JLabel();
        jbPkCompanyBranchId = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlPkEntityId_n = new javax.swing.JLabel();
        jcbPkEntityId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy2 = new javax.swing.JLabel();
        jbPkEntityId_n = new javax.swing.JButton();
        jPanel51 = new javax.swing.JPanel();
        jlPkLineId_n = new javax.swing.JLabel();
        jcbPkLineId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy6 = new javax.swing.JLabel();
        jbPkLineId_n = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlPkProductionOrderId_n = new javax.swing.JLabel();
        jcbPkProductionOrderId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy5 = new javax.swing.JLabel();
        jbPkProductionOrderId_n = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jlDbmsEmployeer = new javax.swing.JLabel();
        jtfDbmsEmployeer = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpType = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbGangAdd = new javax.swing.JButton();
        jbGangDelete = new javax.swing.JButton();
        jbEmployeeAdd = new javax.swing.JButton();
        jbEmployeeDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jlInformation = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Documento control de horas trabajadas"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        jpHead.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpHead.setLayout(new java.awt.GridLayout(9, 1));

        jPanel52.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlWeekStart.setText("Semana comienza: *");
        jlWeekStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel52.add(jlWeekStart);

        jtfWeekStart.setText("WEEK_START");
        jtfWeekStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jtfWeekStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfWeekStartFocusLost(evt);
            }
        });
        jPanel52.add(jtfWeekStart);

        jlDummy3.setText("jLabel1");
        jlDummy3.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel52.add(jlDummy3);

        jbWeekStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbWeekStart.setToolTipText("Seleccionar semana comienza");
        jbWeekStart.setFocusable(false);
        jbWeekStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel52.add(jbWeekStart);

        jpHead.add(jPanel52);

        jPanel53.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlWeekEnd.setText("Semana termina:");
        jlWeekEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel53.add(jlWeekEnd);

        jtfWeekEnd.setEditable(false);
        jtfWeekEnd.setText("WEEK_END");
        jtfWeekEnd.setFocusable(false);
        jtfWeekEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel53.add(jtfWeekEnd);

        jlDummy4.setText("jLabel1");
        jlDummy4.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel53.add(jlDummy4);

        jbWeekEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbWeekEnd.setToolTipText("Seleccionar semana termina");
        jbWeekEnd.setEnabled(false);
        jbWeekEnd.setFocusable(false);
        jbWeekEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel53.add(jbWeekEnd);

        jpHead.add(jPanel53);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkTypeCostObjectId.setText("Tipo objeto costo: *");
        jlPkTypeCostObjectId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlPkTypeCostObjectId);

        jcbPkTypeCostObjectId.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbPkTypeCostObjectId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkTypeCostObjectIdItemStateChanged(evt);
            }
        });
        jPanel4.add(jcbPkTypeCostObjectId);

        jlDummy.setText("jLabel1");
        jlDummy.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel4.add(jlDummy);

        jpHead.add(jPanel4);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkCompanyBranchId.setText("Sucursal: *");
        jlPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPkCompanyBranchId);

        jcbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbPkCompanyBranchId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkCompanyBranchIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbPkCompanyBranchId);

        jlDummy1.setText("jLabel1");
        jlDummy1.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel3.add(jlDummy1);

        jbPkCompanyBranchId.setText("...");
        jbPkCompanyBranchId.setToolTipText("Seleccionar sucursal");
        jbPkCompanyBranchId.setFocusable(false);
        jbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbPkCompanyBranchId);

        jpHead.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkEntityId_n.setText("Planta:");
        jlPkEntityId_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPkEntityId_n);

        jcbPkEntityId_n.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbPkEntityId_n.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkEntityId_nItemStateChanged(evt);
            }
        });
        jPanel5.add(jcbPkEntityId_n);

        jlDummy2.setText("jLabel1");
        jlDummy2.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel5.add(jlDummy2);

        jbPkEntityId_n.setText("...");
        jbPkEntityId_n.setToolTipText("Seleccionar planta");
        jbPkEntityId_n.setFocusable(false);
        jbPkEntityId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPkEntityId_n);

        jpHead.add(jPanel5);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkLineId_n.setText("Línea:");
        jlPkLineId_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel51.add(jlPkLineId_n);

        jcbPkLineId_n.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel51.add(jcbPkLineId_n);

        jlDummy6.setText("jLabel1");
        jlDummy6.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel51.add(jlDummy6);

        jbPkLineId_n.setText("...");
        jbPkLineId_n.setToolTipText("Seleccionar línea");
        jbPkLineId_n.setFocusable(false);
        jbPkLineId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel51.add(jbPkLineId_n);

        jpHead.add(jPanel51);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkProductionOrderId_n.setText("Orden producción:");
        jlPkProductionOrderId_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPkProductionOrderId_n);

        jcbPkProductionOrderId_n.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jcbPkProductionOrderId_n);

        jlDummy5.setText("jLabel1");
        jlDummy5.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel6.add(jlDummy5);

        jbPkProductionOrderId_n.setText("...");
        jbPkProductionOrderId_n.setToolTipText("Seleccionar orden de producción");
        jbPkProductionOrderId_n.setFocusable(false);
        jbPkProductionOrderId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbPkProductionOrderId_n);

        jpHead.add(jPanel6);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlDbmsEmployeer.setText("Empleado: ");
        jlDbmsEmployeer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlDbmsEmployeer);

        jtfDbmsEmployeer.setEditable(false);
        jtfDbmsEmployeer.setText("EMPLOYEER");
        jtfDbmsEmployeer.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel21.add(jtfDbmsEmployeer);

        jpHead.add(jPanel21);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel20.add(jckIsDeleted);

        jpHead.add(jPanel20);

        getContentPane().add(jpHead, java.awt.BorderLayout.PAGE_START);

        jpType.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados:"));
        jpType.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(771, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbGangAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_disc_add.gif"))); // NOI18N
        jbGangAdd.setToolTipText("Agregar cuadrilla");
        jbGangAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbGangAdd);

        jbGangDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_disc_rem.gif"))); // NOI18N
        jbGangDelete.setToolTipText("Eliminar cuadrilla");
        jbGangDelete.setEnabled(false);
        jbGangDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbGangDelete);

        jbEmployeeAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_bp_pay.gif"))); // NOI18N
        jbEmployeeAdd.setToolTipText("Agregar empleado");
        jbEmployeeAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbEmployeeAdd);

        jbEmployeeDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_bp_col.gif"))); // NOI18N
        jbEmployeeDelete.setToolTipText("Eliminar empleado");
        jbEmployeeDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbEmployeeDelete);

        jPanel1.setPreferredSize(new java.awt.Dimension(600, 23));
        jpNotesAction.add(jPanel1);

        jlInformation.setText("N: Hora normal, D: Hora doble, T: Hora triple");
        jlInformation.setPreferredSize(new java.awt.Dimension(240, 23));
        jpNotesAction.add(jlInformation);

        jpType.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpType, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-958)/2, (screenSize.height-634)/2, 958, 634);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkTypeCostObjectIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkTypeCostObjectIdItemStateChanged
        actionPkTypeCostObjectIdItemStateChanged();
    }//GEN-LAST:event_jcbPkTypeCostObjectIdItemStateChanged

    private void jcbPkEntityId_nItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkEntityId_nItemStateChanged
        actionPkEntityIdItemStateChanged();
    }//GEN-LAST:event_jcbPkEntityId_nItemStateChanged

    private void jcbPkCompanyBranchIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkCompanyBranchIdItemStateChanged
        actionPkCompanyBranchIdItemStateChanged();
    }//GEN-LAST:event_jcbPkCompanyBranchIdItemStateChanged

    private void jtfWeekStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfWeekStartFocusLost
        renderHoursGrid(moFieldWeekStart.getDate());
    }//GEN-LAST:event_jtfWeekStartFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();
        mvCostDel = new Vector<SDataCost>();

        moFieldWeekStart = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfWeekStart, jlWeekStart);
        moFieldWeekStart.setPickerButton(jbWeekStart);
        moFieldWeekEnd = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfWeekEnd, jlWeekEnd);
        moFieldWeekEnd.setPickerButton(jbWeekEnd);
        moFieldPkTypeCostObjectId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkTypeCostObjectId, jlPkTypeCostObjectId);
        moFieldPkCompanyBranchId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCompanyBranchId, jlPkCompanyBranchId);
        moFieldPkCompanyBranchId.setPickerButton(jbPkCompanyBranchId);
        moFieldPkEntityId_n = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkEntityId_n, jlPkEntityId_n);
        moFieldPkEntityId_n.setPickerButton(jbPkEntityId_n);
        moFieldPkLineId_n = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkLineId_n, jlPkLineId_n);
        moFieldPkLineId_n.setPickerButton(jbPkLineId_n);
        moFieldPkProductionOrderId_n = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkProductionOrderId_n, jlPkProductionOrderId_n);
        moFieldPkProductionOrderId_n.setPickerButton(jbPkProductionOrderId_n);

        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldWeekStart);
        mvFields.add(moFieldWeekEnd);
        mvFields.add(moFieldPkTypeCostObjectId);
        mvFields.add(moFieldPkCompanyBranchId);
        mvFields.add(moFieldPkEntityId_n);
        mvFields.add(moFieldPkLineId_n);
        mvFields.add(moFieldPkProductionOrderId_n);

        mvFields.add(moFieldIsDeleted);

        jbWeekStart.addActionListener(this);
        jbWeekEnd.addActionListener(this);
        jbGangAdd.addActionListener(this);
        jbGangDelete.addActionListener(this);
        jbEmployeeAdd.addActionListener(this);
        jbEmployeeDelete.addActionListener(this);
        jbPkCompanyBranchId.addActionListener(this);
        jbPkEntityId_n.addActionListener(this);
        jbPkLineId_n.addActionListener(this);
        jbPkProductionOrderId_n.addActionListener(this);
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        mbGang = true;
        moFormCostGangEmployee = new SFormCostGangEmployee(miClient);
        moEntriesPane = new STablePane(miClient);
        moEntriesPane.setDoubleClickAction(this, "publicActionTypeEdit");
        jpType.add(moEntriesPane, BorderLayout.CENTER);

        renderHoursGrid(miClient.getSessionXXX().getWorkingDate());

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jtfWeekStart.isEnabled()) jtfWeekStart.requestFocus();
        }
    }

    private void actionPkTypeCostObjectIdItemStateChanged() {
        if (jcbPkTypeCostObjectId.getSelectedIndex() > 0) {
            switch (moFieldPkTypeCostObjectId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.MFGS_TP_COST_ORD:
                    jcbPkEntityId_n.setEnabled(false);
                    jbPkEntityId_n.setEnabled(false);
                    jcbPkLineId_n.setEnabled(false);
                    jbPkLineId_n.setEnabled(false);
                    jcbPkProductionOrderId_n.setEnabled(true);
                    jbPkProductionOrderId_n.setEnabled(true);
                    SFormUtilities.populateComboBox(miClient, jcbPkProductionOrderId_n, SDataConstants.MFG_ORD, new Object[] { "" + SDataConstantsSys.MFGS_ST_ORD_PROC, SDataConstants.MFGX_ORD_MAIN_NA, false });
                    break;
                case SDataConstantsSys.MFGS_TP_COST_LINE:
                    jcbPkEntityId_n.setEnabled(true);
                    jbPkEntityId_n.setEnabled(true);
                    jcbPkLineId_n.setEnabled(true);
                    jbPkLineId_n.setEnabled(true);
                    jcbPkProductionOrderId_n.setEnabled(false);
                    jbPkProductionOrderId_n.setEnabled(false);

                    if (jcbPkCompanyBranchId.getSelectedIndex() > 0) {
                        SFormUtilities.populateComboBox(miClient, jcbPkEntityId_n, SDataConstants.CFGU_COB_ENT, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_PLANT });
                    }

                    if (jcbPkEntityId_n.getSelectedIndex() > 0) {
                        SFormUtilities.populateComboBox(miClient, jcbPkLineId_n, SDataConstants.MFG_LINE, new int[] { moFieldPkEntityId_n.getKeyAsIntArray()[0], moFieldPkEntityId_n.getKeyAsIntArray()[1] } );
                    }
                    break;
                case SDataConstantsSys.MFGS_TP_COST_PLT:
                    jcbPkEntityId_n.setEnabled(true);
                    jbPkEntityId_n.setEnabled(true);
                    jcbPkLineId_n.setEnabled(false);
                    jbPkLineId_n.setEnabled(false);
                    jcbPkProductionOrderId_n.setEnabled(false);
                    jbPkProductionOrderId_n.setEnabled(false);

                    if (jcbPkCompanyBranchId.getSelectedIndex() > 0) {
                        SFormUtilities.populateComboBox(miClient, jcbPkEntityId_n, SDataConstants.CFGU_COB_ENT, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_PLANT });
                    }
                    break;
                case SDataConstantsSys.MFGS_TP_COST_COB:
                    jcbPkEntityId_n.setEnabled(false);
                    jbPkEntityId_n.setEnabled(false);
                    jcbPkLineId_n.setEnabled(false);
                    jbPkLineId_n.setEnabled(false);
                    jcbPkProductionOrderId_n.setEnabled(false);
                    jbPkProductionOrderId_n.setEnabled(false);
            }
        }
    }

    private void actionPkCompanyBranchIdItemStateChanged() {
        switch (moFieldPkTypeCostObjectId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.MFGS_TP_COST_PLT:
            case SDataConstantsSys.MFGS_TP_COST_LINE:
                SFormUtilities.populateComboBox(miClient, jcbPkEntityId_n, SDataConstants.CFGU_COB_ENT, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_PLANT });
                break;
        }
    }

    private void actionPkEntityIdItemStateChanged() {
        if (moFieldPkTypeCostObjectId.getKeyAsIntArray()[0] == SDataConstantsSys.MFGS_TP_COST_LINE) {
            SFormUtilities.populateComboBox(miClient, jcbPkLineId_n, SDataConstants.MFG_LINE, moFieldPkEntityId_n.getKey());
        }
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldPkCompanyBranchId, new int [] { miClient.getSessionXXX().getCurrentCompany().getPkCompanyId() });
    }

    private void actionPkEntityId_n() {
        miClient.pickOption(SDataConstants.CFGU_COB_ENT, moFieldPkEntityId_n, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_PLANT });
    }

    private void actionPkLineId_n() {
        miClient.pickOption(SDataConstants.MFG_LINE, moFieldPkLineId_n, moFieldPkEntityId_n.getKeyAsIntArray());
    }

    private void actionPkProductionOrderId_n() {
        miClient.pickOption(SDataConstants.MFG_ORD, moFieldPkProductionOrderId_n, new Object[] { "" + SDataConstantsSys.MFGS_ST_ORD_PROC, SDataConstants.MFGX_ORD_MAIN_NA, false });
    }

    private void actionWeekStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldWeekStart.getDate(), moFieldWeekStart);
        moFieldWeekEnd.setDate(SLibTimeUtilities.addDate(moFieldWeekStart.getDate(), 0, 0, 6));
        renderHoursGrid(moFieldWeekStart.getDate());
    }

    private void actionWeekEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldWeekEnd.getDate(), moFieldWeekEnd);
    }

    private void renderHoursGrid(java.util.Date oDate) {
        int i=0;
        int day=0;
        int dayOfWeek=0;
        String[] asDays = SLibTimeUtilities.createDaysOfWeekStd(1);
        GregorianCalendar calendar = new GregorianCalendar();
        STableColumnForm tableColumns[] = new STableColumnForm[22];

        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado/Entidad", 150);
        asDays = SLibTimeUtilities.createDaysOfWeekStd(Calendar.SHORT);
        calendar.setTime(oDate);
        dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        for(day=0; day<asDays.length; day++) {

            tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE,
                    "N " + asDays[dayOfWeek-1].toLowerCase() + " " + miClient.getSessionXXX().getFormatters().getDateFormat().format(oDate).toString(), 70);
            tableColumns[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            tableColumns[i++].setEditable(true);

            tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE,
                    "D " + asDays[dayOfWeek-1].toLowerCase() + " " + miClient.getSessionXXX().getFormatters().getDateFormat().format(oDate).toString(), 70);
            tableColumns[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            tableColumns[i++].setEditable(true);

            tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE,
                    "T " + asDays[dayOfWeek-1].toLowerCase() + " " + miClient.getSessionXXX().getFormatters().getDateFormat().format(oDate).toString(), 70);
            tableColumns[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            tableColumns[i++].setEditable(true);

            if (dayOfWeek+1>7) {
                dayOfWeek = 1;
            }
            else {
                dayOfWeek++;
            }

            oDate = SLibTimeUtilities.addDate(oDate, 0, 0, 1);
        }

        for (i=0; i<tableColumns.length; i++) {

            // Remove firts column, because will be add new column to end of the table:

            if (moEntriesPane.getTableGuiColumnCount() > 21) {
                moEntriesPane.removeTableColumn(1);
            }

            moEntriesPane.addTableColumn(tableColumns[i]);
        }

        moEntriesPane.createTable(null);
        jpType.setVisible(true);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_FORM_CLOSE) == JOptionPane.YES_OPTION) {
            mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
            setVisible(false);
        }
    }

    private void actionEntryNew() {
        boolean b=false;
        int i=0;
        int j=0;
        int k=0;
        int nPkEntityId=0;
        Object[] oEmployee =null;
        Vector<Object[]> nvEmployees=null;
        Vector<Object[]> nvEmployeesAux=null;
        Date tDateWeek = moFieldWeekStart.getDate();

        SDataCost oCost = null;
        SDataCost oCostRow = null;
        SDataBizPartner oBizPartner = null;

        if (jcbPkCompanyBranchId.getSelectedIndex() < 0) {
            miClient.showMsgBoxWarning("Favor de seleccionar la sucursal.");
            jcbPkCompanyBranchId.requestFocus();
        }
        else {
            moFormCostGangEmployee.formReset();
            moFormCostGangEmployee.setValue(1, mbGang);
            moFormCostGangEmployee.setValue(2, jcbPkCompanyBranchId.getSelectedItem().toString());
            moFormCostGangEmployee.formRefreshCatalogues();
            moFormCostGangEmployee.setVisible(true);
            if (moFormCostGangEmployee.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {

                // Read if value is employee id or gang id:

                nPkEntityId = (Integer) moFormCostGangEmployee.getValue(1);

                // Read employee or employees:

                if (mbGang) {
                    try {
                        nvEmployeesAux = SDataUtilities.obtainEmployees(miClient, nPkEntityId);

                        // Validate if gang entry isn´t in grid:

                        if (moEntriesPane.getTableGuiRowCount()>0 && nvEmployeesAux.size()>0) {
                            nvEmployees = new Vector<Object[]>();

                            for (i=0; i<nvEmployeesAux.size(); i++) {
                                oEmployee = nvEmployeesAux.get(i);

                                for (j=0; j<moEntriesPane.getTableGuiRowCount(); j++) {
                                    oCost = (SDataCost) moEntriesPane.getTableRow(j).getData();
                                    b=false;

                                    if (oCost.getDbmsCost().get(0).getPkBizPartnerId() == (Integer)((Object[])oEmployee)[0]) {
                                        b=true;
                                        break;
                                    }
                                }

                                if (!b) {
                                    nvEmployees.add(oEmployee);
                                }
                            }
                        }
                        else {
                            nvEmployees = nvEmployeesAux;
                        }
                    }
                    catch (Exception e) {
                        SLibUtilities.renderException(this, e);
                    }
                }
                else {
                    nvEmployees = new Vector<Object[]>();
                    oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { nPkEntityId }, SLibConstants.EXEC_MODE_VERBOSE);

                    // Validate if gang entry isn´t in grid:

                    for (i=0; i<moEntriesPane.getTableGuiRowCount(); i++) {
                        oCost = (SDataCost) moEntriesPane.getTableRow(i).getData();

                        if (oCost.getDbmsCost().get(0).getPkBizPartnerId() == nPkEntityId) {
                            miClient.showMsgBoxWarning("El empleado '" + oCost.getDbmsCost().get(0).getDbmsBizPartner() + "' ya existe en la lista.");
                            b=true;
                            break;
                        }
                    }

                    if (!b) {
                        if (oBizPartner != null) {
                            nvEmployees.add(new Object[] { nPkEntityId, oBizPartner.getBizPartner() });
                        }
                        else {
                            miClient.showMsgBoxWarning("Error, no se encontro la información del empleado.");
                        }
                    }
                }

                // Create records hours with zero (type hour one with eight):

                for (i=0; i<nvEmployees.size(); i++) {

                    // Days:

                    oCostRow = new SDataCost();
                    tDateWeek = moFieldWeekStart.getDate();
                    for (j=1; j<8; j++) {

                        // Type hour:

                        for (k=1; k<4; k++) {

                            oEmployee = nvEmployees.get(i);

                            oCost = new SDataCost();

                            oCost.setPkYearId(SLibTimeUtilities.digestYear(moFieldWeekStart.getDate())[0]);
                            oCost.setPkTypeCostObjectId(moFieldPkTypeCostObjectId.getKeyAsIntArray()[0]);
                            oCost.setPkRefCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);

                            // Type of object cost:

                            switch (moFieldPkTypeCostObjectId.getKeyAsIntArray()[0]) {
                                case SDataConstantsSys.MFGS_TP_COST_ORD:
                                    oCost.setPkRefReferenceId(moFieldPkProductionOrderId_n.getKeyAsIntArray()[0]);
                                    oCost.setPkRefEntityId(moFieldPkProductionOrderId_n.getKeyAsIntArray()[1]);
                                    break;
                                case SDataConstantsSys.MFGS_TP_COST_LINE:
                                    oCost.setPkRefReferenceId(moFieldPkLineId_n.getKeyAsIntArray()[1]);
                                    oCost.setPkRefEntityId(moFieldPkLineId_n.getKeyAsIntArray()[2]);
                                    break;
                                case SDataConstantsSys.MFGS_TP_COST_PLT:
                                    oCost.setPkRefReferenceId(moFieldPkEntityId_n.getKeyAsIntArray()[0]);
                                    oCost.setPkRefEntityId(moFieldPkEntityId_n.getKeyAsIntArray()[1]);
                                    break;
                            }

                            oCost.setPkBizPartnerId((Integer)((Object[])oEmployee)[0]);
                            oCost.setPkDateId(tDateWeek);
                            oCost.setPkTypeHourId(k);

                            if (k==1) {
                                oCost.setQuantity(8);
                            }
                            else {
                                oCost.setQuantity(0);
                            }

                            oCost.setIsDeleted(false);
                            oCost.setDbmsType(mnFormType);
                            oCost.setDbmsBizPartner((String)((Object[])oEmployee)[1]);
                            oCostRow.getDbmsCost().add(oCost);
                            moCost.getDbmsCost().add(oCost);
                        }

                        // Increase a day:

                        tDateWeek = SLibTimeUtilities.addDate(tDateWeek, 0, 0, 1);
                    }

                    moEntriesPane.addTableRow(new SDataCostRow(oCostRow));
                    moEntriesPane.renderTableRows();
                    moEntriesPane.setTableRowSelection(moEntriesPane.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    private void actionEntryDelete() {
        int i=0;
        int index=moEntriesPane.getTable().getSelectedRow();

        if (index != -1) {
            if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                moEntriesPane.removeTableRow(index);
                moEntriesPane.renderTableRows();

                // Remove cost from vector (remove 21 rows):

                for (i=0; i<21; i++) {
                    moCost.getDbmsCost().get(i+((index*21))).setIsDeleted(true);
                }

                i=0;
                while (i<moCost.getDbmsCost().size()) {
                    if (moCost.getDbmsCost().get(i).getIsDeleted()) {
                        mvCostDel.add(moCost.getDbmsCost().get(i));
                        moCost.getDbmsCost().remove(i);
                        i=0;
                    }
                    i++;
                }

                if (moEntriesPane.getTableGuiRowCount() > 0) {
                    moEntriesPane.setTableRowSelection(index<moEntriesPane.getTableGuiRowCount() ? index : moEntriesPane.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    public void publicActionTypeEdit() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbEmployeeAdd;
    private javax.swing.JButton jbEmployeeDelete;
    private javax.swing.JButton jbGangAdd;
    private javax.swing.JButton jbGangDelete;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkCompanyBranchId;
    private javax.swing.JButton jbPkEntityId_n;
    private javax.swing.JButton jbPkLineId_n;
    private javax.swing.JButton jbPkProductionOrderId_n;
    private javax.swing.JButton jbWeekEnd;
    private javax.swing.JButton jbWeekStart;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCompanyBranchId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkEntityId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkLineId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkProductionOrderId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkTypeCostObjectId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDbmsEmployeer;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlDummy4;
    private javax.swing.JLabel jlDummy5;
    private javax.swing.JLabel jlDummy6;
    private javax.swing.JLabel jlInformation;
    private javax.swing.JLabel jlPkCompanyBranchId;
    private javax.swing.JLabel jlPkEntityId_n;
    private javax.swing.JLabel jlPkLineId_n;
    private javax.swing.JLabel jlPkProductionOrderId_n;
    private javax.swing.JLabel jlPkTypeCostObjectId;
    private javax.swing.JLabel jlWeekEnd;
    private javax.swing.JLabel jlWeekStart;
    private javax.swing.JPanel jpHead;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JPanel jpType;
    private javax.swing.JTextField jtfDbmsEmployeer;
    private javax.swing.JFormattedTextField jtfWeekEnd;
    private javax.swing.JFormattedTextField jtfWeekStart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCost = new SDataCost();
        moCost.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        moEntriesPane.createTable(null);
        moEntriesPane.clearTableRows();

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldWeekStart.setDate(miClient.getSessionXXX().getWorkingDate());
        moFieldWeekEnd.setDate(SLibTimeUtilities.addDate(moFieldWeekStart.getDate(), 0, 0, 6));

        jtfWeekStart.setEditable(true);
        jbWeekStart.setEnabled(true);
        jcbPkTypeCostObjectId.setEnabled(true);
        jcbPkCompanyBranchId.setEnabled(true);
        jbPkCompanyBranchId.setEnabled(true);
        jcbPkEntityId_n.setEnabled(false);
        jbPkEntityId_n.setEnabled(false);
        jcbPkLineId_n.setEnabled(false);
        jbPkLineId_n.setEnabled(false);
        jcbPkProductionOrderId_n.setEnabled(false);
        jbPkProductionOrderId_n.setEnabled(false);
        jbEmployeeAdd.setEnabled(true);
        jbEmployeeDelete.setEnabled(true);
        jbGangAdd.setEnabled(true);
        jlDbmsEmployeer.setVisible(false);
        jtfDbmsEmployeer.setVisible(false);

        jckIsDeleted.setEnabled(false);
        moFieldPkCompanyBranchId.setKey(new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbPkTypeCostObjectId, SDataConstants.MFGS_TP_COST_OBJ);
        SFormUtilities.populateComboBox(miClient, jcbPkCompanyBranchId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCurrentCompany().getPkCompanyId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i=0;
        int j=0;
        SFormValidation validation = new SFormValidation();

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldWeekEnd.getDate().compareTo(moFieldWeekStart.getDate()) < 0) {
                validation.setMessage("La 'semana termina' debe ser mayor o igual a la 'semana comienza'.");
                validation.setComponent(jtfWeekStart);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i=0;
        int nPkBizPartnerId=0;
        int nPkReferenceCompanyBranchId=0;
        int nPkReferenceReferenceId=0;
        int nPkReferenceEntityId=0;
        String sReferenceRow = "";
        String sReferenceCost = "";

        SDataBizPartner oBizPartner = null;
        SDataCost oCostEmployee = null;
        SDataCostRow oCostRow=null;

        moCost = (SDataCost) registry;

        moFieldWeekStart.setFieldValue(moCost.getDbmsDateStart());
        moFieldWeekEnd.setFieldValue(moCost.getDbmsDateEnd());
        moFieldPkTypeCostObjectId.setFieldValue(new int[] { moCost.getPkTypeCostObjectId() });
        moFieldPkCompanyBranchId.setFieldValue(new int[] { moCost.getPkRefCompanyBranchId() });

        switch(moFieldPkTypeCostObjectId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.MFGS_TP_COST_ORD:
                moFieldPkProductionOrderId_n.setFieldValue(new int[] { moCost.getPkRefReferenceId(), moCost.getPkRefEntityId() });
                break;
            case SDataConstantsSys.MFGS_TP_COST_PLT:
                moFieldPkEntityId_n.setFieldValue(new int[] { moCost.getPkRefCompanyBranchId(), moCost.getPkRefReferenceId() });
                break;
            case SDataConstantsSys.MFGS_TP_COST_LINE:
                moFieldPkEntityId_n.setFieldValue(new int[] { moCost.getPkRefCompanyBranchId(), moCost.getPkRefReferenceId() });
                moFieldPkLineId_n.setFieldValue(new int[] { moCost.getPkRefCompanyBranchId(), moCost.getPkRefReferenceId(), moCost.getPkRefEntityId() });
                break;
        }
        moFieldIsDeleted.setFieldValue(moCost.getIsDeleted());

        // Render grid table:

        renderHoursGrid(moFieldWeekStart.getDate());
        if (moCost.getDbmsType() == SDataConstants.MFG_COST) {

            // Add all documents with the same employee for each row (employee) and column (day)  into the panel:

            oCostEmployee = new SDataCost();
            for (i=0; i<moCost.getDbmsCost().size(); i++) {
                if ((nPkBizPartnerId != 0 && nPkBizPartnerId != moCost.getDbmsCost().get(i).getPkBizPartnerId()) ||
                        i+1>=moCost.getDbmsCost().size()) {

                    if (i+1>=moCost.getDbmsCost().size()) {
                        oCostEmployee.getDbmsCost().add(moCost.getDbmsCost().get(i));
                        oCostRow = new SDataCostRow(oCostEmployee);
                        moEntriesPane.addTableRow(oCostRow);
                        break;
                    }
                    else {
                        oCostRow = new SDataCostRow(oCostEmployee);
                        moEntriesPane.addTableRow(oCostRow);
                        nPkBizPartnerId = 0;
                        oCostEmployee = new SDataCost();
                    }
                }

                if (nPkBizPartnerId == 0) {
                    nPkBizPartnerId = moCost.getDbmsCost().get(i).getPkBizPartnerId();
                }

                oCostEmployee.getDbmsCost().add(moCost.getDbmsCost().get(i));
            }

            jlDbmsEmployeer.setVisible(false);
            jtfDbmsEmployeer.setVisible(false);
        }
        else {
            // Add all documents with the same employee for each row (employee) and column (day)  into the panel:

            oCostEmployee = new SDataCost();
            for (i=0; i<moCost.getDbmsCost().size(); i++) {

                // Concat reference key for compare:

                sReferenceRow = "" + nPkReferenceCompanyBranchId + "" + nPkReferenceReferenceId + "" + nPkReferenceEntityId;
                sReferenceCost = "" + moCost.getDbmsCost().get(i).getPkRefCompanyBranchId() + "" + moCost.getDbmsCost().get(i).getPkRefReferenceId() + "" +  moCost.getDbmsCost().get(i).getPkRefEntityId();

                if ((sReferenceRow.compareTo("000") != 0 && sReferenceRow.compareTo(sReferenceCost) != 0) ||
                        i+1>=moCost.getDbmsCost().size()) {

                    if (i+1>=moCost.getDbmsCost().size()) {
                        oCostEmployee.getDbmsCost().add(moCost.getDbmsCost().get(i));
                        oCostRow = new SDataCostRow(oCostEmployee);
                        moEntriesPane.addTableRow(oCostRow);
                        break;
                    }
                    else {
                        oCostRow = new SDataCostRow(oCostEmployee);
                        moEntriesPane.addTableRow(oCostRow);
                        nPkReferenceCompanyBranchId = 0;
                        nPkReferenceReferenceId = 0;
                        nPkReferenceEntityId = 0;
                        oCostEmployee = new SDataCost();
                    }
                }

                if (nPkReferenceCompanyBranchId == 0 && nPkReferenceReferenceId == 0 && nPkReferenceEntityId == 0) {
                    nPkReferenceCompanyBranchId = moCost.getDbmsCost().get(i).getPkRefCompanyBranchId();
                    nPkReferenceReferenceId = moCost.getDbmsCost().get(i).getPkRefReferenceId();
                    nPkReferenceEntityId = moCost.getDbmsCost().get(i).getPkRefEntityId();
                }

                oCostEmployee.getDbmsCost().add(moCost.getDbmsCost().get(i));
            }

            jtfWeekStart.setEditable(false);
            jbWeekStart.setEnabled(false);
            jcbPkTypeCostObjectId.setEnabled(false);
            jcbPkCompanyBranchId.setEnabled(false);
            jbPkCompanyBranchId.setEnabled(false);
            jcbPkEntityId_n.setEnabled(false);
            jbPkEntityId_n.setEnabled(false);
            jcbPkLineId_n.setEnabled(false);
            jbPkLineId_n.setEnabled(false);
            jcbPkProductionOrderId_n.setEnabled(false);
            jbPkProductionOrderId_n.setEnabled(false);
            jbEmployeeAdd.setEnabled(false);
            jbEmployeeDelete.setEnabled(false);
            jbGangAdd.setEnabled(false);

            oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { moCost.getPkBizPartnerId() }, SLibConstants.EXEC_MODE_VERBOSE);

            if (jcbPkTypeCostObjectId.getSelectedIndex()>0) {
                jcbPkTypeCostObjectId.setSelectedIndex(0);
            }

            if (jcbPkLineId_n.getSelectedIndex()>0) {
                jcbPkLineId_n.setSelectedIndex(0);
            }

            if (jcbPkLineId_n.getSelectedIndex()>0) {
                jcbPkLineId_n.setSelectedIndex(0);
            }

            jlDbmsEmployeer.setVisible(true);
            jtfDbmsEmployeer.setVisible(true);
            jtfDbmsEmployeer.setText(oBizPartner != null ? oBizPartner.getBizPartner() : "(N/A)");
        }

        jckIsDeleted.setEnabled(true);
        mvCostDel.removeAllElements();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        int[] period = SLibTimeUtilities.digestYearMonth(moFieldWeekStart.getDate());
        int i=0;
        int j=0;
        int k=0;
        int nVector=0;
        int nVectorRow=0;

        if (moCost == null) {
                moCost = new SDataCost();
                moCost.setPkYearId(period[0]);
                moCost.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCost.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCost.setPkRefCompanyBranchId(moFieldPkTypeCostObjectId.getKeyAsIntArray()[0]);
        moCost.setIsDeleted(moFieldIsDeleted.getBoolean());

        nVector=1;
        for (i=0; i<moEntriesPane.getTableGuiRowCount(); i++) {

            nVectorRow=1;
            for (j=1; j<8; j++) {
                for(k=1; k<4; k++) {

                    moCost.getDbmsCost().get(nVector-1).setQuantity((Double) moEntriesPane.getTableRow(i).getValues().get(nVectorRow));
                    moCost.getDbmsCost().get(nVector-1).setFkUserNewId(moCost.getFkUserNewId());
                    moCost.getDbmsCost().get(nVector-1).setFkUserEditId(moCost.getFkUserEditId());
                    nVector++;
                    nVectorRow++;
                }
            }
        }

        // Add delete cost:

        for (i=0; i<mvCostDel.size(); i++) {
            moCost.getDbmsCost().add(mvCostDel.get(i));
        }

        return moCost;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:

                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkEntityId_n) {
                actionPkEntityId_n();
            }
            else if (button == jbPkLineId_n) {
                actionPkLineId_n();
            }
            else if (button == jbPkProductionOrderId_n) {
                actionPkProductionOrderId_n();
            }
            else if (button == jbGangAdd) {
                mbGang = true;
                actionEntryNew();
            }
            else if (button == jbEmployeeAdd) {
                mbGang = false;
                actionEntryNew();
            }
            else if (button == jbEmployeeDelete) {
                actionEntryDelete();
            }
            else if (button == jbPkCompanyBranchId) {
                actionFkCobId();
            }
            else if (button == jbWeekStart) {
                actionWeekStart();
            }
            else if (button == jbWeekEnd) {
                actionWeekEnd();
            }
        }
    }
}
