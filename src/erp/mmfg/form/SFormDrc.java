/*
 *
 *
 * Created on 18 de agosto de 2009, 01:42 AM
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.mfin.data.SDataRecord;
import erp.mmfg.data.SDataDrc;
import erp.mmfg.data.SDataDrcEntry;
import erp.mmfg.data.SDataDrcEntryHour;
import erp.mmfg.data.SDataDrcEntryRow;
import erp.mmfg.data.SDataProductionOrder;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormDrc extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataDrc moDrc;
    private erp.mmfg.data.SDataDrcEntry moDrcEntry;
    private erp.mmfg.data.SDataDrcEntryRow moDrcEntryRow;
    private erp.mmfg.form.SFormDrcEntry moFormDrcEntry;

    private erp.lib.form.SFormField moFieldFkCobId;
    private erp.lib.form.SFormField moFieldFkBpId;
    private erp.lib.form.SFormField moFieldNumber;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldWeekStart;
    private erp.lib.form.SFormField moFieldWeekEnd;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldIsCostDirect;

    private erp.lib.table.STablePane moPaneHours;

    private boolean mbDirectCost;
    private int mnFkGicId;
    private java.util.Vector<java.lang.String[]> mvEntryAccounts;

    /** Creates new form DFormCompany */
    public SFormDrc(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_DRC;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpHead = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlFkCobId = new javax.swing.JLabel();
        jcbFkCobId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy1 = new javax.swing.JLabel();
        jbFkCobId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlFkBizPartnerId = new javax.swing.JLabel();
        jcbFkBizPartnerId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy = new javax.swing.JLabel();
        jbFkBizPartnerId = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jPanel51 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jtfDate = new javax.swing.JFormattedTextField();
        jlDummy2 = new javax.swing.JLabel();
        jbDate = new javax.swing.JButton();
        jPanel52 = new javax.swing.JPanel();
        jlWeekStart = new javax.swing.JLabel();
        jtfWeekStart = new javax.swing.JFormattedTextField();
        jlDummy3 = new javax.swing.JLabel();
        jbWeekStart = new javax.swing.JButton();
        jPanel53 = new javax.swing.JPanel();
        jlWeekEnd = new javax.swing.JLabel();
        jtfWeekEnd = new javax.swing.JFormattedTextField();
        jlDummy4 = new javax.swing.JLabel();
        jbWeekEnd = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel21 = new javax.swing.JPanel();
        jckIsCostDirect = new javax.swing.JCheckBox();
        jpType = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbEntryNew = new javax.swing.JButton();
        jbEntryEdit = new javax.swing.JButton();
        jbEntryDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jlInformation = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Costeo directo/indirecto de mano de obra"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        jpHead.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpHead.setLayout(new java.awt.GridLayout(8, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlFkCobId.setText("Sucursal: *");
        jlFkCobId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlFkCobId);

        jcbFkCobId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel3.add(jcbFkCobId);

        jlDummy1.setText("jLabel1");
        jlDummy1.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel3.add(jlDummy1);

        jbFkCobId.setText("...");
        jbFkCobId.setToolTipText("Seleccionar sucursal");
        jbFkCobId.setFocusable(false);
        jbFkCobId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbFkCobId);

        jpHead.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlFkBizPartnerId.setText("Empleado: *");
        jlFkBizPartnerId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlFkBizPartnerId);

        jcbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(jcbFkBizPartnerId);

        jlDummy.setText("jLabel1");
        jlDummy.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel4.add(jlDummy);

        jbFkBizPartnerId.setText("...");
        jbFkBizPartnerId.setToolTipText("Seleccionar empleado");
        jbFkBizPartnerId.setFocusable(false);
        jbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkBizPartnerId);

        jpHead.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setText("NUMBER");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jtfNumber);

        jpHead.add(jPanel5);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlDate.setText("Fecha: *");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel51.add(jlDate);

        jtfDate.setText("DATE");
        jtfDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel51.add(jtfDate);

        jlDummy2.setText("jLabel1");
        jlDummy2.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel51.add(jlDummy2);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel51.add(jbDate);

        jpHead.add(jPanel51);

        jPanel52.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlWeekStart.setText("Semana comienza: *");
        jlWeekStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel52.add(jlWeekStart);

        jtfWeekStart.setText("WEEK_START");
        jtfWeekStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel52.add(jtfWeekStart);

        jlDummy3.setText("jLabel1");
        jlDummy3.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel52.add(jlDummy3);

        jbWeekStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbWeekStart.setToolTipText("Seleccionar semana comienza");
        jbWeekStart.setFocusable(false);
        jbWeekStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel52.add(jbWeekStart);

        jpHead.add(jPanel52);

        jPanel53.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlWeekEnd.setText("Semana termina: *");
        jlWeekEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel53.add(jlWeekEnd);

        jtfWeekEnd.setText("WEEK_END");
        jtfWeekEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel53.add(jtfWeekEnd);

        jlDummy4.setText("jLabel1");
        jlDummy4.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel53.add(jlDummy4);

        jbWeekEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbWeekEnd.setToolTipText("Seleccionar semana termina");
        jbWeekEnd.setFocusable(false);
        jbWeekEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel53.add(jbWeekEnd);

        jpHead.add(jPanel53);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel20.add(jckIsDeleted);

        jpHead.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jckIsCostDirect.setText("Costo directo");
        jckIsCostDirect.setEnabled(false);
        jckIsCostDirect.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel21.add(jckIsCostDirect);

        jpHead.add(jPanel21);

        getContentPane().add(jpHead, java.awt.BorderLayout.PAGE_START);

        jpType.setBorder(javax.swing.BorderFactory.createTitledBorder("Horas por día:"));
        jpType.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(771, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbEntryNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbEntryNew.setToolTipText("Crear");
        jbEntryNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbEntryNew);

        jbEntryEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEntryEdit.setToolTipText("Modificar");
        jbEntryEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbEntryEdit);

        jbEntryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbEntryDelete.setToolTipText("Eliminar [Ctrl+D]");
        jbEntryDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbEntryDelete);

        jPanel1.setPreferredSize(new java.awt.Dimension(625, 23));
        jpNotesAction.add(jPanel1);

        jlInformation.setText("N: Hora normal, D: Hora doble, T: Hora triple");
        jlInformation.setPreferredSize(new java.awt.Dimension(240, 23));
        jpNotesAction.add(jlInformation);

        jpType.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpType, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-958)/2, (screenSize.height-634)/2, 958, 634);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkCobId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCobId, jlFkCobId);
        moFieldFkCobId.setPickerButton(jbFkCobId);
        moFieldFkBpId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerId, jlFkBizPartnerId);
        moFieldFkBpId.setPickerButton(jbFkBizPartnerId);
        moFieldNumber = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfNumber, jlNumber);
        moFieldDate = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDate, jlDate);
        moFieldWeekStart = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfWeekStart, jlWeekStart);
        moFieldWeekStart.setPickerButton(jbWeekStart);
        moFieldWeekEnd = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfWeekEnd, jlWeekEnd);
        moFieldWeekEnd.setPickerButton(jbWeekEnd);
        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);
        moFieldIsCostDirect = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsCostDirect);

        mvFields.add(moFieldFkCobId);
        mvFields.add(moFieldFkBpId);
        mvFields.add(moFieldNumber);
        mvFields.add(moFieldDate);
        mvFields.add(moFieldWeekStart);
        mvFields.add(moFieldWeekEnd);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldIsCostDirect);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbEntryNew.addActionListener(this);
        jbEntryEdit.addActionListener(this);
        jbEntryDelete.addActionListener(this);
        jbFkCobId.addActionListener(this);
        jbFkBizPartnerId.addActionListener(this);
        jbDate.addActionListener(this);
        jbWeekStart.addActionListener(this);
        jbWeekEnd.addActionListener(this);

        moFormDrcEntry = new SFormDrcEntry(miClient);
        mvEntryAccounts = new Vector<java.lang.String[]>();
        moPaneHours = new STablePane(miClient);
        moPaneHours.setDoubleClickAction(this, "publicActionTypeEdit");
        jpType.add(moPaneHours, BorderLayout.CENTER);

        renderHoursGrid(miClient.getSessionXXX().getWorkingDate());

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkCobId.isEnabled()) jcbFkCobId.requestFocus();
        }
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCobId, null);
    }

    private void actionFkBpId() {
        miClient.pickOption(SDataConstants.BPSX_BP_SUP, moFieldFkBpId, null);
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDate.getDate(), moFieldDate);
    }

    private void actionWeekStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldWeekStart.getDate(), moFieldWeekStart);
        moFieldWeekEnd.setDate(SLibTimeUtilities.addDate(moFieldWeekStart.getDate(), 0, 0, 6));
        renderHoursGrid(moFieldWeekStart.getDate());
    }

    private void actionWeekEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldWeekEnd.getDate(), moFieldWeekEnd);
    }

    private void renderHoursGrid(java.util.Date oDate) {
        int i=0;
        int day=0;
        int dayOfWeek=0;
        String[] asDays = SLibTimeUtilities.createDaysOfWeekStd(1);
        GregorianCalendar calendar = new GregorianCalendar();
        STableColumnForm tableColumnsType[] = new STableColumnForm[22];

        tableColumnsType[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Orden Producción/Planta", 150);
        asDays = SLibTimeUtilities.createDaysOfWeekStd(Calendar.SHORT);
        calendar.setTime(oDate);
        dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        for(day=0; day<asDays.length; day++) {

            tableColumnsType[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE,
                    "N " + asDays[dayOfWeek-1].toLowerCase() + " " + miClient.getSessionXXX().getFormatters().getDateFormat().format(oDate).toString(), 70);
            tableColumnsType[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            tableColumnsType[i++].setEditable(true);

            tableColumnsType[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE,
                    "D " + asDays[dayOfWeek-1].toLowerCase() + " " + miClient.getSessionXXX().getFormatters().getDateFormat().format(oDate).toString(), 70);
            tableColumnsType[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            tableColumnsType[i++].setEditable(true);

            tableColumnsType[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE,
                    "T " + asDays[dayOfWeek-1].toLowerCase() + " " + miClient.getSessionXXX().getFormatters().getDateFormat().format(oDate).toString(), 70);
            tableColumnsType[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            tableColumnsType[i++].setEditable(true);

            if (dayOfWeek+1>7) {
                dayOfWeek = 1;
            }
            else {
                dayOfWeek++;
            }

            oDate = SLibTimeUtilities.addDate(oDate, 0, 0, 1);
        }

        for (i=0; i<tableColumnsType.length; i++) {

            // Remove firts column, because will be add new column to end of the table:

            if (moPaneHours.getTableGuiColumnCount() > 21) {
                moPaneHours.removeTableColumn(1);
            }

            moPaneHours.addTableColumn(tableColumnsType[i]);
        }

        moPaneHours.createTable(null);
        jpType.setVisible(true);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actioEntryNew(){
        int i=0;
        int j=0;
        java.util.Date tDateWeek = moFieldWeekStart.getDate();

        SDataDrcEntryHour oDrcEntryHour = null;

        if (jcbFkCobId.getSelectedIndex() < 0) {
            miClient.showMsgBoxWarning("Favor de seleccionar la sucursal.");
            jcbFkCobId.requestFocus();
        }
        else {

            moFormDrcEntry.formReset();
            moFormDrcEntry.setValue(1, moFieldFkCobId.getKeyAsIntArray()[0]);
            moFormDrcEntry.setValue(2, mbDirectCost);
            moFormDrcEntry.setValue(3, jcbFkCobId.getSelectedItem().toString());
            moFormDrcEntry.formRefreshCatalogues();
            moFormDrcEntry.setVisible(true);
            if (moFormDrcEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                moDrcEntry = (SDataDrcEntry) moFormDrcEntry.getRegistry();

                // Create records hours with zero:

                moDrcEntry.getDbmsDrcEntriesHours().removeAllElements();
                for (i=1; i<8; i++) {
                    for (j=1; j<4; j++) {

                        oDrcEntryHour = new SDataDrcEntryHour();

                        oDrcEntryHour.setPkDayId(tDateWeek);
                        oDrcEntryHour.setPkHourType(j);
                        oDrcEntryHour.setQuantity(0);

                        moDrcEntry.getDbmsDrcEntriesHours().add(oDrcEntryHour);
                    }

                    // Increase a day:

                    tDateWeek = SLibTimeUtilities.addDate(tDateWeek, 0, 0, 1);
                }

                moPaneHours.addTableRow(new SDataDrcEntryRow(moDrcEntry));
                moPaneHours.renderTableRows();
                moPaneHours.setTableRowSelection(moPaneHours.getTableGuiRowCount() - 1);
            }
        }
    }

    private void actionEntryEdit() {
        int index = moPaneHours.getTable().getSelectedRow();

        if (jcbFkCobId.getSelectedIndex() < 0) {
            miClient.showMsgBoxWarning("Favor de seleccionar la sucursal.");
            jcbFkCobId.requestFocus();
        }
        else {
            moFormDrcEntry.formReset();
            moFormDrcEntry.setValue(1, moFieldFkCobId.getKeyAsIntArray()[0]);
            moFormDrcEntry.setValue(2, mbDirectCost);
            moFormDrcEntry.setValue(3, jcbFkCobId.getSelectedItem().toString());
            moFormDrcEntry.formRefreshCatalogues();

            if (index != -1) {
                moDrcEntry = (SDataDrcEntry) moPaneHours.getTableRow(index).getData();
                moFormDrcEntry.setRegistry(moDrcEntry);
                moFormDrcEntry.setVisible(true);
                if (moFormDrcEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                    moDrcEntry = (SDataDrcEntry) moFormDrcEntry.getRegistry();

                    moPaneHours.setTableRow(moDrcEntryRow = new SDataDrcEntryRow(moDrcEntry), index);
                    moPaneHours.renderTableRows();
                }
            }
        }
    }

    private void actionEntryDelete() {
        int index = moPaneHours.getTable().getSelectedRow();

        if (index != -1) {
            if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                moPaneHours.removeTableRow(index);
                moPaneHours.renderTableRows();

                if (moPaneHours.getTableGuiRowCount() > 0) {
                    moPaneHours.setTableRowSelection(index < moPaneHours.getTableGuiRowCount() ? index : moPaneHours.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    public void publicActionTypeEdit() {
        actionEntryEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbEntryDelete;
    private javax.swing.JButton jbEntryEdit;
    private javax.swing.JButton jbEntryNew;
    private javax.swing.JButton jbFkBizPartnerId;
    private javax.swing.JButton jbFkCobId;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbWeekEnd;
    private javax.swing.JButton jbWeekStart;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkBizPartnerId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCobId;
    private javax.swing.JCheckBox jckIsCostDirect;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlDummy4;
    private javax.swing.JLabel jlFkBizPartnerId;
    private javax.swing.JLabel jlFkCobId;
    private javax.swing.JLabel jlInformation;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlWeekEnd;
    private javax.swing.JLabel jlWeekStart;
    private javax.swing.JPanel jpHead;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JPanel jpType;
    private javax.swing.JFormattedTextField jtfDate;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JFormattedTextField jtfWeekEnd;
    private javax.swing.JFormattedTextField jtfWeekStart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDrc = null;
        moPaneHours.createTable(null);
        moPaneHours.clearTableRows();

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldFkCobId.setKey(new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
        jcbFkBizPartnerId.setEnabled(true);
        jcbFkBizPartnerId.setFocusable(true);

        jbFkBizPartnerId.setEnabled(true);
        jbFkBizPartnerId.setFocusable(true);

        moFieldDate.setDate(miClient.getSessionXXX().getWorkingDate());
        moFieldWeekStart.setDate(miClient.getSessionXXX().getWorkingDate());
        moFieldWeekEnd.setDate(SLibTimeUtilities.addDate(moFieldWeekStart.getDate(), 0, 0, 6));

        mvEntryAccounts.clear();

        moFieldIsCostDirect.setFieldValue(mbDirectCost);
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCobId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getParamsCompany().getPkConfigCoId() });
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_EMP);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i=0;
        int j=0;
        SFormValidation validation = new SFormValidation();

        SDataProductionOrder oProductionOrder = null;

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldWeekEnd.getDate().compareTo(moFieldWeekStart.getDate()) < 0) {
                validation.setMessage("La 'semana termina' debe ser mayor o igual a la 'semana comienza'.");
                validation.setComponent(jtfWeekStart);
            }
        }

        if (!validation.getIsError()) {

            // Validate accounts:

            try {
                for (i=0; i<moPaneHours.getTableGuiRowCount(); i++) {

                    moDrcEntry = (SDataDrcEntry) moPaneHours.getTableRow(i).getData();

                    if (mbDirectCost) {

                        oProductionOrder = (SDataProductionOrder) SDataUtilities.readRegistry(miClient, SDataConstants.MFG_ORD, new int[] { moDrcEntry.getFkOrdYearId_n(), moDrcEntry.getFkOrdDocId_n() }, SLibConstants.EXEC_MODE_VERBOSE);
                        mvEntryAccounts.add(SDataUtilities.obtainAccountsCosts(miClient, new int[] { oProductionOrder.getFkCobId(), oProductionOrder.getFkEntityId() }, mbDirectCost));
                    }
                    else {

                        mvEntryAccounts.add(SDataUtilities.obtainAccountsCosts(miClient, new int[] { moDrcEntry.getFkCobId_n(), moDrcEntry.getFkEntId_n() }, mbDirectCost));
                    }

                    if (mvEntryAccounts.get(i)[0].toString().length() <=0 && mvEntryAccounts.get(i)[1].toString().length() <= 0) {
                        validation.setMessage("La sucursal '" + jcbFkCobId.getSelectedItem() + "' no tiene configuradas las cuentas contables para costos.\n");
                        validation.setComponent(jcbFkCobId);
                        break;
                    }
                }
            }
            catch (Exception e) {
                validation.setMessage("No fue posible encontrar las cuentas contables de los costos.\n" + e);
                validation.setComponent(jcbFkCobId);
            }
        }

        if (!validation.getIsError() && !mbDirectCost) {

            // Obtain gic's:

            try {
                mnFkGicId = SDataUtilities.obtainIndirectManufacturingCosts(miClient);

                if (mnFkGicId == 0) {
                    validation.setMessage("La sucursal '" + jcbFkCobId.getSelectedItem() + "' no tiene configurados los costos indirectos de fabricación.\n");
                    validation.setComponent(jcbFkCobId);
                }
            }
            catch (Exception e) {
                validation.setMessage("No fue posible encontrar los costos indirectos de fabricación.\n" + e);
                validation.setComponent(jcbFkCobId);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i=0;
        SDataDrcEntryRow oDrcEntryRow=null;

        moDrc = (erp.mmfg.data.SDataDrc) registry;

        moFieldFkCobId.setKey(new int[] { moDrc.getFkCompanyBranchId() });
        moFieldFkBpId.setKey(new int[] { moDrc.getFkBizPartnerId() });
        moFieldDate.setFieldValue(moDrc.getDate());
        moFieldNumber.setFieldValue(moDrc.getNumber());
        moFieldWeekStart.setFieldValue(moDrc.getWeekStart());
        moFieldWeekEnd.setFieldValue(moDrc.getWeekEnd());
        moFieldIsCostDirect.setFieldValue(moDrc.getIsCostDirect());
        moFieldIsDeleted.setFieldValue(moDrc.getIsDeleted());

        // Render grid table:

        renderHoursGrid(moDrc.getWeekStart());

        for (i=0; i<moDrc.getDbmsDrcEntry().size(); i++) {

            oDrcEntryRow = new SDataDrcEntryRow(moDrc.getDbmsDrcEntry().get(i));
            moPaneHours.addTableRow(oDrcEntryRow);
        }

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        int[] period = SLibTimeUtilities.digestYearMonth(moFieldDate.getDate());
        int i=0;
        int j=0;
        int k=0;
        int m=0;
        java.util.Date tDateWeek = moFieldWeekStart.getDate();

        SDataDrcEntry oDrcEntry = null;
        SDataDrcEntryHour oDrcEntryHour = null;
        SDataRecord oRecord = null;

        if (moDrc == null) {
                moDrc = new SDataDrc();
                moDrc.setPkYearId(period[0]);
                moDrc.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moDrc.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moDrc.setFkCompanyBranchId(moFieldFkCobId.getKeyAsIntArray()[0]);
        moDrc.setFkBizPartnerId(moFieldFkBpId.getKeyAsIntArray()[0]);
        moDrc.setDate(moFieldDate.getDate());
        moDrc.setNumber(moFieldNumber.getString());
        moDrc.setWeekStart(moFieldWeekStart.getDate());
        moDrc.setWeekEnd(moFieldWeekEnd.getDate());
        moDrc.setIsCostDirect(moFieldIsCostDirect.getBoolean());
        moDrc.setIsDeleted(moFieldIsDeleted.getBoolean());

        moDrc.getDbmsDrcEntry().removeAllElements();
        for (i=0; i<moPaneHours.getTableGuiRowCount(); i++) {

            m=1;
            tDateWeek = moFieldWeekStart.getDate();
            for (j=1; j<8; j++) {

                moDrcEntry = (SDataDrcEntry) moPaneHours.getTableRow(i).getData();

                oDrcEntry = new SDataDrcEntry();
                oDrcEntry.setPrimaryKey(new Object [] { moDrcEntry.getPkYearId(), moDrcEntry.getPkDocId(), moDrcEntry.getPkEntryId(), moDrcEntry.getPkDayId() });
                oDrcEntry.setPkEntryId(i+1);
                oDrcEntry.setPkDayId(tDateWeek);
                oDrcEntry.setFkCobId_n(moDrcEntry.getFkCobId_n());
                oDrcEntry.setFkEntId_n(moDrcEntry.getFkEntId_n());
                oDrcEntry.setFkOrdYearId_n(moDrcEntry.getFkOrdYearId_n());
                oDrcEntry.setFkOrdDocId_n(moDrcEntry.getFkOrdDocId_n());
                oDrcEntry.setFkCostGicId_n(mnFkGicId); // XXX Validate, how do I obtain 'CostGic'?
                oDrcEntry.setDbmsAccounts(mvEntryAccounts.get(i));

                // Check if document is new for create new policy:

                oRecord = new SDataRecord();

                oRecord.setPrimaryKey(new Object[] {
                    period[0], period[1],
                    miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsHqBranch().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId(),
                    "CP", 0 });
                moDrc.getDbmsRecords().add(oRecord);

                for(k=1; k<4; k++) {

                    oDrcEntryHour = new SDataDrcEntryHour();

                    oDrcEntryHour.setPkDayId(tDateWeek);
                    oDrcEntryHour.setPkHourType(k);
                    oDrcEntryHour.setQuantity((Double) moPaneHours.getTableRow(i).getValues().get(m));

                    /*oDrcEntryHour.setQuantity((Double) moPaneHours.getTableRow(i).getValues().get(
                            SLibTimeUtilities.getFirstDayOfWeekStd() == 1 ?
                            m+3>21 ? (m-18) : (m) :
                            m)); // Validate start of week and then calculate day for save quantity*/
                    m++;

                    oDrcEntry.getDbmsDrcEntriesHours().add(oDrcEntryHour);
                }

                moDrc.getDbmsDrcEntry().add(oDrcEntry);

                // Increase a day:

                tDateWeek = SLibTimeUtilities.addDate(tDateWeek, 0, 0, 1);
            }
        }

        return moDrc;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mbDirectCost = (Boolean) value;

                if (mbDirectCost) {
                    this.setTitle("Costeo directo de mano de obra");
                }
                else {
                    this.setTitle("Costeo indirecto de mano de obra");
                }
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbEntryNew){
                actioEntryNew();
            }
            else if (button == jbEntryEdit) {
                actionEntryEdit();
            }
            else if (button == jbEntryDelete) {
                actionEntryDelete();
            }
            else if (button == jbFkCobId) {
                actionFkCobId();
            }
            else if (button == jbFkBizPartnerId) {
                actionFkBpId();
            }
            else if (button == jbDate) {
                actionDate();
            }
            else if (button == jbWeekStart) {
                actionWeekStart();
            }
            else if (button == jbWeekEnd) {
                actionWeekEnd();
            }
        }
    }
}
