/*
 *
 *
 * Created on 18 de agosto de 2009, 01:42 AM
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mitm.data.SDataItem;
import erp.mmfg.data.SDataBom;
import erp.mmfg.data.SDataBomNotes;
import erp.mmfg.data.SDataBomNotesRow;
import erp.mmfg.data.SDataBomSubstitute;
import erp.mod.SModSysConsts;
import erp.mod.itm.db.SItmConsts;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JTextField;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author  Néstor Ávalos, Sergio Flores
 */
public class SFormBomLevels extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private int mnRootItemId;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataBom moBomLevel;
    private erp.lib.form.SFormField moFieldItemBom;
    private erp.lib.form.SFormField moFieldFkItemId;
    private erp.lib.form.SFormField moFieldQty;
    private erp.lib.form.SFormField moFieldPercentage;
    private erp.lib.form.SFormField moFieldCost;
    private erp.lib.form.SFormField moFieldDuration;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd_n;
    private erp.lib.form.SFormField moFieldLevel;
    private erp.lib.form.SFormField moFieldIsNotExplotion;
    private erp.lib.form.SFormField moFieldIsRequested;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldFkItemSubstituteId;
    private erp.lib.form.SFormField moFieldItemSubstitutePercentage;
    private erp.lib.form.SFormField moFieldItemSubstitutePercentageMax;

    private erp.lib.table.STablePane moBomNotesPane;

    private erp.mitm.data.SDataItem moItem;
    private erp.mitm.data.SDataItem moItemSubstitute;

    private double dQuantityTotal;
    private double dQuantityOld;

    private erp.lib.table.STablePaneGrid moBomLevelPane;

    /** Creates new form SFormBomLevels */
    public SFormBomLevels(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFGX_BOM_LEV;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jlLevel = new javax.swing.JLabel();
        jtfLevel = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlRootItem = new javax.swing.JLabel();
        jtfRootItem = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlFkItemId = new javax.swing.JLabel();
        jcbFkItemId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkItemId = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlQty = new javax.swing.JLabel();
        jtfQty = new javax.swing.JTextField();
        jtfDbmsQtyUnitSymbol = new javax.swing.JTextField();
        jPanel26 = new javax.swing.JPanel();
        jlPercentage = new javax.swing.JLabel();
        jtfPercentage = new javax.swing.JTextField();
        jPanel28 = new javax.swing.JPanel();
        jlCost = new javax.swing.JLabel();
        jtfCost = new javax.swing.JTextField();
        jtfDbmsQtyCostUnitSymbol = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlDuration = new javax.swing.JLabel();
        jtfDuration = new javax.swing.JTextField();
        jlHr = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbSetDateStart = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd_n = new javax.swing.JFormattedTextField();
        jbSetDateEnd_n = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jlFkItemSubstituteId = new javax.swing.JLabel();
        jcbFkItemSubstituteId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkItemSubstituteId = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        jlItemSubstitutePercentage = new javax.swing.JLabel();
        jtfItemSubstitutePercentage = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jlItemSubstitutePercentageMax = new javax.swing.JLabel();
        jtfItemSubstitutePercentageMax = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jckIsNotExplotion = new javax.swing.JCheckBox();
        jckIsRequested = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpNotes = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbLevelNotesNew = new javax.swing.JButton();
        jbLevelNotesEdit = new javax.swing.JButton();
        jbLevelNotesDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nivel"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(610, 355));
        jPanel3.setLayout(new java.awt.GridLayout(13, 0));

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLevel.setText("Nivel:");
        jlLevel.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlLevel);

        jtfLevel.setEditable(false);
        jtfLevel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfLevel.setText("0");
        jtfLevel.setFocusable(false);
        jtfLevel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jtfLevel);

        jPanel3.add(jPanel27);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRootItem.setText("Producto:");
        jlRootItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlRootItem);

        jtfRootItem.setEditable(false);
        jtfRootItem.setText("TOP LEVEL");
        jtfRootItem.setFocusable(false);
        jtfRootItem.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jtfRootItem);

        jPanel3.add(jPanel6);

        jPanel7.setPreferredSize(new java.awt.Dimension(544, 23));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkItemId.setForeground(java.awt.Color.blue);
        jlFkItemId.setText("Insumo: *");
        jlFkItemId.setPreferredSize(new java.awt.Dimension(100, 23));
        jlFkItemId.setRequestFocusEnabled(false);
        jPanel7.add(jlFkItemId);

        jcbFkItemId.setMaximumRowCount(16);
        jcbFkItemId.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbFkItemId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkItemIdItemStateChanged(evt);
            }
        });
        jPanel7.add(jcbFkItemId);

        jbFkItemId.setText("...");
        jbFkItemId.setToolTipText("Seleccionar insumo");
        jbFkItemId.setFocusable(false);
        jbFkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbFkItemId);

        jPanel3.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQty.setText("Cantidad:");
        jlQty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlQty);

        jtfQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfQty.setText("0");
        jtfQty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfQty);

        jtfDbmsQtyUnitSymbol.setEditable(false);
        jtfDbmsQtyUnitSymbol.setFocusable(false);
        jtfDbmsQtyUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel9.add(jtfDbmsQtyUnitSymbol);

        jPanel3.add(jPanel9);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPercentage.setText("Porcentaje:");
        jlPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlPercentage);

        jtfPercentage.setEditable(false);
        jtfPercentage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPercentage.setText("0");
        jtfPercentage.setFocusable(false);
        jtfPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jtfPercentage);

        jPanel3.add(jPanel26);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCost.setText("Costo:");
        jlCost.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlCost);

        jtfCost.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCost.setText("0");
        jtfCost.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jtfCost);

        jtfDbmsQtyCostUnitSymbol.setEditable(false);
        jtfDbmsQtyCostUnitSymbol.setFocusable(false);
        jtfDbmsQtyCostUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel28.add(jtfDbmsQtyCostUnitSymbol);

        jPanel3.add(jPanel28);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDuration.setText("Duración: ");
        jlDuration.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDuration);

        jtfDuration.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDuration.setText("0");
        jtfDuration.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfDuration);

        jlHr.setText(" hr");
        jlHr.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jlHr);

        jPanel3.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Inicio vigencia: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jftDateStart);

        jbSetDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbSetDateStart.setToolTipText("Seleccionar fecha inicial vigencia");
        jbSetDateStart.setFocusable(false);
        jbSetDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbSetDateStart);

        jPanel3.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fin vigencia: ");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jlDateEnd.setRequestFocusEnabled(false);
        jPanel12.add(jlDateEnd);

        jftDateEnd_n.setText("dd/mm/yyyy");
        jftDateEnd_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jftDateEnd_n);

        jbSetDateEnd_n.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbSetDateEnd_n.setToolTipText("Seleccionar fecha final vigencia");
        jbSetDateEnd_n.setFocusable(false);
        jbSetDateEnd_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbSetDateEnd_n);

        jPanel3.add(jPanel12);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkItemSubstituteId.setText("Insumo sustituto: ");
        jlFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(100, 23));
        jlFkItemSubstituteId.setRequestFocusEnabled(false);
        jPanel19.add(jlFkItemSubstituteId);

        jcbFkItemSubstituteId.setMaximumRowCount(16);
        jcbFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbFkItemSubstituteId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkItemSubstituteIdItemStateChanged(evt);
            }
        });
        jPanel19.add(jcbFkItemSubstituteId);

        jbFkItemSubstituteId.setText("...");
        jbFkItemSubstituteId.setToolTipText("Seleccionar insumo");
        jbFkItemSubstituteId.setFocusable(false);
        jbFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbFkItemSubstituteId);

        jPanel3.add(jPanel19);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemSubstitutePercentage.setText("Mezcla sugerida:");
        jlItemSubstitutePercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlItemSubstitutePercentage);

        jtfItemSubstitutePercentage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfItemSubstitutePercentage.setText("0");
        jtfItemSubstitutePercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jtfItemSubstitutePercentage);

        jPanel3.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemSubstitutePercentageMax.setText("Mezcla máxima:");
        jlItemSubstitutePercentageMax.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlItemSubstitutePercentageMax);

        jtfItemSubstitutePercentageMax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfItemSubstitutePercentageMax.setText("0");
        jtfItemSubstitutePercentageMax.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jtfItemSubstitutePercentageMax);

        jPanel3.add(jPanel30);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckIsNotExplotion.setText("No explosionar");
        jckIsNotExplotion.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jckIsNotExplotion);

        jckIsRequested.setText("Requerido en movimientos de inventarios");
        jckIsRequested.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(jckIsRequested);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jckIsDeleted);

        jPanel3.add(jPanel13);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jpNotes.setBorder(javax.swing.BorderFactory.createTitledBorder("Notas:"));
        jpNotes.setPreferredSize(new java.awt.Dimension(350, 43));
        jpNotes.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(771, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbLevelNotesNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbLevelNotesNew.setToolTipText("Crear");
        jbLevelNotesNew.setFocusable(false);
        jbLevelNotesNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbLevelNotesNew);

        jbLevelNotesEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbLevelNotesEdit.setToolTipText("Modificar");
        jbLevelNotesEdit.setFocusable(false);
        jbLevelNotesEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbLevelNotesEdit);

        jbLevelNotesDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbLevelNotesDelete.setToolTipText("Eliminar");
        jbLevelNotesDelete.setEnabled(false);
        jbLevelNotesDelete.setFocusable(false);
        jbLevelNotesDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbLevelNotesDelete);

        jpNotes.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpNotes, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(795, 547));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkItemIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkItemIdItemStateChanged
        itemStateChangedFkItemId();
    }//GEN-LAST:event_jcbFkItemIdItemStateChanged

    private void jcbFkItemSubstituteIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkItemSubstituteIdItemStateChanged
        itemStateChangedFkItemSubstituteId();
    }//GEN-LAST:event_jcbFkItemSubstituteIdItemStateChanged

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm tableColumnsNotes[];

        mvFields = new Vector<SFormField>();
        moBomNotesPane = new STablePane(miClient);
        moBomNotesPane.setDoubleClickAction(this, "publicActionNotesEdit");
        jpNotes.add(moBomNotesPane, BorderLayout.CENTER);

        moFieldItemBom = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfRootItem, jlRootItem);
        moFieldItemBom.setLengthMax(255);
        moFieldFkItemId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemId, jlFkItemId);
        moFieldFkItemId.setPickerButton(jbFkItemId);
        moFieldQty = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQty, jlQty);
        moFieldQty.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat());
        moFieldPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_FLOAT, false, jtfPercentage, jlPercentage);
        moFieldPercentage.setDecimalFormat(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 6) + "%"));
        moFieldPercentage.setIsPercent(true);
        moFieldPercentage.setFloatMin(0);
        moFieldPercentage.setMinInclusive(true);
        moFieldCost = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfCost, jlCost);
        moFieldCost.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldDuration = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDuration, jlDuration);
        moFieldDuration.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldDateStart = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbSetDateStart);
        moFieldDateEnd_n = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateEnd_n, jlDateEnd);
        moFieldDateEnd_n.setPickerButton(jbSetDateEnd_n);
        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);
        moFieldIsNotExplotion = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsNotExplotion);
        moFieldIsRequested = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsRequested);
        moFieldLevel = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfLevel, jlLevel);
        moFieldFkItemSubstituteId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkItemSubstituteId, jlFkItemSubstituteId);
        moFieldFkItemSubstituteId.setPickerButton(jbFkItemSubstituteId);
        moFieldItemSubstitutePercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_FLOAT, false, jtfItemSubstitutePercentage, jlItemSubstitutePercentage);
        moFieldItemSubstitutePercentage.setDecimalFormat(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 6) + "%"));
        moFieldItemSubstitutePercentage.setIsPercent(true);
        moFieldItemSubstitutePercentage.setFloatMin(0);
        moFieldItemSubstitutePercentage.setMinInclusive(true);
        moFieldItemSubstitutePercentage.setFloatMax(1);
        moFieldItemSubstitutePercentage.setMaxInclusive(true);
        moFieldItemSubstitutePercentageMax = new SFormField(miClient, SLibConstants.DATA_TYPE_FLOAT, false, jtfItemSubstitutePercentageMax, jlItemSubstitutePercentageMax);
        moFieldItemSubstitutePercentageMax.setDecimalFormat(new DecimalFormat("#,##0" + "." + SLibUtilities.textRepeat("0", 6) + "%"));
        moFieldItemSubstitutePercentageMax.setIsPercent(true);
        moFieldItemSubstitutePercentageMax.setFloatMin(0);
        moFieldItemSubstitutePercentageMax.setMinInclusive(false);
        moFieldItemSubstitutePercentageMax.setFloatMax(1);
        moFieldItemSubstitutePercentageMax.setMaxInclusive(true);

        mvFields.add(moFieldItemBom);
        mvFields.add(moFieldFkItemId);
        mvFields.add(moFieldQty);
        mvFields.add(moFieldPercentage);
        mvFields.add(moFieldCost);
        mvFields.add(moFieldDuration);
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd_n);
        mvFields.add(moFieldLevel);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldIsNotExplotion);
        mvFields.add(moFieldIsRequested);
        mvFields.add(moFieldFkItemSubstituteId);
        mvFields.add(moFieldItemSubstitutePercentage);
        mvFields.add(moFieldItemSubstitutePercentageMax);

        jbSetDateStart.addActionListener(this);
        jbSetDateEnd_n.addActionListener(this);
        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbLevelNotesNew.addActionListener(this);
        jbLevelNotesEdit.addActionListener(this);
        jbFkItemId.addActionListener(this);
        jbFkItemSubstituteId.addActionListener(this);

        jtfQty.addFocusListener(this);

        i = 0;
        tableColumnsNotes = new STableColumnForm[8];
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Notas", 500);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        tableColumnsNotes[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < tableColumnsNotes.length; i++) {
            moBomNotesPane.addTableColumn(tableColumnsNotes[i]);
        }
        moBomNotesPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkItemId.isEnabled()) jcbFkItemId.requestFocus(); else jtfQty.requestFocus();
        }
    }

    private void itemStateChangedFkItemId() {
        if (jcbFkItemId.getSelectedIndex() <= 0) {
            moItem = null;
            jtfDbmsQtyUnitSymbol.setText("");
            jtfDbmsQtyCostUnitSymbol.setText("");
        }
        else {
            moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);
            jtfDbmsQtyUnitSymbol.setText(moItem.getDbmsDataUnit().getSymbol());
            jtfDbmsQtyCostUnitSymbol.setText("$/" + moItem.getDbmsDataUnit().getSymbol());
        }
    }

    private void itemStateChangedFkItemSubstituteId() {
        if (jcbFkItemSubstituteId.getSelectedIndex() <= 0) {
            moItemSubstitute = null;
        }
        else {
            moItemSubstitute = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemSubstituteId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);
        }
    }

    private void actionSetDateStart() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateStart.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateStart.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateStart.requestFocus();
        }
    }

    private void actionSetDateEnd_n() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd_n.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd_n.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateEnd_n.requestFocus();
        }
    }

    private void actionFkItemId() {
        miClient.pickOption(SDataConstants.ITMX_ITEM_BOM_LEVEL, moFieldFkItemId, null);
    }

    private void actionFkItemSubstituteId() {
        miClient.pickOption(SDataConstants.ITMX_ITEM_BOM_LEVEL, moFieldFkItemSubstituteId, null);
    }

    private void focusLostQuantity() {
        if (((dQuantityTotal - dQuantityOld) + moFieldQty.getDouble()) > 0) {
            moFieldPercentage.setDouble(moFieldQty.getDouble() / ((dQuantityTotal - dQuantityOld) + moFieldQty.getDouble()));
        }
        else {
            moFieldPercentage.setDouble(0d);
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionLevelNotesNew() {
        int index = 0;
        SFormBomNotes formNotes = new erp.mmfg.form.SFormBomNotes(miClient);
        SDataBomNotes dataNotes = null;
        SDataBomNotesRow dataNotesRow = null;

        formNotes.formReset();
        formNotes.formRefreshCatalogues();
        formNotes.setVisible(true);
        if (formNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            dataNotes = (SDataBomNotes) formNotes.getRegistry();

            moBomNotesPane.addTableRow(dataNotesRow = new SDataBomNotesRow(dataNotes));
            moBomNotesPane.renderTableRows();
            index = moBomNotesPane.getTableGuiRowCount() - 1;
            moBomNotesPane.getTable().setRowSelectionInterval(index, index);
            moBomNotesPane.getVerticalScrollBar().setValue((index + 1) * moBomNotesPane.getTable().getRowHeight());
        }
    }

    private void actionLevelNotesEdit() {
        int index = moBomNotesPane.getTable().getSelectedRow();
        SFormBomNotes formNotes = new erp.mmfg.form.SFormBomNotes(miClient);
        SDataBomNotes dataNotes = null;
        SDataBomNotesRow dataNotesRow = null;

        formNotes.formReset();
        formNotes.formRefreshCatalogues();
        dataNotes = (SDataBomNotes) formNotes.getRegistry();
        if (index != -1) {
            dataNotes = (SDataBomNotes) moBomNotesPane.getTableRow(index).getData();
            formNotes.setRegistry(dataNotes);
            formNotes.setVisible(true);
            if (formNotes.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                dataNotes = (SDataBomNotes) formNotes.getRegistry();

                moBomNotesPane.setTableRow(dataNotesRow = new SDataBomNotesRow(dataNotes), index);
                moBomNotesPane.renderTableRows();
            }
        }
    }

    public void publicActionNotesEdit() {
        actionLevelNotesEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkItemId;
    private javax.swing.JButton jbFkItemSubstituteId;
    private javax.swing.JButton jbLevelNotesDelete;
    private javax.swing.JButton jbLevelNotesEdit;
    private javax.swing.JButton jbLevelNotesNew;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbSetDateEnd_n;
    private javax.swing.JButton jbSetDateStart;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemSubstituteId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsNotExplotion;
    private javax.swing.JCheckBox jckIsRequested;
    private javax.swing.JFormattedTextField jftDateEnd_n;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlCost;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDuration;
    private javax.swing.JLabel jlFkItemId;
    private javax.swing.JLabel jlFkItemSubstituteId;
    private javax.swing.JLabel jlHr;
    private javax.swing.JLabel jlItemSubstitutePercentage;
    private javax.swing.JLabel jlItemSubstitutePercentageMax;
    private javax.swing.JLabel jlLevel;
    private javax.swing.JLabel jlPercentage;
    private javax.swing.JLabel jlQty;
    private javax.swing.JLabel jlRootItem;
    private javax.swing.JPanel jpNotes;
    private javax.swing.JPanel jpNotesAction;
    private javax.swing.JTextField jtfCost;
    private javax.swing.JTextField jtfDbmsQtyCostUnitSymbol;
    private javax.swing.JTextField jtfDbmsQtyUnitSymbol;
    private javax.swing.JTextField jtfDuration;
    private javax.swing.JTextField jtfItemSubstitutePercentage;
    private javax.swing.JTextField jtfItemSubstitutePercentageMax;
    private javax.swing.JTextField jtfLevel;
    private javax.swing.JTextField jtfPercentage;
    private javax.swing.JTextField jtfQty;
    private javax.swing.JTextField jtfRootItem;
    // End of variables declaration//GEN-END:variables

    public void setBomLevels(erp.lib.table.STablePaneGrid o) { moBomLevelPane = o; }

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moBomLevel = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moBomNotesPane.createTable(null);
        moBomNotesPane.clearTableRows();

        moFieldDateStart.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        moFieldDateEnd_n.setFieldValue(null);
        mnRootItemId = 0;

        jcbFkItemId.setEnabled(true);
        jcbFkItemId.setFocusable(true);

        dQuantityTotal = 0;
        dQuantityOld= 0;

        jckIsRequested.setSelected(true);
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkItemId, SDataConstants.ITMX_ITEM_BOM_LEVEL, null);
        SFormUtilities.populateComboBox(miClient, jcbFkItemSubstituteId, SDataConstants.ITMX_ITEM_BOM_LEVEL, null);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        erp.lib.form.SFormValidation validation = new SFormValidation();

        SDataBom oLevel = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (jlFkItemId.getText().compareTo(mvFields.get(i).getFieldName()) == 0) {
                if (!((erp.lib.form.SFormField) mvFields.get(i)).validateFieldForcing()) {
                    validation.setIsError(true);
                    validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                    break;
                }
            }
            else {
                if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                    validation.setIsError(true);
                    validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                    break;
                }
            }
        }

        if (!validation.getIsError()) {
            if (moFieldFkItemId.getKeyAsIntArray()[0] == mnRootItemId) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + jlFkItemId.getText() + "' " + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL_NOT + "'" + jlRootItem.getText() + "'.");
                validation.setComponent(jcbFkItemId);
            }
            else if (jcbFkItemSubstituteId.getSelectedIndex() > 0 && moFieldFkItemSubstituteId.getKeyAsIntArray()[0] == moFieldFkItemId.getKeyAsIntArray()[0]) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + jlFkItemSubstituteId.getText() + "' " + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL_NOT + "'" + jlFkItemId.getText() + "'.");
                validation.setComponent(jcbFkItemSubstituteId);
            }
            else if (jcbFkItemSubstituteId.getSelectedIndex() > 0 && moItem.getFkUnitId() != moItemSubstitute.getFkUnitId()) {
                validation.setMessage("La unidad de " + SGuiUtils.getLabelName(jlFkItemId) + " '" + moItem.getItem() + " (" + moItem.getKey() + ")', '" + moItem.getDbmsDataUnit().getSymbol() + "',\n" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL +
                        "la de " + SGuiUtils.getLabelName(jlFkItemSubstituteId) + " '" + moItemSubstitute.getItem() + " (" + moItemSubstitute.getKey() + ")', '" + moItemSubstitute.getDbmsDataUnit().getSymbol() + "'.");
                validation.setComponent(moFieldFkItemSubstituteId.getComponent());
            }
            else if (moItem.getFkItemStatusId() == SModSysConsts.ITMS_ST_ITEM_INA) {
                validation.setMessage(SItmConsts.MSG_ERR_ST_ITEM_INA + "\n" + 
                        SGuiConsts.TXT_LBL_CODE + ": " + moItem.getKey() + "\n" +
                        SGuiConsts.TXT_LBL_NAME + ": " + moItem.getItem());
                validation.setComponent(jcbFkItemId);
            }
            else if (moItem.getFkItemStatusId() == SModSysConsts.ITMS_ST_ITEM_RES) {
                validation.setMessage(SItmConsts.MSG_ERR_ST_ITEM_RES + "\n" + 
                        SGuiConsts.TXT_LBL_CODE + ": " + moItem.getKey() + "\n" +
                        SGuiConsts.TXT_LBL_NAME + ": " + moItem.getItem());
                validation.setComponent(jcbFkItemId);
            }
            else if (moItemSubstitute != null && moItemSubstitute.getFkItemStatusId() == SModSysConsts.ITMS_ST_ITEM_INA) {
                validation.setMessage(SItmConsts.MSG_ERR_ST_ITEM_INA + "\n" + 
                        SGuiConsts.TXT_LBL_CODE + ": " + moItemSubstitute.getKey() + "\n" +
                        SGuiConsts.TXT_LBL_NAME + ": " + moItemSubstitute.getItem());
                validation.setComponent(jcbFkItemSubstituteId);
            }
            else if (moItemSubstitute != null && moItemSubstitute.getFkItemStatusId() == SModSysConsts.ITMS_ST_ITEM_RES) {
                validation.setMessage(SItmConsts.MSG_ERR_ST_ITEM_RES + "\n" + 
                        SGuiConsts.TXT_LBL_CODE + ": " + moItemSubstitute.getKey() + "\n" +
                        SGuiConsts.TXT_LBL_NAME + ": " + moItemSubstitute.getItem());
                validation.setComponent(jcbFkItemSubstituteId);
            }
            else if (jcbFkItemSubstituteId.getSelectedIndex() <= 0 && (moFieldItemSubstitutePercentage.getDouble() != 0d || moFieldItemSubstitutePercentageMax.getDouble() != 0d)) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + jlFkItemSubstituteId.getText() + "'.");
                validation.setComponent(jcbFkItemSubstituteId);
            }
            else if (jcbFkItemSubstituteId.getSelectedIndex() > 0 && moFieldItemSubstitutePercentage.getDouble() == 0d) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + jlItemSubstitutePercentage.getText() + "'.");
                validation.setComponent(jtfItemSubstitutePercentage);
            }
            else if (jcbFkItemSubstituteId.getSelectedIndex() > 0 && moFieldItemSubstitutePercentageMax.getDouble() == 0d) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + jlItemSubstitutePercentageMax.getText() + "'.");
                validation.setComponent(jtfItemSubstitutePercentageMax);
            }
            else if (moFieldItemSubstitutePercentage.getDouble() >  moFieldItemSubstitutePercentageMax.getDouble()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + jlItemSubstitutePercentage.getText() + "' " + SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + "'" + jlItemSubstitutePercentageMax.getText() + "'.");
                validation.setComponent(jtfItemSubstitutePercentage);
            }
        }

        if (!validation.getIsError()) {
            for (int i = 0; i < moBomLevelPane.getTableGuiRowCount()-1; i++) {

                oLevel = (SDataBom) moBomLevelPane.getTableRow(i).getData();
                if (oLevel.getFkItemId() == moFieldFkItemSubstituteId.getKeyAsIntArray()[0]) {

                    validation.setMessage("El insumo sustituto '" + jcbFkItemSubstituteId.getSelectedItem().toString() + "' ya se encuentra definido en los niveles de la fórmula.\n"
                            + "Debe elegir otro insumo sustituto.");
                    validation.setComponent(moFieldFkItemSubstituteId.getComponent());
                    break;
                }
                else {

                    for (SDataBomSubstitute substitute : oLevel.getDbmsBomSubstitute()) {
                        if (substitute.getFkItemSubstituteId() == moFieldFkItemSubstituteId.getKeyAsIntArray()[0]) {

                            validation.setMessage("El insumo sustituto '" + jcbFkItemSubstituteId.getSelectedItem().toString() + "' ya se encuentra definido en otros niveles de la fórmula.\n"
                            + "Debe elegir otro insumo sustituto.");
                            validation.setComponent(moFieldFkItemSubstituteId.getComponent());
                            break;
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataBomNotesRow dataNotesRow = null;

        moBomLevel = (erp.mmfg.data.SDataBom) registry;

        moFieldFkItemId.setKey(new int[] { moBomLevel.getFkItemId() });

        moFieldQty.setFieldValue(moBomLevel.getQuantity());
        moFieldDuration.setFieldValue(moBomLevel.getDuration());
        moFieldDateStart.setFieldValue(moBomLevel.getDateStart());
        moFieldDateEnd_n.setFieldValue(moBomLevel.getDateEnd_n());
        moFieldLevel.setFieldValue(moBomLevel.getLevel());
        moFieldCost.setFieldValue(moBomLevel.getCost());
        moFieldPercentage.setFieldValue(moBomLevel.getPercentage());
        moFieldIsDeleted.setBoolean(moBomLevel.getIsDeleted());
        moFieldIsNotExplotion.setBoolean(moBomLevel.getIsNotExplotion());
        moFieldIsRequested.setBoolean(moBomLevel.getIsRequested());

        jtfDbmsQtyUnitSymbol.setText(moBomLevel.getDbmsItemRmUnitSymbol());
        jtfDbmsQtyCostUnitSymbol.setText("$/" + moBomLevel.getDbmsItemRmUnitSymbol());

        for (i = 0; i < moBomLevel.getDbmsNotes().size(); i++) {
            dataNotesRow = new SDataBomNotesRow(moBomLevel.getDbmsNotes().get(i));
            moBomNotesPane.addTableRow(dataNotesRow);
        }

        // Check if raw material has a raw material substitute:

        if (moBomLevel.getDbmsBomSubstitute().size()>0) {
            if (!moBomLevel.getDbmsBomSubstitute().get(0).getIsDeleted()) {
                moFieldFkItemSubstituteId.setFieldValue(new int[] { moBomLevel.getDbmsBomSubstitute().get(0).getFkItemSubstituteId() });
                moFieldItemSubstitutePercentage.setFieldValue(moBomLevel.getDbmsBomSubstitute().get(0).getPercentage());
                moFieldItemSubstitutePercentageMax.setFieldValue(moBomLevel.getDbmsBomSubstitute().get(0).getPercentageMax());
            }
        }

        jcbFkItemId.setEnabled(false);
        jbFkItemId.setEnabled(false);

        dQuantityOld = moFieldQty.getDouble();

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataBomSubstitute oBomSubstitute = null;

        if (moBomLevel == null) {
            moBomLevel = new erp.mmfg.data.SDataBom();
            moBomLevel.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moBomLevel.setUserNewTs(miClient.getSessionXXX().getSystemDate());
            moBomLevel.setUserEditTs(miClient.getSessionXXX().getSystemDate());
            moBomLevel.setUserDeleteTs(miClient.getSessionXXX().getSystemDate());

            moBomLevel.setFkItemId(moFieldFkItemId.getKeyAsIntArray()[0]);
            moBomLevel.setFkUnitId(moItem.getFkUnitId());

            moBomLevel.setDbmsItemKeyRm(moItem.getKey());
            moBomLevel.setDbmsItemRm(moItem.getItem());
            moBomLevel.setDbmsItemRmUnitSymbol(jtfDbmsQtyUnitSymbol.getText());
        }
        else {
            moBomLevel.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moBomLevel.setUserEditTs(miClient.getSessionXXX().getSystemDate());
        }

        moBomLevel.setQty(moFieldQty.getDouble());
        moBomLevel.setDuration(moFieldDuration.getDouble());
        moBomLevel.setDateStart(moFieldDateStart.getDate());
        moBomLevel.setDateEnd_n(moFieldDateEnd_n.getDate());
        moBomLevel.setLevel(moFieldLevel.getInteger());
        moBomLevel.setIsDeleted(moFieldIsDeleted.getBoolean());
        moBomLevel.setIsNotExplotion(moFieldIsNotExplotion.getBoolean());
        moBomLevel.setIsRequested(moFieldIsRequested.getBoolean());
        moBomLevel.setRoot(mnRootItemId);
        moBomLevel.setCost(moFieldCost.getDouble());
        moBomLevel.setPercentage(moFieldPercentage.getDouble());

        if (jcbFkItemSubstituteId.getSelectedIndex()>0) {
            oBomSubstitute = moBomLevel.getDbmsBomSubstitute().size()>0 ? moBomLevel.getDbmsBomSubstitute().elementAt(0) : new SDataBomSubstitute();

            oBomSubstitute.setPkItemId(moBomLevel.getPkBomId()>0 ? moBomLevel.getFkItemId() : moItem.getPkItemId());
            oBomSubstitute.setPkUnitId(moBomLevel.getPkBomId()>0 ? moBomLevel.getFkUnitId() : moItem.getFkUnitId());
            oBomSubstitute.setFkItemSubstituteId(moItemSubstitute.getPkItemId());
            oBomSubstitute.setFkUnitSubstituteId(moItemSubstitute.getFkUnitId());
            oBomSubstitute.setDbmsItemSubstitute(moItemSubstitute.getItem());
            oBomSubstitute.setDbmsItemSubstituteKey(moItemSubstitute.getKey());
            oBomSubstitute.setDbmsUnitSubstitute(((erp.lib.form.SFormComponentItem) jcbFkItemSubstituteId.getModel().getSelectedItem()).getComplement().toString());
            oBomSubstitute.setPercentage(moFieldItemSubstitutePercentage.getDouble());
            oBomSubstitute.setPercentageMax(moFieldItemSubstitutePercentageMax.getDouble());

            if (moBomLevel.getDbmsBomSubstitute().size()>0) {
                oBomSubstitute.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                oBomSubstitute.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                moBomLevel.getDbmsBomSubstitute().set(0, oBomSubstitute);
            }
            else {
                oBomSubstitute.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                moBomLevel.getDbmsBomSubstitute().add(oBomSubstitute);
            }
        }
        else {
            if (moBomLevel.getDbmsBomSubstitute().size()>0) {
                oBomSubstitute = moBomLevel.getDbmsBomSubstitute().elementAt(0);
                oBomSubstitute.setDbmsItemSubstitute("");
                oBomSubstitute.setDbmsItemSubstituteKey("");
                oBomSubstitute.setDbmsUnitSubstitute("");
                oBomSubstitute.setPercentage(0);
                oBomSubstitute.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                oBomSubstitute.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                oBomSubstitute.setIsDeleted(true);
            }
        }

        moBomLevel.getDbmsNotes().removeAllElements();
        for (int i = 0; i < moBomNotesPane.getTableGuiRowCount(); i++) {
            moBomLevel.getDbmsNotes().add((SDataBomNotes) moBomNotesPane.getTableRow(i).getData());
        }

        return moBomLevel;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                moFieldItemBom.setFieldValue(value.toString());
                break;
            case 2:
                moFieldLevel.setInteger(SLibUtilities.parseInt(value.toString()));
                break;
            case 3:
                mnRootItemId = SLibUtilities.parseInt(value.toString());
                break;
            case 4:
                dQuantityTotal = (Double) value;
                break;
            case 5:
                moFieldDateStart.setFieldValue(value);
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

        }
    }

    @Override
    public void focusLost(java.awt.event.FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfQty) {
                focusLostQuantity();
            }
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbLevelNotesNew) {
                actionLevelNotesNew();
            }
            else if (button == jbLevelNotesEdit) {
                actionLevelNotesEdit();
            }
             else if (button == jbSetDateStart) {
                actionSetDateStart();
            }
            else if (button == jbSetDateEnd_n) {
                actionSetDateEnd_n();
            }
            else if (button == jbFkItemId) {
                actionFkItemId();
            }
            else if (button == jbFkItemSubstituteId) {
                actionFkItemSubstituteId();
            }
        }
    }
}
