/*
 * SFormOrdPeriod.java
 *
 * Created on 29 de septiembre de 2009, 14:08
 */

package erp.mmfg.form;

import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormValidation;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mmfg.data.SDataLeadtimeCo;
import erp.mmfg.data.SDataLeadtimeCob;

/**
 *
 * @author  Néstor Ávalos
 */
public class SFormLeadtimeLink extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataLeadtimeCo moLinkTypeCo;
    private erp.mmfg.data.SDataLeadtimeCob moLinkTypeCob;
    private erp.lib.form.SFormField moFieldFkLinkTypeId;
    private erp.lib.form.SFormField moFieldFkReferenceId;
    private erp.lib.form.SFormField moFieldLtime;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.form.SFormComboBoxGroup moComboBoxLinkTypeRef;

    private int mnPkCobId;
    private int mnPkSupplierId;
    private java.util.Vector<erp.mmfg.data.SDataLeadtimeCo> mvLeadtimeCoType;
    private java.util.Vector<erp.mmfg.data.SDataLeadtimeCob> mvLeadtimeCobType;

    /** Creates new form DFormCompany */
    public SFormLeadtimeLink(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SLibConstants.UNDEFINED;

        mvLeadtimeCoType = new Vector<SDataLeadtimeCo>();
        mvLeadtimeCobType = new Vector<SDataLeadtimeCob>();
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlFkLinkTypeId = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jcbFkLinkTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel7 = new javax.swing.JPanel();
        jlFkReferenceId = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jcbFkReferenceId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkReferenceId = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlLeadtime = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jtfLeadtime = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tipo de referencia"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(150, 80));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(4, 1, 5, 5));

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jlFkLinkTypeId.setForeground(java.awt.Color.blue);
        jlFkLinkTypeId.setText("Tipo de referencia: *"); // NOI18N
        jlFkLinkTypeId.setPreferredSize(new java.awt.Dimension(110, 14));
        jPanel6.add(jlFkLinkTypeId, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.BorderLayout(1, 0));

        jcbFkLinkTypeId.setPreferredSize(new java.awt.Dimension(200, 20));
        jcbFkLinkTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkLinkTypeIdItemStateChanged(evt);
            }
        });
        jPanel1.add(jcbFkLinkTypeId, java.awt.BorderLayout.WEST);

        jPanel6.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 5));

        jlFkReferenceId.setForeground(java.awt.Color.blue);
        jlFkReferenceId.setText("Referencia: *"); // NOI18N
        jlFkReferenceId.setPreferredSize(new java.awt.Dimension(110, 14));
        jPanel7.add(jlFkReferenceId, java.awt.BorderLayout.WEST);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel4.add(jcbFkReferenceId, java.awt.BorderLayout.CENTER);

        jbFkReferenceId.setText("...");
        jbFkReferenceId.setToolTipText("Seleccionar referencia");
        jbFkReferenceId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkReferenceId, java.awt.BorderLayout.EAST);

        jPanel7.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel7);

        jPanel8.setLayout(new java.awt.BorderLayout(5, 5));

        jlLeadtime.setText("Leadtime: *");
        jlLeadtime.setPreferredSize(new java.awt.Dimension(110, 14));
        jPanel8.add(jlLeadtime, java.awt.BorderLayout.WEST);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jtfLeadtime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfLeadtime.setText("0");
        jtfLeadtime.setPreferredSize(new java.awt.Dimension(40, 20));
        jPanel5.add(jtfLeadtime, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout(5, 5));

        jLabel1.setText("días");
        jPanel10.add(jLabel1, java.awt.BorderLayout.WEST);

        jPanel5.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel8);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 5));

        jckIsDeleted.setText("Registro eliminado");
        jPanel9.add(jckIsDeleted, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel9);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-581)/2, (screenSize.height-270)/2, 581, 270);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkLinkTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkLinkTypeIdItemStateChanged
        itemStateChangedFkLinkTypeId();
    }//GEN-LAST:event_jcbFkLinkTypeIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moComboBoxLinkTypeRef = new SFormComboBoxGroup(miClient);

        moFieldFkLinkTypeId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkLinkTypeId, jlFkLinkTypeId);
        moFieldFkReferenceId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkReferenceId, jlFkReferenceId);
        moFieldLtime = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfLeadtime, jlLeadtime);
        moFieldLtime.setDoubleMin(0);
        moFieldLtime.setMinInclusive(true);
        moFieldIsDeleted = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldFkLinkTypeId);
        mvFields.add(moFieldFkReferenceId);
        mvFields.add(moFieldLtime);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkReferenceId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkLinkTypeId.isEnabled()) jcbFkLinkTypeId.requestFocus(); else jtfLeadtime.requestFocus();
        }
    }

    private void itemStateChangedFkLinkTypeId() {
        if (jcbFkLinkTypeId.getSelectedIndex() > 0) {

            if (jcbFkReferenceId.getSelectedIndex() <= 0) {
                loadReference();
            }
        } else {
            jcbFkReferenceId.setEnabled(false);
            jbFkReferenceId.setEnabled(false);
        }
    }

    private void actionFkReferenceId() {
        int nTypeLink = 0;
        int[] anFilterItem = null;

        switch (moFieldFkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                nTypeLink = SDataConstants.UNDEFINED;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                nTypeLink = SDataConstants.ITMS_CT_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                nTypeLink = SDataConstants.ITMS_CL_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                nTypeLink = SDataConstants.ITMS_TP_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                nTypeLink = SDataConstants.ITMU_IFAM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                nTypeLink = SDataConstants.ITMU_IGRP;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                nTypeLink = SDataConstants.ITMU_IGEN;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                nTypeLink = SDataConstants.ITMU_LINE;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                nTypeLink = SDataConstants.ITMU_BRD;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                nTypeLink = SDataConstants.ITMU_MFR;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                nTypeLink = SDataConstants.ITMX_ITEM_IOG;
                anFilterItem = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                break;
        }
        miClient.pickOption(nTypeLink, moFieldFkReferenceId, anFilterItem);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void loadReference() {
        jcbFkReferenceId.setEnabled(true);
        jbFkReferenceId.setEnabled(true);

        switch (moFieldFkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMS_CT_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMS_CL_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMS_TP_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_IFAM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_IGRP);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_IGEN);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_LINE);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_BRD);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_MFR);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                SFormUtilities.populateComboBox(miClient, jcbFkReferenceId, SDataConstants.ITMU_ITEM);
                break;
            default:
                jcbFkReferenceId.setEnabled(false);
                jbFkReferenceId.setEnabled(false);
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkReferenceId;
    private javax.swing.JButton jbOK;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkLinkTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkReferenceId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlFkLinkTypeId;
    private javax.swing.JLabel jlFkReferenceId;
    private javax.swing.JLabel jlLeadtime;
    private javax.swing.JTextField jtfLeadtime;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moLinkTypeCo = null;
        moLinkTypeCob = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moComboBoxLinkTypeRef.reset();

        jcbFkLinkTypeId.setEnabled(true);
        jcbFkLinkTypeId.setFocusable(true);

        jcbFkReferenceId.setEnabled(false);
        jcbFkReferenceId.setFocusable(false);

        jbFkReferenceId.setEnabled(false);
        jbFkReferenceId.setFocusable(false);

        mnPkCobId = 0;
        mnPkSupplierId = 0;
        mvLeadtimeCoType.clear();
        mvLeadtimeCobType.clear();

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        //moComboBoxLinkTypeRef.clear();
        //moComboBoxLinkTypeRef.addComboBox(SDataConstants.TRNS_TP_LINK, jcbFkLinkTypeId, jbFkLinkTypeId);
        //moComboBoxLinkTypeRef.addComboBox(SDataConstants.ITMS_CT_ITEM, jcbFkReferenceId, jbFkReferenceId);

        SFormUtilities.populateComboBox(miClient, jcbFkLinkTypeId, SDataConstants.TRNS_TP_LINK);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i = 0;
        erp.lib.form.SFormValidation validation = new SFormValidation();
        SDataLeadtimeCo leadtimeCo = null;
        SDataLeadtimeCob leadtimeCob = null;

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
             if (mnFormType == SDataConstants.MFG_LT_CO) {
                if (moLinkTypeCo == null) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_LTIME_LINK_CO_VAL,
                            new Object[] { mnPkSupplierId, moFieldFkLinkTypeId.getKeyAsIntArray()[0],
                            moFieldFkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? moFieldFkReferenceId.getKeyAsIntArray()[0] : SDataConstants.UNDEFINED },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("El registro ya existe");
                        validation.setComponent(jcbFkLinkTypeId);
                    }
                    else {
                        for (i = 0; i < mvLeadtimeCoType.size(); i++) {
                            leadtimeCo = mvLeadtimeCoType.get(i);

                            if (leadtimeCo.getFkLinkTypeId() == moFieldFkLinkTypeId.getKeyAsIntArray()[0] &&
                                    leadtimeCo.getFkReferenceId() == moFieldFkReferenceId.getKeyAsIntArray()[0]) {
                                validation.setMessage("El registro ya existe");
                                validation.setComponent(jcbFkLinkTypeId);
                            }
                        }
                    }
                }
             } else if (mnFormType == SDataConstants.MFG_LT_COB) {
                if (moLinkTypeCob == null) {
                    if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MFG_LTIME_LINK_COB_VAL,
                            new Object[] { mnPkCobId, mnPkSupplierId, moFieldFkLinkTypeId.getKeyAsIntArray()[0],
                            moFieldFkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? moFieldFkReferenceId.getKeyAsIntArray()[0] : SDataConstants.UNDEFINED },
                            SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                        validation.setMessage("El registro ya existe");
                        validation.setComponent(jcbFkLinkTypeId);
                    }
                    else {
                        for (i = 0; i < mvLeadtimeCobType.size(); i++) {
                            leadtimeCob = mvLeadtimeCobType.get(i);

                            if (leadtimeCob.getFkLinkTypeId() == moFieldFkLinkTypeId.getKeyAsIntArray()[0] &&
                                    leadtimeCob.getFkReferenceId() == moFieldFkReferenceId.getKeyAsIntArray()[0]) {
                                validation.setMessage("El registro ya existe");
                                validation.setComponent(jcbFkLinkTypeId);
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {

        if (mnFormType == SDataConstants.MFG_LT_CO) {
            moLinkTypeCo = (SDataLeadtimeCo) registry;

            moFieldFkLinkTypeId.setKey(new int[] { moLinkTypeCo.getFkLinkTypeId() });
            loadReference();

            switch (moFieldFkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.locateComboBoxItemByComplement(jcbFkReferenceId, moLinkTypeCo.getFkReferenceId());
                    break;
                default:
                    moFieldFkReferenceId.setFieldValue(new int[] { moLinkTypeCo.getFkReferenceId() });
            }
            moFieldLtime.setFieldValue(moLinkTypeCo.getLtime());
            moFieldIsDeleted.setFieldValue(moLinkTypeCo.getIsDeleted());
            moLinkTypeCo.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moLinkTypeCo.setUserEditTs(miClient.getSessionXXX().getSystemDate());

        } else if (mnFormType == SDataConstants.MFG_LT_COB) {
            moLinkTypeCob = (SDataLeadtimeCob) registry;

            moFieldFkLinkTypeId.setKey(new int[] { moLinkTypeCob.getFkLinkTypeId() });
            loadReference();

            switch (moFieldFkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.locateComboBoxItemByComplement(jcbFkReferenceId, moLinkTypeCob.getFkReferenceId());
                    break;
                default:
                    moFieldFkReferenceId.setFieldValue(new int[] { moLinkTypeCob.getFkReferenceId() });
            }
            moFieldLtime.setFieldValue(moLinkTypeCob.getLtime());
            moFieldIsDeleted.setFieldValue(moLinkTypeCob.getIsDeleted());
            moLinkTypeCob.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moLinkTypeCob.setUserEditTs(miClient.getSessionXXX().getSystemDate());
        }

        jcbFkLinkTypeId.setEnabled(false);
        jcbFkLinkTypeId.setFocusable(false);

        jcbFkReferenceId.setEnabled(false);
        jcbFkReferenceId.setFocusable(false);

        jbFkReferenceId.setEnabled(false);
        jbFkReferenceId.setFocusable(false);

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {

        if (mnFormType == SDataConstants.MFG_LT_CO) {
            if (moLinkTypeCo == null) {
                moLinkTypeCo = new SDataLeadtimeCo();

                moLinkTypeCo.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

                moLinkTypeCo.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
                moLinkTypeCo.setDbmsUserEdit("(n/a)");
                moLinkTypeCo.setDbmsUserDelete("(n/a)");
                moLinkTypeCo.setUserNewTs(miClient.getSessionXXX().getWorkingDate());
                moLinkTypeCo.setUserEditTs(miClient.getSessionXXX().getWorkingDate());
                moLinkTypeCo.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
            } else {
                moLinkTypeCo.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                moLinkTypeCo.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
                moLinkTypeCo.setUserEditTs(miClient.getSessionXXX().getWorkingDate());

                if (moFieldIsDeleted.getBoolean()) {
                    moLinkTypeCo.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                    moLinkTypeCo.setDbmsUserDelete(miClient.getSessionXXX().getUser().getUser());
                    moLinkTypeCo.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
                }
            }

            switch (moFieldFkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    moLinkTypeCo.setFkReferenceId(SLibConstants.UNDEFINED);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    moLinkTypeCo.setFkReferenceId((Integer) ((SFormComponentItem) jcbFkReferenceId.getSelectedItem()).getComplement());
                    break;
                default:
                    moLinkTypeCo.setFkReferenceId(moFieldFkReferenceId.getKeyAsIntArray()[0]);
            }

            moLinkTypeCo.setPkSupplierId(mnPkSupplierId);
            moLinkTypeCo.setFkLinkTypeId(moFieldFkLinkTypeId.getKeyAsIntArray()[0]);
            moLinkTypeCo.setLtime(moFieldLtime.getInteger());
            moLinkTypeCo.setIsDeleted(moFieldIsDeleted.getBoolean());

            moLinkTypeCo.setDbmsTypeLink(jcbFkLinkTypeId.getSelectedItem().toString());
            moLinkTypeCo.setDbmsReference(moFieldFkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? jcbFkReferenceId.getSelectedItem().toString() : SDataConstantsSys.TXT_TRNS_TP_LINK_ALL);

        } else if (mnFormType == SDataConstants.MFG_LT_COB) {
            if (moLinkTypeCob == null) {
                moLinkTypeCob = new SDataLeadtimeCob();

                moLinkTypeCob.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

                moLinkTypeCob.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
                moLinkTypeCob.setDbmsUserEdit("(n/a)");
                moLinkTypeCob.setDbmsUserDelete("(n/a)");
                moLinkTypeCob.setUserNewTs(miClient.getSessionXXX().getWorkingDate());
                moLinkTypeCob.setUserEditTs(miClient.getSessionXXX().getWorkingDate());
                moLinkTypeCob.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
            } else {
                moLinkTypeCob.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                moLinkTypeCob.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
                moLinkTypeCob.setUserEditTs(miClient.getSessionXXX().getWorkingDate());

                if (moFieldIsDeleted.getBoolean()) {
                    moLinkTypeCob.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                    moLinkTypeCob.setDbmsUserDelete(miClient.getSessionXXX().getUser().getUser());
                    moLinkTypeCob.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
                }
            }

            switch (moFieldFkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    moLinkTypeCob.setFkReferenceId(SLibConstants.UNDEFINED);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    moLinkTypeCob.setFkReferenceId((Integer) ((SFormComponentItem) jcbFkReferenceId.getSelectedItem()).getComplement());
                    break;
                default:
                    moLinkTypeCob.setFkReferenceId(moFieldFkReferenceId.getKeyAsIntArray()[0]);
            }

            moLinkTypeCob.setPkCobId(mnPkCobId);
            moLinkTypeCob.setPkSupplierId(mnPkSupplierId);
            moLinkTypeCob.setFkLinkTypeId(moFieldFkLinkTypeId.getKeyAsIntArray()[0]);
            moLinkTypeCob.setLtime(moFieldLtime.getInteger());
            moLinkTypeCob.setIsDeleted(moFieldIsDeleted.getBoolean());

            moLinkTypeCob.setDbmsTypeLink(jcbFkLinkTypeId.getSelectedItem().toString());
            moLinkTypeCob.setDbmsReference(moFieldFkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? jcbFkReferenceId.getSelectedItem().toString() : SDataConstantsSys.TXT_TRNS_TP_LINK_ALL);
        }

        return mnFormType == SDataConstants.MFG_LT_CO ? moLinkTypeCo : moLinkTypeCob;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {

        switch (type) {
            case 1:
                mnPkCobId = SLibUtilities.parseInt(value.toString());
                break;
            case 2:
                mnPkSupplierId = SLibUtilities.parseInt(value.toString());
                break;
            case 3:
                mnFormType = SLibUtilities.parseInt(value.toString());
                break;
            case 4:
                mvLeadtimeCoType.add((SDataLeadtimeCo) value);
                break;
            case 5:
                mvLeadtimeCobType.add((SDataLeadtimeCob) value);
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkReferenceId) {
                actionFkReferenceId();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusLost(FocusEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
