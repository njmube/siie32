/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.gui.account;

import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JList;
import sa.lib.SLibConsts;
import sa.lib.gui.SGuiConsts;

/**
 *
 * @author Sergio Flores
 */
public class SAccountChooser extends JDialog {

    private boolean mbFirstActivation;
    private boolean mbClosingChooser;
    private int mnChooserResult;
    private ArrayList<SAccount> maAccounts;

    /**
     * Creates new form SAccountChooser
     */
    public SAccountChooser(Frame parent) {
        super(parent, true);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane.setPreferredSize(new java.awt.Dimension(275, 100));

        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList.setCellRenderer(new SAccountChooserRenderer());
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMouseClicked(evt);
            }
        });
        jList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListKeyPressed(evt);
            }
        });
        jScrollPane.setViewportView(jList);

        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListKeyPressed
        keyPressedList(evt);
    }//GEN-LAST:event_jListKeyPressed

    private void jListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMouseClicked
        mouseClickedList(evt);
    }//GEN-LAST:event_jListMouseClicked

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        actionCancel();
    }//GEN-LAST:event_formWindowDeactivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {

    }

    private void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;

            if (jList.getModel().getSize() > 0 && jList.getSelectedIndex() == -1) {
                jList.setSelectedIndex(0);
                jList.ensureIndexIsVisible(0);
            }
        }
    }

    private void actionOk() {
        if (!mbClosingChooser && jList.getSelectedIndex() != -1) {
            mbClosingChooser = true;
            mnChooserResult = SGuiConsts.FORM_RESULT_OK;
            dispose();
        }
    }

    private void actionCancel() {
        if (!mbClosingChooser) {
            mnChooserResult = SGuiConsts.FORM_RESULT_CANCEL;
            dispose();
        }
    }

    private void keyPressedList(KeyEvent evt) {
        if (evt.getSource() instanceof JList) {
            JList list = (JList) evt.getSource();

            if (list == jList) {
                switch (evt.getKeyCode()) {
                    case KeyEvent.VK_ENTER:
                        actionOk();
                        break;
                    case KeyEvent.VK_ESCAPE:
                        actionCancel();
                        break;
                    default:
                }
            }
        }
    }

    private void mouseClickedList(MouseEvent evt) {
        if (evt.getSource() instanceof JList) {
            JList list = (JList) evt.getSource();

            if (list == jList) {
                if (evt.getClickCount() == 2) {
                    actionOk();
                }
            }
        }
    }

    /*
     * Public methods
     */

    public void resetChooser() {
        mbFirstActivation = true;
        mbClosingChooser = false;
        mnChooserResult = SLibConsts.UNDEFINED;
    }

    public int getChooserResult() {
        return mnChooserResult;
    }

    @SuppressWarnings("unchecked")
    public void setAccounts(final ArrayList<SAccount> accounts) {
        maAccounts = accounts;

        if (maAccounts.size() > 0) {
            jList.setListData(accounts.toArray());
        }
        else {
            jList.setListData(new String[] { "(No hay opciones disponibles)" });
        }
    }

    public void setSelectedAccount(String codeLevelUsr) {
        int size = maAccounts.size();
        String codeLevel = SAccountUtils.convertCodeLevelStd(codeLevelUsr);

        for (int i = 0; i < size; i++) {
            if (((SAccount) jList.getModel().getElementAt(i)).getCodeLevelStd().compareTo(codeLevel) == 0) {
                jList.setSelectedIndex(i);
                jList.ensureIndexIsVisible(i);
                break;
            }
        }
    }

    public SAccount getSelectedAccount() {
        return (SAccount) (jList.getSelectedIndex() == -1 || !(jList.getSelectedValue() instanceof SAccount) ? null : jList.getSelectedValue());
    }
}
