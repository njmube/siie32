/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SPanelQueryIntegralEmployee.java
 *
 */

package erp.gui;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableSetting;
import erp.lib.table.STableTabInterface;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataEmployee;
import erp.mbps.data.SRowIntegralEmployee;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbBenefitTableRow;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SHrsBenefitTableByAnniversary;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;

/**
 *
 * @author Juan Barajas
 */
public class SPanelQueryIntegralEmployee extends javax.swing.JPanel implements STableTabInterface, javax.swing.event.ListSelectionListener {

    int mnPanelType;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moTablePaneEmpAvailable;
    private boolean mbHasRightEmpWage;
    
    private SDataBizPartner moBizPartner;
    private ArrayList<SHrsBenefitTableByAnniversary> maBenefitTableVacationByAnniversary = null;
    private ArrayList<SHrsBenefitTableByAnniversary> maBenefitTableVacationBonByAnniversary = null;
    private ArrayList<SHrsBenefitTableByAnniversary> maBenefitTableAnnByAnniversarys = null;
    

    /** Creates new form SPanelQueryIntegralEmployee */
    public SPanelQueryIntegralEmployee(erp.client.SClientInterface client) {
        try {
            mnPanelType = SDataConstants.TRNX_MFG_ORD;
            miClient = client;

            initComponents();
            initComponentsExtra();
        }
        catch (Exception ex) {
            SLibUtilities.printOutException(this, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpEmployeesAvailable = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlFirstName = new javax.swing.JLabel();
        jtfFirstName = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jlFiscalId = new javax.swing.JLabel();
        jtfFiscalId = new javax.swing.JTextField();
        jlAlternativeId = new javax.swing.JLabel();
        jtfAlternativeId = new javax.swing.JTextField();
        jlSocialSecurityNumber = new javax.swing.JLabel();
        jtfSocialSecurityNumber = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jlDateBirth = new javax.swing.JLabel();
        jftDateBirth = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jlDateBenefits = new javax.swing.JLabel();
        jftDateBenefits = new javax.swing.JFormattedTextField();
        jPanel15 = new javax.swing.JPanel();
        jlDateLastHire = new javax.swing.JLabel();
        jftDateLastHire = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jlDateLastDismiss_n = new javax.swing.JLabel();
        jftDateLastDismiss_n = new javax.swing.JFormattedTextField();
        jPanel18 = new javax.swing.JPanel();
        jlSalary = new javax.swing.JLabel();
        jtfSalary = new javax.swing.JTextField();
        jftDateChangeSalary = new javax.swing.JFormattedTextField();
        jlWage = new javax.swing.JLabel();
        jtfWage = new javax.swing.JTextField();
        jftDateChangeWage = new javax.swing.JFormattedTextField();
        jPanel20 = new javax.swing.JPanel();
        jlSalarySscBase = new javax.swing.JLabel();
        jtfSalarySscBase = new javax.swing.JTextField();
        jftDateChangeSalarySscBase = new javax.swing.JFormattedTextField();
        jPanel19 = new javax.swing.JPanel();
        jlBank = new javax.swing.JLabel();
        jtfBank = new javax.swing.JTextField();
        jlBankAccount = new javax.swing.JLabel();
        jtfBankAccount = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlSex = new javax.swing.JLabel();
        jtfSex = new javax.swing.JTextField();
        jlMarital = new javax.swing.JLabel();
        jtfMarital = new javax.swing.JTextField();
        jlFkBloodType = new javax.swing.JLabel();
        jtfBloodType = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlEducationType = new javax.swing.JLabel();
        jtfEducationType = new javax.swing.JTextField();
        jlMwzType = new javax.swing.JLabel();
        jtfMwzType = new javax.swing.JTextField();
        jlWorkingHoursDay = new javax.swing.JLabel();
        jtfWorkingHoursDay = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jlSeniority = new javax.swing.JLabel();
        jtfSeniority = new javax.swing.JTextField();
        jlSeniorityYear = new javax.swing.JLabel();
        jtfSeniorityDays = new javax.swing.JTextField();
        jlSeniorityDays = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlDummy = new javax.swing.JLabel();
        jlBenefit = new javax.swing.JLabel();
        jlDummy1 = new javax.swing.JLabel();
        jlBenefitProp = new javax.swing.JLabel();
        jlProportional = new javax.swing.JLabel();
        jlDummy2 = new javax.swing.JLabel();
        jlPaymentProp = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jlAnnualBonus = new javax.swing.JLabel();
        jtfAnnualBonusBenefit = new javax.swing.JTextField();
        jlAnnualBonusBenefit = new javax.swing.JLabel();
        jtfAnnualBonusPropPer = new javax.swing.JTextField();
        jtfAnnualBonusProp = new javax.swing.JTextField();
        jlAnnualBonusProp = new javax.swing.JLabel();
        jtfAnnualBonusPayProp = new javax.swing.JTextField();
        jlAnnualBonusPayProp = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jlVacations = new javax.swing.JLabel();
        jtfVacationsBenefit = new javax.swing.JTextField();
        jlVacationsBenefit = new javax.swing.JLabel();
        jtfVacationsPropPer = new javax.swing.JTextField();
        jtfVacationsProp = new javax.swing.JTextField();
        jlVacationsProp = new javax.swing.JLabel();
        jtfVacationsPayProp = new javax.swing.JTextField();
        jlVacationsPayProp = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jlVacationsBonus = new javax.swing.JLabel();
        jtfVacationsBonusBenefit = new javax.swing.JTextField();
        jlDummy3 = new javax.swing.JLabel();
        jtfVacationsBonusPayProp = new javax.swing.JTextField();
        jlVacationsBonusPayProp = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jlSettlement = new javax.swing.JLabel();
        jtfSettlement = new javax.swing.JTextField();
        jlRJDj = new javax.swing.JLabel();
        jtfSettlementDisL = new javax.swing.JTextField();
        jlDisL = new javax.swing.JLabel();
        jtfSettlementDicL = new javax.swing.JTextField();
        jlDicL = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlPhoto = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jlSignature = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpEmployeesAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados:"));
        jpEmployeesAvailable.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpEmployeesAvailable, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos personales:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(9, 0, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFirstName.setText("Nombre:");
        jlFirstName.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlFirstName);

        jtfFirstName.setEditable(false);
        jtfFirstName.setToolTipText("");
        jtfFirstName.setFocusable(false);
        jtfFirstName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(jtfFirstName);

        jPanel7.add(jPanel13);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalId.setText("RFC:");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jlFiscalId);

        jtfFiscalId.setEditable(false);
        jtfFiscalId.setFocusable(false);
        jtfFiscalId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jtfFiscalId);

        jlAlternativeId.setText("CURP:");
        jlAlternativeId.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(jlAlternativeId);

        jtfAlternativeId.setEditable(false);
        jtfAlternativeId.setFocusable(false);
        jtfAlternativeId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel21.add(jtfAlternativeId);

        jlSocialSecurityNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlSocialSecurityNumber.setText("NSS:");
        jlSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(jlSocialSecurityNumber);

        jtfSocialSecurityNumber.setEditable(false);
        jtfSocialSecurityNumber.setFocusable(false);
        jtfSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel21.add(jtfSocialSecurityNumber);

        jPanel7.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBirth.setText("Nacimiento:");
        jlDateBirth.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jlDateBirth);

        jftDateBirth.setEditable(false);
        jftDateBirth.setText("yyyy/mm/dd");
        jftDateBirth.setFocusable(false);
        jftDateBirth.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jftDateBirth);

        jLabel4.setPreferredSize(new java.awt.Dimension(20, 23));
        jPanel22.add(jLabel4);

        jlDateBenefits.setText("Fecha beneficios:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlDateBenefits);

        jftDateBenefits.setEditable(false);
        jftDateBenefits.setText("yyyy/mm/dd");
        jftDateBenefits.setFocusable(false);
        jftDateBenefits.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jftDateBenefits);

        jPanel7.add(jPanel22);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateLastHire.setText("Última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlDateLastHire);

        jftDateLastHire.setEditable(false);
        jftDateLastHire.setText("yyyy/mm/dd");
        jftDateLastHire.setFocusable(false);
        jftDateLastHire.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateLastHire);

        jLabel7.setPreferredSize(new java.awt.Dimension(20, 23));
        jPanel15.add(jLabel7);

        jlDateLastDismiss_n.setText("Fecha última baja:");
        jlDateLastDismiss_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDateLastDismiss_n);

        jftDateLastDismiss_n.setEditable(false);
        jftDateLastDismiss_n.setText("yyyy/mm/dd");
        jftDateLastDismiss_n.setFocusable(false);
        jftDateLastDismiss_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateLastDismiss_n);

        jPanel7.add(jPanel15);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSalary.setText("Salario:");
        jlSalary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlSalary);

        jtfSalary.setEditable(false);
        jtfSalary.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalary.setText("0.0000");
        jtfSalary.setToolTipText("");
        jtfSalary.setFocusable(false);
        jtfSalary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jtfSalary);

        jftDateChangeSalary.setEditable(false);
        jftDateChangeSalary.setText("yyyy/mm/dd");
        jftDateChangeSalary.setFocusable(false);
        jftDateChangeSalary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jftDateChangeSalary);

        jlWage.setText("Sueldo:");
        jlWage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlWage);

        jtfWage.setEditable(false);
        jtfWage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWage.setText("0.0000");
        jtfWage.setToolTipText("");
        jtfWage.setFocusable(false);
        jtfWage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jtfWage);

        jftDateChangeWage.setEditable(false);
        jftDateChangeWage.setText("yyyy/mm/dd");
        jftDateChangeWage.setFocusable(false);
        jftDateChangeWage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jftDateChangeWage);

        jPanel7.add(jPanel18);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSalarySscBase.setText("SBC:");
        jlSalarySscBase.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlSalarySscBase);

        jtfSalarySscBase.setEditable(false);
        jtfSalarySscBase.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalarySscBase.setText("0.0000");
        jtfSalarySscBase.setToolTipText("");
        jtfSalarySscBase.setFocusable(false);
        jtfSalarySscBase.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jtfSalarySscBase);

        jftDateChangeSalarySscBase.setEditable(false);
        jftDateChangeSalarySscBase.setText("yyyy/mm/dd");
        jftDateChangeSalarySscBase.setFocusable(false);
        jftDateChangeSalarySscBase.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jftDateChangeSalarySscBase);

        jPanel7.add(jPanel20);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBank.setText("Banco:");
        jlBank.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlBank);

        jtfBank.setEditable(false);
        jtfBank.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBank.setText("BANCO");
        jtfBank.setToolTipText("");
        jtfBank.setFocusable(false);
        jtfBank.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jtfBank);

        jlBankAccount.setText("Cuenta bancaria:");
        jlBankAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlBankAccount);

        jtfBankAccount.setEditable(false);
        jtfBankAccount.setFocusable(false);
        jtfBankAccount.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel19.add(jtfBankAccount);

        jPanel7.add(jPanel19);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSex.setText("Sexo:");
        jlSex.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlSex);

        jtfSex.setEditable(false);
        jtfSex.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSex.setText("M");
        jtfSex.setToolTipText("");
        jtfSex.setFocusable(false);
        jtfSex.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jtfSex);

        jlMarital.setText("Estado civil:");
        jlMarital.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlMarital);

        jtfMarital.setEditable(false);
        jtfMarital.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfMarital.setText("A +");
        jtfMarital.setToolTipText("");
        jtfMarital.setFocusable(false);
        jtfMarital.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jtfMarital);

        jlFkBloodType.setText("Tipo de sangre:");
        jlFkBloodType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlFkBloodType);

        jtfBloodType.setEditable(false);
        jtfBloodType.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBloodType.setText("A +");
        jtfBloodType.setToolTipText("");
        jtfBloodType.setFocusable(false);
        jtfBloodType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jtfBloodType);

        jPanel7.add(jPanel16);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEducationType.setText("Escolaridad:");
        jlEducationType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlEducationType);

        jtfEducationType.setEditable(false);
        jtfEducationType.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfEducationType.setText("No aplica");
        jtfEducationType.setToolTipText("");
        jtfEducationType.setFocusable(false);
        jtfEducationType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfEducationType);

        jlMwzType.setText("Área geo.:");
        jlMwzType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlMwzType);

        jtfMwzType.setEditable(false);
        jtfMwzType.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfMwzType.setText("M");
        jtfMwzType.setToolTipText("");
        jtfMwzType.setFocusable(false);
        jtfMwzType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfMwzType);

        jlWorkingHoursDay.setText("Horas jornada:");
        jlWorkingHoursDay.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlWorkingHoursDay);

        jtfWorkingHoursDay.setEditable(false);
        jtfWorkingHoursDay.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWorkingHoursDay.setText("0");
        jtfWorkingHoursDay.setToolTipText("");
        jtfWorkingHoursDay.setFocusable(false);
        jtfWorkingHoursDay.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfWorkingHoursDay);

        jPanel7.add(jPanel9);

        jPanel4.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Prestaciones:"));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel10.setFocusable(false);
        jPanel10.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeniority.setText("Antigüedad:");
        jlSeniority.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel26.add(jlSeniority);

        jtfSeniority.setEditable(false);
        jtfSeniority.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSeniority.setText("0");
        jtfSeniority.setToolTipText("");
        jtfSeniority.setFocusable(false);
        jtfSeniority.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel26.add(jtfSeniority);

        jlSeniorityYear.setText("años");
        jlSeniorityYear.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel26.add(jlSeniorityYear);

        jtfSeniorityDays.setEditable(false);
        jtfSeniorityDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSeniorityDays.setText("0");
        jtfSeniorityDays.setToolTipText("");
        jtfSeniorityDays.setFocusable(false);
        jtfSeniorityDays.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel26.add(jtfSeniorityDays);

        jlSeniorityDays.setText("días");
        jlSeniorityDays.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel26.add(jlSeniorityDays);

        jPanel10.add(jPanel26);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDummy.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlDummy);

        jlBenefit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlBenefit.setText("Prestación");
        jlBenefit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlBenefit);

        jlDummy1.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel11.add(jlDummy1);

        jlBenefitProp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlBenefitProp.setText("Parte prop.");
        jlBenefitProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlBenefitProp);

        jlProportional.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlProportional.setText("Proporcional");
        jlProportional.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlProportional);

        jlDummy2.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel11.add(jlDummy2);

        jlPaymentProp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPaymentProp.setText("Pago prop.");
        jlPaymentProp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlPaymentProp);

        jPanel10.add(jPanel11);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnnualBonus.setText("Gratif. anual:");
        jlAnnualBonus.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jlAnnualBonus);

        jtfAnnualBonusBenefit.setEditable(false);
        jtfAnnualBonusBenefit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnualBonusBenefit.setText("0");
        jtfAnnualBonusBenefit.setToolTipText("");
        jtfAnnualBonusBenefit.setFocusable(false);
        jtfAnnualBonusBenefit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jtfAnnualBonusBenefit);

        jlAnnualBonusBenefit.setText("días");
        jlAnnualBonusBenefit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel27.add(jlAnnualBonusBenefit);

        jtfAnnualBonusPropPer.setEditable(false);
        jtfAnnualBonusPropPer.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnualBonusPropPer.setText("0 %");
        jtfAnnualBonusPropPer.setToolTipText("");
        jtfAnnualBonusPropPer.setFocusable(false);
        jtfAnnualBonusPropPer.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jtfAnnualBonusPropPer);

        jtfAnnualBonusProp.setEditable(false);
        jtfAnnualBonusProp.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnualBonusProp.setText("0");
        jtfAnnualBonusProp.setToolTipText("");
        jtfAnnualBonusProp.setFocusable(false);
        jtfAnnualBonusProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jtfAnnualBonusProp);

        jlAnnualBonusProp.setText("días");
        jlAnnualBonusProp.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel27.add(jlAnnualBonusProp);

        jtfAnnualBonusPayProp.setEditable(false);
        jtfAnnualBonusPayProp.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnualBonusPayProp.setText("0");
        jtfAnnualBonusPayProp.setToolTipText("");
        jtfAnnualBonusPayProp.setFocusable(false);
        jtfAnnualBonusPayProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jtfAnnualBonusPayProp);

        jlAnnualBonusPayProp.setText("CUR");
        jlAnnualBonusPayProp.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel27.add(jlAnnualBonusPayProp);

        jPanel10.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVacations.setText("Vacaciones:");
        jlVacations.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jlVacations);

        jtfVacationsBenefit.setEditable(false);
        jtfVacationsBenefit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacationsBenefit.setText("0");
        jtfVacationsBenefit.setToolTipText("");
        jtfVacationsBenefit.setFocusable(false);
        jtfVacationsBenefit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jtfVacationsBenefit);

        jlVacationsBenefit.setText("días");
        jlVacationsBenefit.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel28.add(jlVacationsBenefit);

        jtfVacationsPropPer.setEditable(false);
        jtfVacationsPropPer.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacationsPropPer.setText("0 %");
        jtfVacationsPropPer.setToolTipText("");
        jtfVacationsPropPer.setFocusable(false);
        jtfVacationsPropPer.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jtfVacationsPropPer);

        jtfVacationsProp.setEditable(false);
        jtfVacationsProp.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacationsProp.setText("0");
        jtfVacationsProp.setToolTipText("");
        jtfVacationsProp.setFocusable(false);
        jtfVacationsProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jtfVacationsProp);

        jlVacationsProp.setText("días");
        jlVacationsProp.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel28.add(jlVacationsProp);

        jtfVacationsPayProp.setEditable(false);
        jtfVacationsPayProp.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacationsPayProp.setText("0");
        jtfVacationsPayProp.setToolTipText("");
        jtfVacationsPayProp.setFocusable(false);
        jtfVacationsPayProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jtfVacationsPayProp);

        jlVacationsPayProp.setText("CUR");
        jlVacationsPayProp.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel28.add(jlVacationsPayProp);

        jPanel10.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVacationsBonus.setText("Prima vac.:");
        jlVacationsBonus.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlVacationsBonus);

        jtfVacationsBonusBenefit.setEditable(false);
        jtfVacationsBonusBenefit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacationsBonusBenefit.setText("0 %");
        jtfVacationsBonusBenefit.setToolTipText("");
        jtfVacationsBonusBenefit.setFocusable(false);
        jtfVacationsBonusBenefit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jtfVacationsBonusBenefit);

        jlDummy3.setPreferredSize(new java.awt.Dimension(215, 23));
        jPanel29.add(jlDummy3);

        jtfVacationsBonusPayProp.setEditable(false);
        jtfVacationsBonusPayProp.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacationsBonusPayProp.setText("0");
        jtfVacationsBonusPayProp.setToolTipText("");
        jtfVacationsBonusPayProp.setFocusable(false);
        jtfVacationsBonusPayProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jtfVacationsBonusPayProp);

        jlVacationsBonusPayProp.setText("CUR");
        jlVacationsBonusPayProp.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel29.add(jlVacationsBonusPayProp);

        jPanel10.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSettlement.setText("Liquidación:");
        jlSettlement.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlSettlement);

        jtfSettlement.setEditable(false);
        jtfSettlement.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSettlement.setText("0");
        jtfSettlement.setToolTipText("");
        jtfSettlement.setFocusable(false);
        jtfSettlement.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jtfSettlement);

        jlRJDj.setForeground(new java.awt.Color(109, 109, 109));
        jlRJDj.setText("RJDj");
        jlRJDj.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel30.add(jlRJDj);

        jtfSettlementDisL.setEditable(false);
        jtfSettlementDisL.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSettlementDisL.setText("0");
        jtfSettlementDisL.setToolTipText("");
        jtfSettlementDisL.setFocusable(false);
        jtfSettlementDisL.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jtfSettlementDisL);

        jlDisL.setForeground(new java.awt.Color(109, 109, 109));
        jlDisL.setText("DisL");
        jlDisL.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel30.add(jlDisL);

        jtfSettlementDicL.setEditable(false);
        jtfSettlementDicL.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSettlementDicL.setText("0");
        jtfSettlementDicL.setToolTipText("");
        jtfSettlementDicL.setFocusable(false);
        jtfSettlementDicL.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jtfSettlementDicL);

        jlDicL.setForeground(new java.awt.Color(109, 109, 109));
        jlDicL.setText("DicL");
        jlDicL.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel30.add(jlDicL);

        jPanel10.add(jPanel30);

        jPanel12.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel5.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jlPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPhoto.setText("FTOGRAFÍA");
        jlPhoto.setPreferredSize(new java.awt.Dimension(150, 100));
        jPanel8.add(jlPhoto, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel8, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jlSignature.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSignature.setText("FIRMA");
        jlSignature.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel2.add(jlSignature, java.awt.BorderLayout.SOUTH);

        jPanel6.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JFormattedTextField jftDateBenefits;
    private javax.swing.JFormattedTextField jftDateBirth;
    private javax.swing.JFormattedTextField jftDateChangeSalary;
    private javax.swing.JFormattedTextField jftDateChangeSalarySscBase;
    private javax.swing.JFormattedTextField jftDateChangeWage;
    private javax.swing.JFormattedTextField jftDateLastDismiss_n;
    private javax.swing.JFormattedTextField jftDateLastHire;
    private javax.swing.JLabel jlAlternativeId;
    private javax.swing.JLabel jlAnnualBonus;
    private javax.swing.JLabel jlAnnualBonusBenefit;
    private javax.swing.JLabel jlAnnualBonusPayProp;
    private javax.swing.JLabel jlAnnualBonusProp;
    private javax.swing.JLabel jlBank;
    private javax.swing.JLabel jlBankAccount;
    private javax.swing.JLabel jlBenefit;
    private javax.swing.JLabel jlBenefitProp;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateBirth;
    private javax.swing.JLabel jlDateLastDismiss_n;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlDicL;
    private javax.swing.JLabel jlDisL;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlEducationType;
    private javax.swing.JLabel jlFirstName;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlFkBloodType;
    private javax.swing.JLabel jlMarital;
    private javax.swing.JLabel jlMwzType;
    private javax.swing.JLabel jlPaymentProp;
    private javax.swing.JLabel jlPhoto;
    private javax.swing.JLabel jlProportional;
    private javax.swing.JLabel jlRJDj;
    private javax.swing.JLabel jlSalary;
    private javax.swing.JLabel jlSalarySscBase;
    private javax.swing.JLabel jlSeniority;
    private javax.swing.JLabel jlSeniorityDays;
    private javax.swing.JLabel jlSeniorityYear;
    private javax.swing.JLabel jlSettlement;
    private javax.swing.JLabel jlSex;
    private javax.swing.JLabel jlSignature;
    private javax.swing.JLabel jlSocialSecurityNumber;
    private javax.swing.JLabel jlVacations;
    private javax.swing.JLabel jlVacationsBenefit;
    private javax.swing.JLabel jlVacationsBonus;
    private javax.swing.JLabel jlVacationsBonusPayProp;
    private javax.swing.JLabel jlVacationsPayProp;
    private javax.swing.JLabel jlVacationsProp;
    private javax.swing.JLabel jlWage;
    private javax.swing.JLabel jlWorkingHoursDay;
    private javax.swing.JPanel jpEmployeesAvailable;
    private javax.swing.JTextField jtfAlternativeId;
    private javax.swing.JTextField jtfAnnualBonusBenefit;
    private javax.swing.JTextField jtfAnnualBonusPayProp;
    private javax.swing.JTextField jtfAnnualBonusProp;
    private javax.swing.JTextField jtfAnnualBonusPropPer;
    private javax.swing.JTextField jtfBank;
    private javax.swing.JTextField jtfBankAccount;
    private javax.swing.JTextField jtfBloodType;
    private javax.swing.JTextField jtfEducationType;
    private javax.swing.JTextField jtfFirstName;
    private javax.swing.JTextField jtfFiscalId;
    private javax.swing.JTextField jtfMarital;
    private javax.swing.JTextField jtfMwzType;
    private javax.swing.JTextField jtfSalary;
    private javax.swing.JTextField jtfSalarySscBase;
    private javax.swing.JTextField jtfSeniority;
    private javax.swing.JTextField jtfSeniorityDays;
    private javax.swing.JTextField jtfSettlement;
    private javax.swing.JTextField jtfSettlementDicL;
    private javax.swing.JTextField jtfSettlementDisL;
    private javax.swing.JTextField jtfSex;
    private javax.swing.JTextField jtfSocialSecurityNumber;
    private javax.swing.JTextField jtfVacationsBenefit;
    private javax.swing.JTextField jtfVacationsBonusBenefit;
    private javax.swing.JTextField jtfVacationsBonusPayProp;
    private javax.swing.JTextField jtfVacationsPayProp;
    private javax.swing.JTextField jtfVacationsProp;
    private javax.swing.JTextField jtfVacationsPropPer;
    private javax.swing.JTextField jtfWage;
    private javax.swing.JTextField jtfWorkingHoursDay;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsExtra() throws Exception {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;
        mbHasRightEmpWage = miClient.getSessionXXX().getUser().hasRight(miClient, SDataConstantsSys.PRV_HRS_CAT_EMP_WAGE).HasRight;

        moTablePaneEmpAvailable = new STablePaneGrid(miClient);
        jpEmployeesAvailable.add(moTablePaneEmpAvailable, BorderLayout.CENTER);

        resetEmployee();
        resetBenefits();
        resetSettlement();
        i = 0;
        aoTableColumns = new STableColumnForm[16];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 250);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 75);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Periodo pago", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo empleado", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Calle", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número ext.", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número int.", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Colonia", 150);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "CP", 50);
        aoTableColumns[i++].setApostropheOnCsvRequired(true);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "AP", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Localidad", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Municipio", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Estado", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "País", 50);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpAvailable.addTableColumn(aoTableColumns[i]);
        }
        populateBenefits();
        populateEmployee();
    }
    
    private ArrayList<SDbBenefitTable> getBenefitTable(int benefitTableType) throws Exception {
        int benefitId = 0;
        SDbBenefitTable benfitTables = null;
        ArrayList<SDbBenefitTable> aBenefitTables = new ArrayList<SDbBenefitTable>();
        HashSet<Integer> requiredPaymentType = new HashSet<>();
        
        requiredPaymentType.add(SModSysConsts.HRSS_TP_PAY_WEE);
        requiredPaymentType.add(SModSysConsts.HRSS_TP_PAY_FOR);

        for (Integer payment : requiredPaymentType) {
            benefitId = SHrsUtils.getRecentBenefitTable(miClient.getSession(), benefitTableType, payment, miClient.getSession().getCurrentDate());
            
            benfitTables = new SDbBenefitTable();
            benfitTables.read(miClient.getSession(), new int[] { benefitId });
            aBenefitTables.add(benfitTables);
        }
        
        return aBenefitTables;
    }
    
    private void populateBenefits() throws Exception {
        int i = 0;
        
        maBenefitTableAnnByAnniversarys = new ArrayList<SHrsBenefitTableByAnniversary>();
        maBenefitTableVacationByAnniversary = new ArrayList<SHrsBenefitTableByAnniversary>();
        maBenefitTableVacationBonByAnniversary = new ArrayList<SHrsBenefitTableByAnniversary>();
        
        for (SDbBenefitTable table : getBenefitTable(SModSysConsts.HRSS_TP_BEN_ANN_BON)) {
            i = 1;
            for (SDbBenefitTableRow tableRow : table.getChildRows()) {
                while ( i * 12 <= tableRow.getMonths()) {
                    maBenefitTableAnnByAnniversarys.add(new SHrsBenefitTableByAnniversary(table.getPkBenefitId(), i, tableRow.getBenefitDays()));
                    i++;
                }
            }
        }
        for (SDbBenefitTable table : getBenefitTable(SModSysConsts.HRSS_TP_BEN_VAC)) {
            i = 1;
            for (SDbBenefitTableRow tableRow : table.getChildRows()) {
                while ( i * 12 <= tableRow.getMonths()) {
                    maBenefitTableVacationByAnniversary.add(new SHrsBenefitTableByAnniversary(table.getPkBenefitId(), i, tableRow.getBenefitDays()));
                    i++;
                }
            }
        }
        for (SDbBenefitTable table : getBenefitTable(SModSysConsts.HRSS_TP_BEN_VAC_BON)) {
            i = 1;
            for (SDbBenefitTableRow tableRow : table.getChildRows()) {
                while ( i * 12 <= tableRow.getMonths()) {
                    maBenefitTableVacationBonByAnniversary.add(new SHrsBenefitTableByAnniversary(table.getPkBenefitId(), i, tableRow.getBenefitBonusPercentage()));
                    i++;
                }
            }
        }
    }
    
    private void populateEmployee() throws Exception {
        String sql = "";
        ResultSet resultSet = null;
        int employeeId = 0;
        
        moTablePaneEmpAvailable.createTable(this);
        moTablePaneEmpAvailable.clearTableRows();
        
        sql = "SELECT emp.*, bp.bp, dep.name, ct.code, tp.code, pay.name, a.street, a.street_num_ext, a.street_num_int, a.neighborhood, a.reference, " +
                "a.locality, a.county, a.state, a.zip_code, a.po_box, IF(cty.cty IS NULL, 'MÉXICO', cty.cty) AS f_cty " +
                "FROM erp.hrsu_emp AS emp " +
                "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = emp.fk_dep " +
                "INNER JOIN erp.hrsu_tp_emp AS ct ON ct.id_tp_emp = emp.fk_tp_emp " +
                "INNER JOIN erp.hrsu_tp_wrk AS tp ON tp.id_tp_wrk = emp.fk_tp_wrk " +
                "INNER JOIN erp.hrss_tp_pay AS pay ON pay.id_tp_pay = emp.fk_tp_pay " +
                "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                "INNER JOIN erp.bpsu_bpb AS bpb ON bpb.fid_bp = bp.id_bp " +
                "INNER JOIN erp.bpsu_bpb_add AS a ON a.id_bpb = bpb.id_bpb " +
                "LEFT OUTER JOIN erp.locu_cty AS cty ON cty.id_cty = a.fid_cty_n " + 
                "WHERE emp.b_del = 0 AND bp.b_del = 0 " + 
                "GROUP BY emp.id_emp " +
                "ORDER BY bp.bp, emp.id_emp, pay.name ";

        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        while (resultSet.next()) {
            SRowIntegralEmployee row = new SRowIntegralEmployee();

            employeeId = resultSet.getInt("id_emp");
            row.setPrimaryKey(new int[] { employeeId });
            row.setPkEmployeeId(employeeId);
            row.setEmployeeNumber(resultSet.getString("emp.num"));
            row.setEmployeeName(resultSet.getString("bp.bp"));
            row.setEmployeeCategory(resultSet.getString("ct.code"));
            row.setEmployeeType(resultSet.getString("tp.code"));
            row.setDepartament(resultSet.getString("dep.name"));
            row.setSalaryType(resultSet.getString("pay.name"));
            row.setStreet(resultSet.getString("a.street"));
            row.setStreetNumberExt(resultSet.getString("a.street_num_ext"));
            row.setStreetNumberInt(resultSet.getString("a.street_num_int"));
            row.setNeighborhood(resultSet.getString("a.neighborhood"));
            row.setLocality(resultSet.getString("a.locality"));
            row.setCounty(resultSet.getString("a.county"));
            row.setState(resultSet.getString("a.state"));
            row.setZipCode(resultSet.getString("a.zip_code"));
            row.setPoBox(resultSet.getString("a.po_box"));
            row.setCountry(resultSet.getString("f_cty"));
        
            row.prepareTableRow();
            moTablePaneEmpAvailable.addTableRow(row);
        }

        moTablePaneEmpAvailable.renderTableRows();
        moTablePaneEmpAvailable.setTableRowSelection(0);
    }
    
    public void resetEmployee() {
        jtfFirstName.setText("");
        jtfFiscalId.setText("");
        jtfAlternativeId.setText("");
        jtfSocialSecurityNumber.setText("");
        jftDateBirth.setText(" / / ");
        jftDateBenefits.setText(" / / ");
        jftDateLastHire.setText(" / / ");
        jftDateLastDismiss_n.setText(" / / ");
        jtfBank.setText("");
        jtfBankAccount.setText("");
        jtfSex.setText("");
        jtfBloodType.setText("");
        jtfEducationType.setText("");
        jtfMwzType.setText("");
        jtfWorkingHoursDay.setText("0");
        resetEmployeeWage();
        moBizPartner = null;
    }
    
    private void resetEmployeeWage() {
        jtfSalary.setText("0.00");
        jftDateChangeSalary.setText(" / / ");
        jtfWage.setText("0.00");
        jftDateChangeWage.setText(" / / ");
        jtfSalarySscBase.setText("0.00");
        jftDateChangeSalarySscBase.setText(" / / ");
    }
    
    private void resetBenefits() {
        jtfAnnualBonusBenefit.setText("0");
        jtfAnnualBonusPropPer.setText("0");
        jtfAnnualBonusProp.setText("0");
        jtfAnnualBonusPayProp.setText("0");
        jtfVacationsBenefit.setText("0");
        jtfVacationsPropPer.setText("0");
        jtfVacationsProp.setText("0");
        jtfVacationsPayProp.setText("0");
        jtfVacationsBonusBenefit.setText("0");
        jtfVacationsBonusPayProp.setText("0");
    }
    
    private void resetSettlement() {
        jtfSettlement.setText("0");
        jtfSettlementDisL.setText("0");
        jtfSettlementDicL.setText("0");
    }
    
    private void renderEmployee(int employeeId) {
        SDataEmployee employee = null;
        
        try {
            moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { employeeId }, SLibConstants.EXEC_MODE_SILENT); 
            employee = moBizPartner.getDbmsDataEmployee();

            jtfFirstName.setText(moBizPartner.getBizPartner());
            jtfFiscalId.setText(moBizPartner.getFiscalId());
            jtfAlternativeId.setText(moBizPartner.getAlternativeId());
            jtfSocialSecurityNumber.setText(employee.getSocialSecurityNumber());
            jftDateBirth.setText(SLibUtils.DateFormatDate.format(employee.getDateBirth()));
            jftDateBenefits.setText(SLibUtils.DateFormatDate.format(employee.getDateBenefits()));
            jftDateLastHire.setText(SLibUtils.DateFormatDate.format(employee.getDateLastHire()));
            if (employee.getDateLastDismiss_n() != null) {
                jftDateLastDismiss_n.setText(SLibUtils.DateFormatDate.format(employee.getDateLastDismiss_n()));
            }
            jtfSalary.setText(SLibUtils.DecimalFormatValue2D.format(employee.getSalary()) + "");
            jftDateChangeSalary.setText(SLibUtils.DateFormatDate.format(employee.getDateSalary()));
            jtfWage.setText(SLibUtils.DecimalFormatValue2D.format(employee.getWage()) + "");
            jftDateChangeWage.setText(SLibUtils.DateFormatDate.format(employee.getDateWage()));
            jtfSalarySscBase.setText(SLibUtils.DecimalFormatValue2D.format(employee.getSalarySscBase()) + "");
            jftDateChangeSalarySscBase.setText(SLibUtils.DateFormatDate.format(employee.getDateSalarySscBase()));
            
            if (employee.getFkBankId_n() != SLibConsts.UNDEFINED) {
                jtfBank.setText(miClient.getSession().readField(SModConsts.HRSS_BANK, new int[] { employee.getFkBankId_n() }, SDbRegistry.FIELD_NAME) + "");
            }
            jtfBankAccount.setText(employee.getBankAccount());
            jtfSex.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { employee.getFkCatalogueSexCategoryId(), employee.getFkCatalogueSexTypeId() }, SDbRegistry.FIELD_NAME) + "");
            jtfMarital.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { employee.getFkCatalogueMaritalStatusCategoryId(), employee.getFkCatalogueMaritalStatusTypeId() }, SDbRegistry.FIELD_NAME) + "");
            jtfBloodType.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { employee.getFkCatalogueBloodTypeCategoryId(), employee.getFkCatalogueBloodTypeTypeId() }, SDbRegistry.FIELD_NAME) + "");
            jtfEducationType.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { employee.getFkCatalogueEducationCategoryId(), employee.getFkCatalogueEducationTypeId() }, SDbRegistry.FIELD_NAME) + "");
            jtfMwzType.setText(miClient.getSession().readField(SModConsts.HRSU_TP_MWZ, new int[] { employee.getFkMwzTypeId() }, SDbRegistry.FIELD_NAME) + "");
            jtfWorkingHoursDay.setText(employee.getWorkingHoursDay() + "");
            
            if (employee.getXtaImageIconPhoto_n() != null) {
                jlPhoto.setIcon(employee.getXtaImageIconPhoto_n());
                jlPhoto.setText("");
            }
            else {
                jlPhoto.setIcon(null);
                jlPhoto.setText("- FOTOGRAFÍA NO DISPONIBLE -");
            }
            if (employee.getXtaImageIconSignature_n() != null) {
                jlSignature.setIcon(employee.getXtaImageIconSignature_n());
                jlSignature.setText("");
            }
            else {
                jlSignature.setIcon(null);
                jlSignature.setText("- FIRMA NO DISPONIBLE -");
            }
            renderBenefit(employee);
            
            if (!mbHasRightEmpWage) {
                resetEmployeeWage();
                resetBenefits();
                resetSettlement();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void renderBenefit(SDataEmployee employee) {
        double paymentDaily = 0;
        int benefitAnn = 0;
        Date mtDateCut = null;
        Date mtDateBase = null;
        Date mtDateBaseAnn = null;
        boolean leapYear = false;
        int daysElapsed = 0;
        int daysElapsedAnn = 0;
        double daysProportionalAnnualBonus = 0;
        double daysProportionalVacations = 0;
        SDbConfig config = null;
        SHrsBenefitTableByAnniversary benefitTableRow = null;
        
        try {
            jlAnnualBonusPayProp.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
            jlVacationsPayProp.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
            jlVacationsBonusPayProp.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
            
            config = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });
            mtDateCut = miClient.getSession().getCurrentDate();
            leapYear = SLibTimeUtils.isLeapYear(SLibTimeUtils.digestYear(mtDateCut)[0]);
            
            benefitAnn = SHrsUtils.getSeniorityEmployee(miClient.getSession(), employee.getDateBenefits(), mtDateCut);
            paymentDaily = (employee.getFkPaymentTypeId() == SModSysConsts.HRSS_TP_PAY_WEE ? employee.getSalary() :
                (config.isFornightStandard() ? ((employee.getWage() * SHrsConsts.YEAR_MONTHS) / (SHrsConsts.FORNIGHT_FIXED_DAYS * SHrsConsts.YEAR_FORNIGHTS)) :
                ((employee.getWage() * SHrsConsts.YEAR_MONTHS) / SHrsConsts.YEAR_DAYS)));
            
            if (employee.getDateBenefits().compareTo(SLibTimeUtils.getBeginOfYear(mtDateCut)) >= 0) {
                mtDateBaseAnn = employee.getDateBenefits();
            }
            else {
                mtDateBaseAnn = SLibTimeUtils.getBeginOfYear(mtDateCut);
            }
            
            mtDateBase = SLibTimeUtils.addDate(employee.getDateBenefits(), benefitAnn, 0, 0);
            
            jtfSeniority.setText(benefitAnn + "");
            jtfSeniorityDays.setText(((int) SLibTimeUtils.getDaysDiff(mtDateCut, SLibTimeUtils.addDate(employee.getDateBenefits(), benefitAnn, 0, 0))) + "");
            daysElapsed = ((int) SLibTimeUtils.getDaysDiff(mtDateCut, mtDateBase) + 1);
            daysElapsedAnn = ((int) SLibTimeUtils.getDaysDiff(mtDateCut, mtDateBaseAnn) + 1);
            benefitAnn = benefitAnn == 0 ? 1 : benefitAnn;
            
            // Calculate annual bonus:
            
            for (SHrsBenefitTableByAnniversary row : maBenefitTableAnnByAnniversarys) {
                if (row.getBenefitAnn() <= benefitAnn) {
                    benefitTableRow = row;
                }
            }
            daysProportionalAnnualBonus = (benefitTableRow == null ? 0 : (daysElapsedAnn * benefitTableRow.getValue() / (leapYear ? SHrsConsts.YEAR_DAYS + 1 : SHrsConsts.YEAR_DAYS)));
            
            jtfAnnualBonusBenefit.setText(SLibUtils.DecimalFormatValue0D.format(benefitTableRow == null ? 0 : benefitTableRow.getValue()) + "");
            jtfAnnualBonusPropPer.setText(SLibUtils.DecimalFormatPercentage2D.format((benefitTableRow == null ? 0 : (daysProportionalAnnualBonus / benefitTableRow.getValue()))) + "");
            jtfAnnualBonusProp.setText(SLibUtils.DecimalFormatValue2D.format(daysProportionalAnnualBonus) + "");
            jtfAnnualBonusPayProp.setText(SLibUtils.DecimalFormatValue2D.format(daysProportionalAnnualBonus * paymentDaily) + "");
            
            // Calculate vacations:
            
            for (SHrsBenefitTableByAnniversary row : maBenefitTableVacationByAnniversary) {
                if (row.getBenefitAnn() <= benefitAnn) {
                    benefitTableRow = row;
                }
            }
            daysProportionalVacations = (benefitTableRow == null ? 0 : (daysElapsed * benefitTableRow.getValue() / (leapYear ? SHrsConsts.YEAR_DAYS + 1 : SHrsConsts.YEAR_DAYS)));
            
            jtfVacationsBenefit.setText(SLibUtils.DecimalFormatValue0D.format(benefitTableRow == null ? 0 : benefitTableRow.getValue()) + "");
            jtfVacationsPropPer.setText(SLibUtils.DecimalFormatPercentage2D.format((benefitTableRow == null ? 0 : (daysProportionalVacations / benefitTableRow.getValue()))) + "");
            jtfVacationsProp.setText(SLibUtils.DecimalFormatValue2D.format(daysProportionalVacations) + "");
            jtfVacationsPayProp.setText(SLibUtils.DecimalFormatValue2D.format(daysProportionalVacations * paymentDaily) + "");
            
            // Calculate vacations bonus:
            
            for (SHrsBenefitTableByAnniversary row : maBenefitTableVacationBonByAnniversary) {
                if (row.getBenefitAnn() <= benefitAnn) {
                    benefitTableRow = row;
                }
            }
            
            jtfVacationsBonusBenefit.setText(SLibUtils.DecimalFormatPercentage2D.format((benefitTableRow == null ? 0 : benefitTableRow.getValue())) + "");
            jtfVacationsBonusPayProp.setText(SLibUtils.DecimalFormatValue2D.format((benefitTableRow == null ? 0 : (daysProportionalVacations * benefitTableRow.getValue() * paymentDaily))) + "");
            renderSettlement(Integer.parseInt(jtfSeniority.getText()), Integer.parseInt(jtfSeniorityDays.getText()), paymentDaily, config.getFkMwzReferenceTypeId());
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }   
    }
    
    private void renderSettlement(int seniority, int seniorityDays, double paymentDaily, int mwzReferenceId) throws Exception {
        double rjdj = 0;
        double disl = 0;
        double dicl = 0;
        double MwzReferenceWage = 0;
        
        MwzReferenceWage = SHrsUtils.getRecentMwz(miClient.getSession(), mwzReferenceId, miClient.getSession().getCurrentDate());
        
        rjdj = (Double.parseDouble(jtfAnnualBonusPayProp.getText().replaceAll(",", "")) + Double.parseDouble(jtfVacationsPayProp.getText().replaceAll(",", "")) + Double.parseDouble(jtfVacationsBonusPayProp.getText().replaceAll(",", "")));
        disl = (Double.parseDouble(jtfAnnualBonusPayProp.getText().replaceAll(",", "")) + Double.parseDouble(jtfVacationsPayProp.getText().replaceAll(",", "")) + Double.parseDouble(jtfVacationsBonusPayProp.getText().replaceAll(",", "")));
        dicl = (Double.parseDouble(jtfAnnualBonusPayProp.getText().replaceAll(",", "")) + Double.parseDouble(jtfVacationsPayProp.getText().replaceAll(",", "")) + Double.parseDouble(jtfVacationsBonusPayProp.getText().replaceAll(",", "")));
        
        if (seniority >= 15) {
            rjdj += (12 * (paymentDaily > (2 * MwzReferenceWage) ? (2 * MwzReferenceWage) : paymentDaily) * ((double) seniority + ((double) seniorityDays / SHrsConsts.YEAR_DAYS)));
            disl += (12 * (paymentDaily > (2 * MwzReferenceWage) ? (2 * MwzReferenceWage) : paymentDaily) * ((double) seniority + ((double) seniorityDays / SHrsConsts.YEAR_DAYS)));
            dicl += (12 * (paymentDaily > (2 * MwzReferenceWage) ? (2 * MwzReferenceWage) : paymentDaily) * ((double) seniority + ((double) seniorityDays / SHrsConsts.YEAR_DAYS)));
        }
        disl += ((3 * 30.42) * paymentDaily);
        dicl += ((3 * 30.42) * paymentDaily) + (20 * ((double) seniority + ((double) seniorityDays / SHrsConsts.YEAR_DAYS)) * paymentDaily);
        
        jtfSettlement.setText(SLibUtils.DecimalFormatValue2D.format(rjdj) + "");
        jtfSettlementDisL.setText(SLibUtils.DecimalFormatValue2D.format(disl) + "");
        jtfSettlementDicL.setText(SLibUtils.DecimalFormatValue2D.format(dicl) + "");
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public int getTabType() {
        return mnPanelType;
    }

    @Override
    public int getTabTypeAux01() {
        return SLibConstants.UNDEFINED;
    }

    @Override
    public int getTabTypeAux02() {
        return SLibConstants.UNDEFINED;
    }

    @Override
    public Vector<Integer> getSuscriptors() {
        return new Vector<Integer>();
    }

    @Override
    public Vector<STableSetting> getTableSettings() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void addSetting(STableSetting setting) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void updateSetting(STableSetting setting) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionRefresh(int mode) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            SRowIntegralEmployee row = (SRowIntegralEmployee) moTablePaneEmpAvailable.getSelectedTableRow();

            if (row != null) {
                renderEmployee(row.getPkEmployeeId());
            }
        }
    }
}
