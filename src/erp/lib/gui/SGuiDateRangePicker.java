/*
 * SGuiDateRangePicker.java
 *
 * Created on 3 de abril de 2008, 08:26 PM
 */

package erp.lib.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;

/**
 *
 * @author Sergio Flores
 */
public class SGuiDateRangePicker extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldDateBegin;
    private erp.lib.form.SFormField moFieldDateEnd;

    /** Creates new form SGuiDateRangePicker */
    public SGuiDateRangePicker(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateBegin = new javax.swing.JLabel();
        jftDateBegin = new javax.swing.JFormattedTextField();
        jbDateBegin = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Per√≠odo por rango de fechas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel6.add(jbCancel);

        getContentPane().add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Rango de fechas:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateBegin.setText("Fecha inicial:");
        jlDateBegin.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel3.add(jlDateBegin);

        jftDateBegin.setText("yyyy/mm/dd");
        jftDateBegin.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jftDateBegin);

        jbDateBegin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateBegin.setFocusable(false);
        jbDateBegin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbDateBegin);

        jPanel1.add(jPanel3);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel2.add(jlDateEnd);

        jftDateEnd.setText("yyyy/mm/dd");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbDateEnd);

        jPanel1.add(jPanel2);

        jPanel4.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-200)/2, 400, 200);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateBegin.requestFocus();
        }
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldDateBegin = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateBegin, jlDateBegin);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);

        mvFields.add(moFieldDateBegin);
        mvFields.add(moFieldDateEnd);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDateBegin.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jftDateBegin.addActionListener(this);
        jftDateEnd.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void actionDateBegin() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateBegin.getDate(), moFieldDateBegin);
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateBegin;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbOk;
    private javax.swing.JFormattedTextField jftDateBegin;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JLabel jlDateBegin;
    private javax.swing.JLabel jlDateEnd;
    // End of variables declaration//GEN-END:variables

    public void setDateBegin(java.util.Date date) {
        if (date == null) {
            moFieldDateBegin.setDate(miClient.getSessionXXX().getWorkingDate());
        }
        else {
            moFieldDateBegin.setDate(date);
        }
    }

    public void setDateEnd(java.util.Date date) {
        if (date == null) {
            moFieldDateEnd.setDate(miClient.getSessionXXX().getWorkingDate());
        }
        else {
            moFieldDateEnd.setDate(date);
        }
    }

    public java.util.Date getDateBegin() {
        return moFieldDateBegin.getDate();
    }

    public java.util.Date getDateEnd() {
        return moFieldDateEnd.getDate();
    }

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moFieldDateBegin.setDate(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setDate(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!mvFields.get(i).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldDateEnd.getDate().before(moFieldDateBegin.getDate())) {
                validation.setMessage("La fecha final no puede ser anterior a la fecha inicial.");
                validation.setComponent(moFieldDateEnd.getComponent());
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbDateBegin) {
                actionDateBegin();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
            else if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            javax.swing.JTextField textField = (javax.swing.JTextField) e.getSource();

            if (textField == jftDateBegin) {
                jftDateEnd.requestFocus();
            }
            else if (textField == jftDateEnd) {
                jbOk.requestFocus();
            }
        }
    }
}
