/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.lib.table;

/*
import erp.form.*;
import erp.lib.*;
import erp.data.*;
*/

/**
 *
 * @author Sergio Flores
 */
public class STabFilterDocTypeID extends javax.swing.JPanel {
    
    int mnFilterType;
    int mnDocTypeID;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STableTabInterface miTableTab;
    //private erp.data.DDataUtilityDocSettings moDocSettings;
    //private erp.form.DDialogSelectDocTypeID moDialogSelectDocTypeID;
    
    /** Creates new form STabFilterDocTypeID */
    public STabFilterDocTypeID(erp.client.SClientInterface client, erp.lib.table.STableTabInterface tableTab, int filterType) {
        miClient = client;
        miTableTab = tableTab;
        mnFilterType = filterType;
        initComponents();
        initComponentsExtra();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfDocType = new javax.swing.JTextField();
        jbDocType = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jtfDocType.setEditable(false);
        jtfDocType.setText("DOC");
        jtfDocType.setToolTipText("Tipo de documento");
        jtfDocType.setFocusable(false);
        jtfDocType.setPreferredSize(new java.awt.Dimension(35, 20));
        add(jtfDocType);

        jbDocType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_doc_type.gif"))); // NOI18N
        jbDocType.setToolTipText("Seleccionar tipo de documento");
        jbDocType.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDocType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDocTypeActionPerformed(evt);
            }
        });
        add(jbDocType);
    }// </editor-fold>//GEN-END:initComponents

    private void jbDocTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDocTypeActionPerformed
        actionDocType();
}//GEN-LAST:event_jbDocTypeActionPerformed
    
    private void initComponentsExtra() {
        /*
        moDocSettings = new DDataUtilityDocSettings(miClient, mnFilterType, DDataConstants.UNDEFINED, DDataConstants.UNDEFINED);
        moDialogSelectDocTypeID = new DDialogSelectDocTypeID(miClient, true, mnFilterType, true);
        moDialogSelectDocTypeID.formRefreshCatalogues();
        mnDocTypeID = DDataConstants.UNDEFINED;
        jtfDocType.setText("");
        */
    }
    
    private void actionDocType() {
        /*
        moDialogSelectDocTypeID.formReset();
        moDialogSelectDocTypeID.setVisible(true);
        if (moDialogSelectDocTypeID.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            mnDocTypeID = moDialogSelectDocTypeID.getDocTypeID();
            if (mnDocTypeID == DDataConstants.UNDEFINED) {
                jtfDocType.setText("");
            }
            else {
                jtfDocType.setText(DDataUtilities.readDocTypeCode(miClient, new int[] { moDocSettings.getDocCategoryID(), mnDocTypeID }));
            }
            moTableTab.setFilterDocTypeID(mnDocTypeID);
        }
        */
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDocType;
    private javax.swing.JTextField jtfDocType;
    // End of variables declaration//GEN-END:variables
    
}
