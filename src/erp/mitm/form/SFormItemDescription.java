/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormItemDescription.java
 *
 * Created on 24/06/2010, 09:18:53 AM
 */

package erp.mitm.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataItemBizPartnerDescription;
import erp.mitm.data.SDataUnit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores
 */
public class SFormItemDescription extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataItemBizPartnerDescription moItemBizPartnerDescription;
    private erp.lib.form.SFormField moFieldPkItemId;
    private erp.lib.form.SFormField moFieldKey;
    private erp.lib.form.SFormField moFieldItem;
    private erp.lib.form.SFormField moFieldItemShort;
    private erp.lib.form.SFormField moFieldFkUnitId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.mitm.data.SDataItem moItem;

    /** Creates new form SFormItemDescription */
    public SFormItemDescription(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;
        mnFormType = SDataConstants.ITMU_CFG_ITEM_BP;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPkItemId = new javax.swing.JLabel();
        jcbPkItemId = new javax.swing.JComboBox();
        jbPkItemId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlOriginalKey = new javax.swing.JLabel();
        jtfOriginalKey = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlOriginalItem = new javax.swing.JLabel();
        jtfOriginalItem = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlOriginalItemShort = new javax.swing.JLabel();
        jtfOriginalItemShort = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlOriginalUnit = new javax.swing.JLabel();
        jtfOriginalUnit = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlKey = new javax.swing.JLabel();
        jtfKey = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItem = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlItemShort = new javax.swing.JLabel();
        jtfItemShort = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlFkUnitId = new javax.swing.JLabel();
        jcbFkUnitId = new javax.swing.JComboBox();
        jbFkUnitId = new javax.swing.JButton();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Descripción de ítem");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(10, 1, 0, 1));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkItemId.setForeground(java.awt.Color.blue);
        jlPkItemId.setText("Ítem: *");
        jlPkItemId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel6.add(jlPkItemId);

        jcbPkItemId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkItemId.setPreferredSize(new java.awt.Dimension(268, 23));
        jcbPkItemId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkItemIdItemStateChanged(evt);
            }
        });
        jPanel6.add(jcbPkItemId);

        jbPkItemId.setText("jButton1");
        jbPkItemId.setToolTipText("Seleccionar ítem");
        jbPkItemId.setFocusable(false);
        jbPkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbPkItemId);

        jPanel3.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalKey.setText("Clave original:");
        jlOriginalKey.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel4.add(jlOriginalKey);

        jtfOriginalKey.setEditable(false);
        jtfOriginalKey.setText("ORIGINAL KEY");
        jtfOriginalKey.setFocusable(false);
        jtfOriginalKey.setPreferredSize(new java.awt.Dimension(296, 23));
        jPanel4.add(jtfOriginalKey);

        jPanel3.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalItem.setText("Ítem original:");
        jlOriginalItem.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jlOriginalItem);

        jtfOriginalItem.setEditable(false);
        jtfOriginalItem.setText("ORIGINAL ITEM");
        jtfOriginalItem.setFocusable(false);
        jtfOriginalItem.setPreferredSize(new java.awt.Dimension(296, 23));
        jPanel7.add(jtfOriginalItem);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalItemShort.setText("Ítem corto original:");
        jlOriginalItemShort.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel8.add(jlOriginalItemShort);

        jtfOriginalItemShort.setEditable(false);
        jtfOriginalItemShort.setText("ORIGINAL ITEM SHORT");
        jtfOriginalItemShort.setFocusable(false);
        jtfOriginalItemShort.setPreferredSize(new java.awt.Dimension(296, 23));
        jPanel8.add(jtfOriginalItemShort);

        jPanel3.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalUnit.setText("Unidad original:");
        jlOriginalUnit.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel9.add(jlOriginalUnit);

        jtfOriginalUnit.setEditable(false);
        jtfOriginalUnit.setText("ORIGINAL UNIT");
        jtfOriginalUnit.setFocusable(false);
        jtfOriginalUnit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfOriginalUnit);

        jPanel3.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlKey.setText("Clave asoc. neg.: *");
        jlKey.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel10.add(jlKey);

        jtfKey.setText("KEY");
        jtfKey.setPreferredSize(new java.awt.Dimension(296, 23));
        jPanel10.add(jtfKey);

        jPanel3.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem asoc. neg.: *");
        jlItem.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlItem);

        jtfItem.setText("ITEM");
        jtfItem.setPreferredSize(new java.awt.Dimension(296, 23));
        jtfItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfItemFocusLost(evt);
            }
        });
        jPanel11.add(jtfItem);

        jPanel3.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemShort.setText("Ítem corto asoc. neg.: *");
        jlItemShort.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel12.add(jlItemShort);

        jtfItemShort.setText("ITEM SHORT");
        jtfItemShort.setPreferredSize(new java.awt.Dimension(296, 23));
        jPanel12.add(jtfItemShort);

        jPanel3.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkUnitId.setText("Unidad asoc. neg.: *");
        jlFkUnitId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel13.add(jlFkUnitId);

        jcbFkUnitId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkUnitId.setPreferredSize(new java.awt.Dimension(268, 23));
        jPanel13.add(jcbFkUnitId);

        jbFkUnitId.setText("jButton2");
        jbFkUnitId.setToolTipText("Seleccionar unidad");
        jbFkUnitId.setFocusable(false);
        jbFkUnitId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbFkUnitId);

        jPanel3.add(jPanel13);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-460)/2, (screenSize.height-340)/2, 460, 340);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkItemIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkItemIdItemStateChanged
        itemStateChangedItem();
    }//GEN-LAST:event_jcbPkItemIdItemStateChanged

    private void jtfItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfItemFocusLost
        focusLostItem();
    }//GEN-LAST:event_jtfItemFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkItemId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkItemId, jlPkItemId);
        moFieldPkItemId.setPickerButton(jbPkItemId);
        moFieldKey = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfKey, jlKey);
        moFieldKey.setLengthMax(35);
        moFieldItem = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfItem, jlItem);
        moFieldItem.setLengthMax(255);
        moFieldItemShort = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfItemShort, jlItemShort);
        moFieldItemShort.setLengthMax(130);
        moFieldFkUnitId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkUnitId, jlFkUnitId);
        moFieldFkUnitId.setPickerButton(jbFkUnitId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkItemId);
        mvFields.add(moFieldKey);
        mvFields.add(moFieldItem);
        mvFields.add(moFieldItemShort);
        mvFields.add(moFieldFkUnitId);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkItemId.addActionListener(this);
        jbFkUnitId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moItemBizPartnerDescription != null ) {
                jtfKey.requestFocus();
            }
            else {
                jcbPkItemId.requestFocus();
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionPkItemId() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldPkItemId, null);
    }

    private void actionFkUnitId() {
        miClient.pickOption(SDataConstants.ITMU_UNIT, moFieldFkUnitId, new int[] { moItem.getDbmsDataItemGeneric().getFkUnitTypeId() });
    }

    private void renderComboBoxItem() {
        if (moItemBizPartnerDescription.getPkBizPartnerId() > 0) {
            jcbPkItemId.setEnabled(false);
            jbPkItemId.setEnabled(false);
        }
        else {
            jcbPkItemId.setEnabled(true);
            jbPkItemId.setEnabled(true);
        }
    }

    private void readItemSettings() {
        String key = "";
        String item = "";
        String itemShort = "";
        String unit = "";
        boolean isItemShortApplying = true;

        jcbFkUnitId.removeAllItems();
        renderUnitSettings(false);

        if (moFieldPkItemId.getKeyAsIntArray()[0] > 0) {
            moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldPkItemId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

            key = moItem.getKey();
            item = moItem.getName();
            itemShort = moItem.getNameShort();
            unit = moItem.getDbmsDataUnit().getSymbol();
            isItemShortApplying = moItem.getDbmsDataItemGeneric().getIsItemShortApplying();

            SFormUtilities.populateComboBox(miClient, jcbFkUnitId, SDataConstants.ITMU_UNIT, new int[] { moItem.getDbmsDataUnit().getFkUnitTypeId() });
            renderUnitSettings(true);
        }

        jtfOriginalKey.setText(key);
        jtfOriginalItem.setText(item);
        jtfOriginalItemShort.setText(itemShort);
        jtfOriginalUnit.setText(unit);

        renderTextFieldItemShort(isItemShortApplying);
    }

    private java.lang.String readUnitSymbol() {
        SDataUnit oUnit = new SDataUnit();

        oUnit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, moFieldFkUnitId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

        return oUnit.getSymbol();
    }

    private void renderTextFieldItemShort(boolean b) {
        jtfItemShort.setEnabled(b);
    }

    private void renderUnitSettings(boolean b) {
        jcbFkUnitId.setEnabled(b);
        jbFkUnitId.setEnabled(b);
    }

    private void itemStateChangedItem() {
        if (!mbResetingForm) {
            readItemSettings();
        }
    }

    private void copyItem() {
        if (jtfItemShort.getText().length() == 0) {
            if (jtfItem.getText().length() > moFieldItemShort.getLengthMax()) {
                jtfItemShort.setText(jtfItem.getText().substring(0, moFieldItemShort.getLengthMax() - 1));
            }
            else {
                jtfItemShort.setText(jtfItem.getText());
            }
        }
    }

    private void focusLostItem() {
        copyItem();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkUnitId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkItemId;
    private javax.swing.JComboBox jcbFkUnitId;
    private javax.swing.JComboBox jcbPkItemId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlFkUnitId;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlItemShort;
    private javax.swing.JLabel jlKey;
    private javax.swing.JLabel jlOriginalItem;
    private javax.swing.JLabel jlOriginalItemShort;
    private javax.swing.JLabel jlOriginalKey;
    private javax.swing.JLabel jlOriginalUnit;
    private javax.swing.JLabel jlPkItemId;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemShort;
    private javax.swing.JTextField jtfKey;
    private javax.swing.JTextField jtfOriginalItem;
    private javax.swing.JTextField jtfOriginalItemShort;
    private javax.swing.JTextField jtfOriginalKey;
    private javax.swing.JTextField jtfOriginalUnit;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moItemBizPartnerDescription = null;
        moItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jtfOriginalKey.setText("");
        jtfOriginalItem.setText("");
        jtfOriginalItemShort.setText("");
        jtfOriginalUnit.setText("");
        jcbFkUnitId.removeAllItems();
        jcbPkItemId.setEnabled(true);
        jbPkItemId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
        renderUnitSettings(false);
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbPkItemId, SDataConstants.ITMU_ITEM);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()){
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (jtfItemShort.isEnabled() && jtfItemShort.getText().length() == 0) {
                validation.setMessage("La longitud del campo '" + jlItemShort.getText() + "' no puede ser menor a 1.");
                validation.setComponent(jtfItemShort);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moItemBizPartnerDescription = (SDataItemBizPartnerDescription) registry;

        moFieldPkItemId.setFieldValue(new int[] { moItemBizPartnerDescription.getPkItemId() });
        moFieldKey.setFieldValue(moItemBizPartnerDescription.getKey());
        moFieldItem.setFieldValue(moItemBizPartnerDescription.getItem());
        moFieldItemShort.setFieldValue(moItemBizPartnerDescription.getItemShort());
        moFieldIsDeleted.setFieldValue(moItemBizPartnerDescription.getIsDeleted());

        readItemSettings();

        moFieldFkUnitId.setFieldValue(new int[] { moItemBizPartnerDescription.getFkUnitId() });

        renderComboBoxItem();
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moItemBizPartnerDescription == null) {
            moItemBizPartnerDescription = new SDataItemBizPartnerDescription();
            moItemBizPartnerDescription.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else  {
            moItemBizPartnerDescription.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moItemBizPartnerDescription.setPkItemId(moFieldPkItemId.getKeyAsIntArray()[0]);
        moItemBizPartnerDescription.setKey(moFieldKey.getString());
        moItemBizPartnerDescription.setItem(moFieldItem.getString());
        moItemBizPartnerDescription.setItemShort(moFieldItemShort.getString());
        moItemBizPartnerDescription.setFkUnitId(moFieldFkUnitId.getKeyAsIntArray()[0]);
        moItemBizPartnerDescription.setDbmsUnit(readUnitSymbol());
        moItemBizPartnerDescription.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moItemBizPartnerDescription;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkItemId) {
                actionPkItemId();
            }
            else if (button == jbFkUnitId) {
                actionFkUnitId();
            }
        }
    }
}
