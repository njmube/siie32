/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SLoginSession.java
 *
 * Created on 11/11/2009, 05:12:17 PM
 */

package erp;

import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComboBox;

/**
 *
 * @author Sergio Flores
 */
public class SLoginSession extends javax.swing.JDialog implements java.awt.event.ActionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.musr.data.SDataUser moUser;
    private erp.lib.form.SFormField moFieldWorkingDate;

    /** Creates new form SLoginSession */
    public SLoginSession(erp.client.SClientInterface client) {
        super(client.getFrame(), true);

        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlUser = new javax.swing.JLabel();
        jtfUser = new javax.swing.JTextField();
        jckIsUniversal = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jlCompany = new javax.swing.JLabel();
        jtfCompany = new javax.swing.JTextField();
        jckIsUniversalCompany = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        jcbCompanyBranch = new javax.swing.JComboBox<SFormComponentItem>();
        jckIsUniversalCompanyBranch = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jlWorkingDate = new javax.swing.JLabel();
        jftWorkingDate = new javax.swing.JFormattedTextField();
        jbWorkingDate = new javax.swing.JButton();
        jtpEntities = new javax.swing.JTabbedPane();
        jpCashAccounts = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlCashAccounts = new javax.swing.JLabel();
        jckIsUniversalEntityCh = new javax.swing.JCheckBox();
        jspCashAccounts = new javax.swing.JScrollPane();
        jltEntityCh = new javax.swing.JList<SFormComponentItem>();
        jpWarehouses = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlWarehouses = new javax.swing.JLabel();
        jckIsUniversalEntityWh = new javax.swing.JCheckBox();
        jspWarehouses = new javax.swing.JScrollPane();
        jltEntityWh = new javax.swing.JList<SFormComponentItem>();
        jpPos = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlPos = new javax.swing.JLabel();
        jckIsUniversalEntityPos = new javax.swing.JCheckBox();
        jspPos = new javax.swing.JScrollPane();
        jltEntityPos = new javax.swing.JList<SFormComponentItem>();
        jpPlants = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlPlants = new javax.swing.JLabel();
        jckIsUniversalEntityPlt = new javax.swing.JCheckBox();
        jspPlants = new javax.swing.JScrollPane();
        jltEntityPlt = new javax.swing.JList<SFormComponentItem>();
        jPanel5 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sesión del usuario");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a la empresa:"));
        jPanel1.setLayout(new java.awt.GridLayout(4, 1, 5, 5));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUser.setText("Usuario:");
        jlUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlUser);

        jtfUser.setEditable(false);
        jtfUser.setText("COMPANY");
        jtfUser.setFocusable(false);
        jtfUser.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(jtfUser);

        jckIsUniversal.setText("Acceso universal");
        jckIsUniversal.setEnabled(false);
        jckIsUniversal.setPreferredSize(new java.awt.Dimension(160, 23));
        jPanel2.add(jckIsUniversal);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompany.setText("Empresa:");
        jlCompany.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCompany);

        jtfCompany.setEditable(false);
        jtfCompany.setText("COMPANY");
        jtfCompany.setFocusable(false);
        jtfCompany.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfCompany);

        jckIsUniversalCompany.setText("Acceso universal empresa");
        jckIsUniversalCompany.setEnabled(false);
        jckIsUniversalCompany.setPreferredSize(new java.awt.Dimension(160, 23));
        jPanel3.add(jckIsUniversalCompany);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompanyBranch.setText("Sucursal empresa:");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlCompanyBranch);

        jcbCompanyBranch.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jcbCompanyBranch);

        jckIsUniversalCompanyBranch.setText("Acceso universal sucursal");
        jckIsUniversalCompanyBranch.setEnabled(false);
        jckIsUniversalCompanyBranch.setPreferredSize(new java.awt.Dimension(160, 23));
        jPanel4.add(jckIsUniversalCompanyBranch);

        jPanel1.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWorkingDate.setText("Fecha trabajo: *");
        jlWorkingDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlWorkingDate);

        jftWorkingDate.setText("yyyy/mm/dd");
        jftWorkingDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jftWorkingDate);

        jbWorkingDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbWorkingDate.setToolTipText("Seleccionar fecha trabajo");
        jbWorkingDate.setFocusable(false);
        jbWorkingDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbWorkingDate);

        jPanel1.add(jPanel6);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jtpEntities.setBorder(javax.swing.BorderFactory.createTitledBorder("Entidades de la sucursal:"));

        jpCashAccounts.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.BorderLayout());

        jlCashAccounts.setText("Seleccionar una cuenta de efectivo:");
        jlCashAccounts.setPreferredSize(new java.awt.Dimension(300, 14));
        jPanel12.add(jlCashAccounts, java.awt.BorderLayout.WEST);

        jckIsUniversalEntityCh.setText("Acceso universal a cuentas de efectivo");
        jckIsUniversalEntityCh.setEnabled(false);
        jckIsUniversalEntityCh.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(jckIsUniversalEntityCh, java.awt.BorderLayout.LINE_END);

        jpCashAccounts.add(jPanel12, java.awt.BorderLayout.NORTH);

        jspCashAccounts.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jltEntityCh.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltEntityCh.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspCashAccounts.setViewportView(jltEntityCh);

        jpCashAccounts.add(jspCashAccounts, java.awt.BorderLayout.CENTER);

        jtpEntities.addTab("Cuentas de efectivo", jpCashAccounts);

        jpWarehouses.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jlWarehouses.setText("Seleccionar un almacén:");
        jlWarehouses.setPreferredSize(new java.awt.Dimension(300, 14));
        jPanel8.add(jlWarehouses, java.awt.BorderLayout.WEST);

        jckIsUniversalEntityWh.setText("Acceso universal a almacenes");
        jckIsUniversalEntityWh.setEnabled(false);
        jckIsUniversalEntityWh.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(jckIsUniversalEntityWh, java.awt.BorderLayout.LINE_END);

        jpWarehouses.add(jPanel8, java.awt.BorderLayout.NORTH);

        jspWarehouses.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jltEntityWh.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltEntityWh.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspWarehouses.setViewportView(jltEntityWh);

        jpWarehouses.add(jspWarehouses, java.awt.BorderLayout.CENTER);

        jtpEntities.addTab("Almacenes", jpWarehouses);

        jpPos.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());

        jlPos.setText("Seleccionar un punto de venta:");
        jlPos.setPreferredSize(new java.awt.Dimension(300, 14));
        jPanel11.add(jlPos, java.awt.BorderLayout.WEST);

        jckIsUniversalEntityPos.setText("Acceso universal a puntos de venta");
        jckIsUniversalEntityPos.setEnabled(false);
        jckIsUniversalEntityPos.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(jckIsUniversalEntityPos, java.awt.BorderLayout.LINE_END);

        jpPos.add(jPanel11, java.awt.BorderLayout.NORTH);

        jspPos.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jltEntityPos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltEntityPos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspPos.setViewportView(jltEntityPos);

        jpPos.add(jspPos, java.awt.BorderLayout.CENTER);

        jtpEntities.addTab("Puntos de venta", jpPos);

        jpPlants.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jlPlants.setText("Seleccionar una planta:");
        jlPlants.setPreferredSize(new java.awt.Dimension(300, 14));
        jPanel9.add(jlPlants, java.awt.BorderLayout.WEST);

        jckIsUniversalEntityPlt.setText("Acceso universal a plantas");
        jckIsUniversalEntityPlt.setEnabled(false);
        jckIsUniversalEntityPlt.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(jckIsUniversalEntityPlt, java.awt.BorderLayout.LINE_END);

        jpPlants.add(jPanel9, java.awt.BorderLayout.NORTH);

        jspPlants.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jltEntityPlt.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltEntityPlt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspPlants.setViewportView(jltEntityPlt);

        jpPlants.add(jspPlants, java.awt.BorderLayout.CENTER);

        jtpEntities.addTab("Plantas", jpPlants);

        getContentPane().add(jtpEntities, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel5.add(jbCancel);

        getContentPane().add(jPanel5, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-648)/2, (screenSize.height-434)/2, 648, 434);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jcbCompanyBranch.requestFocus();
    }//GEN-LAST:event_formWindowOpened

    private void initComponentsExtra() {
        moFieldWorkingDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftWorkingDate, jlWorkingDate);
        moFieldWorkingDate.setPickerButton(jbWorkingDate);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldWorkingDate);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbWorkingDate.addActionListener(this);

        jcbCompanyBranch.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbCompanyBranch.requestFocus();
        }
    }

    private void selectDefaultEntity(javax.swing.JList list) {
        for (int i = 0; i < list.getModel().getSize(); i++) {
            if (((SFormComponentItem) list.getModel().getElementAt(i)).getItem().endsWith(" *")) {
                list.setSelectedIndex(i);
                break;
            }
        }
    }

    private void itemStateChangedCompanyBranch() {
        int companyBranchId = 0;
        Vector<SFormComponentItem> itemsCh = null;
        Vector<SFormComponentItem> itemsWh = null;
        Vector<SFormComponentItem> itemsPos = null;
        Vector<SFormComponentItem> itemsPlt = null;

        jckIsUniversalCompanyBranch.setSelected(false);
        jckIsUniversalEntityCh.setSelected(false);
        jckIsUniversalEntityWh.setSelected(false);
        jckIsUniversalEntityPos.setSelected(false);
        jckIsUniversalEntityPlt.setSelected(false);

        jltEntityCh.setListData(new SFormComponentItem[] {});
        jltEntityWh.setListData(new SFormComponentItem[] {});
        jltEntityPos.setListData(new SFormComponentItem[] {});
        jltEntityPlt.setListData(new SFormComponentItem[] {});

        if (jcbCompanyBranch.getSelectedIndex() > 0) {
            companyBranchId = ((int[]) ((SFormComponentItem) jcbCompanyBranch.getSelectedItem()).getPrimaryKey())[0];

            jckIsUniversalCompanyBranch.setSelected(miClient.getSessionXXX().getIsUniversalCompanyBranch(companyBranchId));
            jckIsUniversalEntityCh.setSelected(miClient.getSessionXXX().getIsUniversalCompanyBranchEntities(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_CASH));
            jckIsUniversalEntityWh.setSelected(miClient.getSessionXXX().getIsUniversalCompanyBranchEntities(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_WH));
            jckIsUniversalEntityPos.setSelected(miClient.getSessionXXX().getIsUniversalCompanyBranchEntities(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_POS));
            jckIsUniversalEntityPlt.setSelected(miClient.getSessionXXX().getIsUniversalCompanyBranchEntities(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_PLANT));

            itemsCh = new Vector<SFormComponentItem>();
            itemsWh = new Vector<SFormComponentItem>();
            itemsPos = new Vector<SFormComponentItem>();
            itemsPlt = new Vector<SFormComponentItem>();

            if (miClient.getSessionXXX().getIsUniversal() || miClient.getSessionXXX().getIsUniversalCurrentCompany() ||
                    jckIsUniversalCompanyBranch.isSelected() || jckIsUniversalEntityCh.isSelected()) {
                itemsCh = miClient.getSessionXXX().getAllCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_CASH, false);
            }
            else {
                itemsCh = miClient.getSessionXXX().getUserCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_CASH, false);
            }
            if (itemsCh.size() > 0) {
                jltEntityCh.setListData(itemsCh);
                selectDefaultEntity(jltEntityCh);
            }

            if (miClient.getSessionXXX().getIsUniversal() || miClient.getSessionXXX().getIsUniversalCurrentCompany() ||
                    jckIsUniversalCompanyBranch.isSelected() || jckIsUniversalEntityWh.isSelected()) {
                itemsWh = miClient.getSessionXXX().getAllCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_WH, false);
            }
            else {
                itemsWh = miClient.getSessionXXX().getUserCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_WH, false);
            }
            if (itemsWh.size() > 0) {
                jltEntityWh.setListData(itemsWh);
                selectDefaultEntity(jltEntityWh);
            }

            if (miClient.getSessionXXX().getIsUniversal() || miClient.getSessionXXX().getIsUniversalCurrentCompany() ||
                    jckIsUniversalCompanyBranch.isSelected() || jckIsUniversalEntityPos.isSelected()) {
                itemsPos = miClient.getSessionXXX().getAllCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_POS, false);
            }
            else {
                itemsPos = miClient.getSessionXXX().getUserCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_POS, false);
            }
            if (itemsPos.size() > 0) {
                jltEntityPos.setListData(itemsPos);
                selectDefaultEntity(jltEntityPos);
            }

            if (miClient.getSessionXXX().getIsUniversal() || miClient.getSessionXXX().getIsUniversalCurrentCompany() ||
                    jckIsUniversalCompanyBranch.isSelected() || jckIsUniversalEntityPlt.isSelected()) {
                itemsPlt = miClient.getSessionXXX().getAllCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_PLANT, false);
            }
            else {
                itemsPlt = miClient.getSessionXXX().getUserCompanyBranchEntitiesAsComponentItems(companyBranchId, SDataConstantsSys.CFGS_CT_ENT_PLANT, false);
            }
            if (itemsPlt.size() > 0) {
                jltEntityPlt.setListData(itemsPlt);
                selectDefaultEntity(jltEntityPlt);
            }
        }
    }

    private void actionWorkingDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldWorkingDate.getDate(), moFieldWorkingDate);
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbWorkingDate;
    private javax.swing.JComboBox<SFormComponentItem> jcbCompanyBranch;
    private javax.swing.JCheckBox jckIsUniversal;
    private javax.swing.JCheckBox jckIsUniversalCompany;
    private javax.swing.JCheckBox jckIsUniversalCompanyBranch;
    private javax.swing.JCheckBox jckIsUniversalEntityCh;
    private javax.swing.JCheckBox jckIsUniversalEntityPlt;
    private javax.swing.JCheckBox jckIsUniversalEntityPos;
    private javax.swing.JCheckBox jckIsUniversalEntityWh;
    private javax.swing.JFormattedTextField jftWorkingDate;
    private javax.swing.JLabel jlCashAccounts;
    private javax.swing.JLabel jlCompany;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlPlants;
    private javax.swing.JLabel jlPos;
    private javax.swing.JLabel jlUser;
    private javax.swing.JLabel jlWarehouses;
    private javax.swing.JLabel jlWorkingDate;
    private javax.swing.JList<SFormComponentItem> jltEntityCh;
    private javax.swing.JList<SFormComponentItem> jltEntityPlt;
    private javax.swing.JList<SFormComponentItem> jltEntityPos;
    private javax.swing.JList<SFormComponentItem> jltEntityWh;
    private javax.swing.JPanel jpCashAccounts;
    private javax.swing.JPanel jpPlants;
    private javax.swing.JPanel jpPos;
    private javax.swing.JPanel jpWarehouses;
    private javax.swing.JScrollPane jspCashAccounts;
    private javax.swing.JScrollPane jspPlants;
    private javax.swing.JScrollPane jspPos;
    private javax.swing.JScrollPane jspWarehouses;
    private javax.swing.JTextField jtfCompany;
    private javax.swing.JTextField jtfUser;
    private javax.swing.JTabbedPane jtpEntities;
    // End of variables declaration//GEN-END:variables

    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (!jckIsUniversal.isSelected() && !jckIsUniversalCompany.isSelected()) {
                if (jcbCompanyBranch.getSelectedIndex() <= 0) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlCompanyBranch.getText() + "'.");
                    validation.setComponent(jcbCompanyBranch);
                }
                else if (!jckIsUniversalCompanyBranch.isSelected()) {
                    if (!jckIsUniversalEntityCh.isSelected() && jltEntityCh.getModel().getSize() > 0 && jltEntityCh.getSelectedIndex() == -1) {
                        jtpEntities.setSelectedIndex(0);
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jtpEntities.getTitleAt(0) + "'.");
                        validation.setComponent(jltEntityCh);
                    }
                    else if (!jckIsUniversalEntityWh.isSelected() && jltEntityWh.getModel().getSize() > 0 && jltEntityWh.getSelectedIndex() == -1) {
                        jtpEntities.setSelectedIndex(1);
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jtpEntities.getTitleAt(1) + "'.");
                        validation.setComponent(jltEntityWh);
                    }
                    else if (!jckIsUniversalEntityPos.isSelected() && jltEntityPos.getModel().getSize() > 0 && jltEntityPos.getSelectedIndex() == -1) {
                        jtpEntities.setSelectedIndex(2);
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jtpEntities.getTitleAt(2) + "'.");
                        validation.setComponent(jltEntityPos);
                    }
                    else if (!jckIsUniversalEntityPlt.isSelected() && jltEntityPlt.getModel().getSize() > 0 && jltEntityPlt.getSelectedIndex() == -1) {
                        jtpEntities.setSelectedIndex(3);
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jtpEntities.getTitleAt(3) + "'.");
                        validation.setComponent(jltEntityPlt);
                    }
                }
            }
        }

        return validation;
    }

    public void reset() {
        Vector<SFormComponentItem> items = new Vector<SFormComponentItem>();

        moUser = miClient.getSessionXXX().getUser();
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        // Display main user session settings:

        jtfUser.setText(miClient.getSessionXXX().getUser().getUser());
        jtfUser.setCaretPosition(0);
        jtfCompany.setText(miClient.getSessionXXX().getCompany().getCompany());
        jtfCompany.setCaretPosition(0);

        jckIsUniversal.setSelected(miClient.getSessionXXX().getIsUniversal());
        jckIsUniversalCompany.setSelected(miClient.getSessionXXX().getIsUniversalCurrentCompany());
        jckIsUniversalCompanyBranch.setSelected(false);
        jckIsUniversalEntityCh.setSelected(false);
        jckIsUniversalEntityWh.setSelected(false);
        jckIsUniversalEntityPos.setSelected(false);
        jckIsUniversalEntityPlt.setSelected(false);

        // Update company branches available to current user session:

        if (miClient.getSessionXXX().getIsUniversal() || miClient.getSessionXXX().getIsUniversalCurrentCompany()) {
            items = miClient.getSessionXXX().getAllCompanyBranchesAsComponentItems(true);
        }
        else {
            items = miClient.getSessionXXX().getUserCompanyBranchesAsComponentItems(true);
        }

        jcbCompanyBranch.removeItemListener(this);
        jcbCompanyBranch.removeAllItems();

        for (int i = 0; i < items.size(); i++) {
            jcbCompanyBranch.addItem(items.get(i));
        }

        SFormUtilities.locateComboBoxItem(jcbCompanyBranch, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });

        if (jcbCompanyBranch.getSelectedIndex() <= 0 && jcbCompanyBranch.getItemCount() == 2) {
            jcbCompanyBranch.setSelectedIndex(1);
        }

        itemStateChangedCompanyBranch();

        jcbCompanyBranch.addItemListener(this);

        // Select current company branch entities, if any:

        if (miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_CASH) == null) {
            jltEntityCh.setSelectedIndex(-1);
        }
        else {
            SFormUtilities.locateListItem(jltEntityCh,
                    miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_CASH));
        }

        if (miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_WH) == null) {
            jltEntityWh.setSelectedIndex(-1);
        }
        else {
            SFormUtilities.locateListItem(jltEntityWh,
                    miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_WH));
        }

        if (miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_POS) == null) {
            jltEntityPos.setSelectedIndex(-1);
        }
        else {
            SFormUtilities.locateListItem(jltEntityPos,
                    miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_POS));
        }

        if (miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_PLANT) == null) {
            jltEntityPlt.setSelectedIndex(-1);
        }
        else {
            SFormUtilities.locateListItem(jltEntityPlt,
                    miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_PLANT));
        }

        moFieldWorkingDate.setFieldValue(miClient.getSessionXXX().getWorkingDate());
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public int getCurrentCompanyBranchId() {
        int id = 0;

        if (jcbCompanyBranch.getSelectedIndex() > 0) {
            id = ((int[]) ((SFormComponentItem) jcbCompanyBranch.getSelectedItem()).getPrimaryKey())[0];
        }

        return id;
    }

    public int[] getCurrentCompanyBranchEntityId(int categoryId) {
        int[] id = null;

        switch (categoryId) {
            case SDataConstantsSys.CFGS_CT_ENT_CASH:
                if (jltEntityCh.getSelectedValue() != null) {
                    id = (int[]) ((SFormComponentItem) jltEntityCh.getSelectedValue()).getPrimaryKey();
                }
                break;
            case SDataConstantsSys.CFGS_CT_ENT_WH:
                if (jltEntityWh.getSelectedValue() != null) {
                    id = (int[]) ((SFormComponentItem) jltEntityWh.getSelectedValue()).getPrimaryKey();
                }
                break;
            case SDataConstantsSys.CFGS_CT_ENT_POS:
                if (jltEntityPos.getSelectedValue() != null) {
                    id = (int[]) ((SFormComponentItem) jltEntityPos.getSelectedValue()).getPrimaryKey();
                }
                break;
            case SDataConstantsSys.CFGS_CT_ENT_PLANT:
                if (jltEntityPlt.getSelectedValue() != null) {
                    id = (int[]) ((SFormComponentItem) jltEntityPlt.getSelectedValue()).getPrimaryKey();
                }
                break;
            default:
                break;
        }

        return id;
    }

    public java.lang.String getCurrentBranch() {
        String name = "";

        if (jcbCompanyBranch.getSelectedIndex() > 0) {
            name = ((SFormComponentItem) jcbCompanyBranch.getSelectedItem()).getItem();
        }

        return name;
    }

    public java.lang.String getCurrentBranchWarehouse(int categoryId) {
        String name = "";

        switch (categoryId) {
            case SDataConstantsSys.CFGS_CT_ENT_CASH:
                name = ((SFormComponentItem) jltEntityCh.getSelectedValue()).getItem();
                break;
            case SDataConstantsSys.CFGS_CT_ENT_WH:
                name = ((SFormComponentItem) jltEntityWh.getSelectedValue()).getItem();
                break;
            case SDataConstantsSys.CFGS_CT_ENT_POS:
                name = ((SFormComponentItem) jltEntityPos.getSelectedValue()).getItem();
                break;
            case SDataConstantsSys.CFGS_CT_ENT_PLANT:
                name = ((SFormComponentItem) jltEntityPlt.getSelectedValue()).getItem();
                break;
            default:
                break;
        }

        return name;
    }

    public java.util.Date getWorkingDate() {
        return moFieldWorkingDate.getDate();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbWorkingDate) {
                actionWorkingDate();
            }
        }
    }

    @Override
    public void itemStateChanged(java.awt.event.ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == jcbCompanyBranch) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    itemStateChangedCompanyBranch();
                }
            }
        }
    }
}
