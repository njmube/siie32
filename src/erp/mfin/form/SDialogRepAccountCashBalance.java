/*
 * SDialogRepAccountCashBalance.java
 *
 * Created on 29/06/2010, 05:02:26 PM
 */

package erp.mfin.form;

import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComponent;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sergio Flores
 */
public class SDialogRepAccountCashBalance extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateCutoff;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    /** Creates new form SDialogRepAccountCashBalance */
    public SDialogRepAccountCashBalance(erp.client.SClientInterface client) {
        super(client.getFrame(), false);
        miClient = client;
        
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateCutoff = new javax.swing.JLabel();
        jftDateCutoff = new javax.swing.JFormattedTextField();
        jbPickDateCutoff = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jckActiveOnly = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jpPrint = new javax.swing.JButton();
        jpClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Saldos de cuentas de dinero");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Par√°metros del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(5, 1));
        jPanel2.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutoff.setText("Fecha de corte: *");
        jlDateCutoff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDateCutoff);

        jftDateCutoff.setText("dd/mm/yyyy");
        jftDateCutoff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jftDateCutoff);

        jbPickDateCutoff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPickDateCutoff.setToolTipText("Seleccionar fecha");
        jbPickDateCutoff.setFocusable(false);
        jbPickDateCutoff.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbPickDateCutoff);

        jPanel6.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckActiveOnly.setText("Solamente cuentas de dinero con estatus \"activo\"");
        jckActiveOnly.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jckActiveOnly);

        jPanel6.add(jPanel4);

        jPanel2.add(jPanel6, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jpPrint.setText("Imprimir");
        jpPrint.setToolTipText("[Ctrl + Enter]");
        jpPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jpPrint);

        jpClose.setText("Cerrar");
        jpClose.setToolTipText("[Escape]");
        jpClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jpClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(416, 289));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jpPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jpPrintActionPerformed

    private void jpCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jpCloseActionPerformed

    private void initComponentsCustom() {
        moFieldDateCutoff = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateCutoff, jlDateCutoff);
        moFieldDateCutoff.setPickerButton(jbPickDateCutoff);

        mvFields = new Vector<>();
        mvFields.add(moFieldDateCutoff);
        
        moFieldDateCutoff.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        jckActiveOnly.setSelected(true);

        jbPickDateCutoff.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    private java.lang.String createParamSql() {
        int[] year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate());
        String sql = "";

        sql = "SELECT e.id_cob, e.id_ent, bb.bpb, et.tp_ent, e.ent, e.code, ce.cur, ce.cur_key, e.b_act, e.b_del, ce.id_cur AS f_id_cur, re.fid_tp_sys_mov_xxx, " +
                "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "',re.debit - re.credit, 0)) AS f_si, " +
                "SUM(IF(r.dt = '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "', re.debit, 0)) AS f_debit, " +
                "SUM(IF(r.dt = '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "', re.credit, 0)) AS f_credit, " +
                "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "', re.debit - re.credit, 0)) AS f_sf, " +
                "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "' AND ce.id_cur = c.id_cur,re.debit_cur - re.credit_cur, 0)) AS f_si_cur, " +
                "SUM(IF(r.dt = '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "' AND ce.id_cur = c.id_cur, re.debit_cur, 0)) AS f_debit_cur, " +
                "SUM(IF(r.dt = '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "' AND ce.id_cur = c.id_cur, re.credit_cur, 0)) AS f_credit_cur, " +
                "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "' AND ce.id_cur = c.id_cur, re.debit_cur - re.credit_cur, 0)) AS f_sf_cur " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "INNER JOIN erp.cfgu_cur AS c ON re.fid_cur = c.id_cur " +
                "INNER JOIN fin_acc AS a ON re.fid_acc = a.id_acc " +
                "INNER JOIN erp.cfgu_cob_ent AS e ON re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent " +
                "INNER JOIN erp.cfgs_tp_ent AS et ON e.fid_ct_ent = et.id_ct_ent AND e.fid_tp_ent = et.id_tp_ent " +
                "INNER JOIN erp.bpsu_bpb AS bb ON e.id_cob = bb.id_bpb " +
                "INNER JOIN fin_acc_cash AS ac ON e.id_cob = ac.id_cob AND e.id_ent = ac.id_acc_cash " +
                "INNER JOIN erp.cfgu_cur AS ce ON ac.fid_cur = ce.id_cur " +
                "WHERE r.b_del = 0 AND re.b_del = 0 AND r.id_year = " + year[0] + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCutoff.getDate()) + "' AND " +
                "re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_CT_SYS_MOV_CASH + " AND re.fid_tp_sys_mov_xxx IN(" + SDataConstantsSys.FINS_CT_ACC_CASH_CASH + ", " + SDataConstantsSys.FINS_CT_ACC_CASH_BANK + ") " +
                (jckActiveOnly.isSelected() ? "AND e.b_act = 1 " : "") +
                "GROUP BY e.id_cob, e.id_ent, bb.bpb, e.ent, e.code, ce.cur_key, e.b_act, e.b_del " +
                "ORDER BY bb.bpb, e.id_cob, re.fid_tp_sys_mov_xxx, ce.id_cur, e.ent, e.id_ent ";

        return sql;
    }

    private void print() {
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            map = miClient.createReportParams();
            map.put("sTitle", getTitle().toUpperCase());
            map.put("nCurrencyLocal", miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
            map.put("sCurrencyLocalKey", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
            map.put("tDt", moFieldDateCutoff.getDate());
            map.put("sSql", createParamSql());

            jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_FIN_ACC_CASH_BAL, map);
            jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle(getTitle());
            jasperViewer.setVisible(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateCutoff.getDate(), moFieldDateCutoff);
    }

    public void actionPrint() {
        boolean error = false;
        JComponent component = null;

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            print();
        }
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbPickDateCutoff;
    private javax.swing.JCheckBox jckActiveOnly;
    private javax.swing.JFormattedTextField jftDateCutoff;
    private javax.swing.JLabel jlDateCutoff;
    private javax.swing.JButton jpClose;
    private javax.swing.JButton jpPrint;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickDateCutoff) {
                actionDate();
            }
        }
    }
}
