/*
 * DFormCompany.java
 *
 * Created on 19 de agosto de 2008, 11:10 AM
 */

package erp.mfin.form;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.form.SFormField;
import erp.lib.form.SFormValidation;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;


/**
 *
 * @author  Néstor Ávalos
 */
public class SDialogPrintPreviewCheck extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private boolean mbPrintBack;
    
    private java.awt.Graphics2D g2D;
    private erp.lib.print.SPrintableItem[] maiData;
    
    /** Creates new form DFormCompany */
    public SDialogPrintPreviewCheck(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCurrency = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vista preliminar"); // NOI18N
        setModal(true);
        setResizable(false);

        jpData.setBackground(new java.awt.Color(255, 255, 255));
        jpData.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout jpDataLayout = new javax.swing.GroupLayout(jpData);
        jpData.setLayout(jpDataLayout);
        jpDataLayout.setHorizontalGroup(
            jpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 603, Short.MAX_VALUE)
        );
        jpDataLayout.setVerticalGroup(
            jpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbPrint);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-623)/2, (screenSize.height-314)/2, 623, 314);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();
        
        jbCancel.addActionListener(this);
        jbPrint.addActionListener(this);
        
        mbPrintBack = false;   
        g2D = null;
        maiData = null;
        
        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);     
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbPrint.requestFocus();            
        }        
    }
    
    private void actionDrawText() {
        int x = 50;
        int y = 250;
        Font font = new java.awt.Font("Serif", Font.PLAIN, 10); 
        
        AffineTransform oOriginText = null;
        AffineTransform oNewText = null;
        Graphics g = this.getGraphics();
        
        g2D = (Graphics2D) g;
        g2D.setFont(font);
        
        if (!mbPrintBack) {                    
            if (maiData != null) {
                if (maiData[0]!=null) { g2D.drawString(maiData[0].text, 350, 60); } // Fecha, 352, 324
                if (maiData[1]!=null) { g2D.drawString(maiData[1].text, 20, 80); } // Beneficiario, 313, 21
                if (maiData[2]!=null) { g2D.drawString(maiData[2].text, 370, 80); } // Cantidad, 241, 349
                if (maiData[3]!=null) { g2D.drawString(maiData[3].text, 20, 100); } // Cantidad texto, 288, 21
                if (maiData[4]!=null) { g2D.drawString(maiData[4].text, 20, 140); } // Abono en cuenta, 234, 21
                if (maiData[5]!=null) { g2D.drawString(maiData[5].text, 350, 140); } // CB-1, 234, 252
                if (maiData[6]!=null) { g2D.drawString(maiData[6].text, 390, 140); } // C1, 234, 252
                if (maiData[7]!=null) { g2D.drawString(maiData[7].text, 20, 170); } //
            }
        }
        else {                        
            if (maiData != null) {
                oOriginText = g2D.getTransform();
                oNewText = (AffineTransform)(oOriginText.clone());

                oNewText.rotate(Math.toRadians(270), x, y);
                g2D.setTransform(oNewText);
                                
                if (maiData[0]!=null) { g2D.drawString(maiData[0].text, 50, 250); } // Beneficiario
                if (maiData[1]!=null) { g2D.drawString(maiData[1].text, 50, 265); } // Cuenta del beneficiario 
                if (maiData[2]!=null) { g2D.drawString(maiData[2].text, 50, 280); } // Banco
                if (maiData[3]!=null) { g2D.drawString(maiData[3].text, 50, 295); } // Sucursal
                if (maiData[4]!=null) { g2D.drawString(maiData[4].text, 50, 310); } // Cuenta
                if (maiData[5]!=null) { g2D.drawString(maiData[5].text, 50, 325); } // Acuerdo
                if (maiData[6]!=null) { g2D.drawString(maiData[6].text, 50, 340); } // Referencia                
                
                g2D.setTransform(oOriginText);
            }     
        }
    }
    
    public void paint(Graphics g) {
        super.paint(g);
        actionDrawText();        
    }
    
    private void actionEdit(boolean edit) {

    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionPrint() {
        erp.lib.form.SFormValidation validation = formValidate();
        
        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbPrint;
    private javax.swing.JPanel jpData;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        
        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }                
    }

    @Override
    public void formRefreshCatalogues() {
        
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch(type) {
            case 1:
                mbPrintBack = (Boolean) value;
                break;
            case 2:
                maiData = (erp.lib.print.SPrintableItem[]) value;                
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbCancel) {
                actionCancel();
            }            
            else if (button == jbPrint) {
                actionPrint();
            }
        }
    }
}
