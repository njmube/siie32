/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRow;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SDataRecordEntryRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author  Sergio Flores
 */
public class SFormRecord extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.ListSelectionListener {

    private final int CONCEPT_POLICY_BLANK = 1;
    private final int CONCEPT_POLICY_RECORD = 2;
    private final int CONCEPT_POLICY_CURR_ENTRY = 3;
    private final int CONCEPT_POLICY_LAST_ENTRY = 4;

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataRecord moRecord;
    private erp.mfin.data.SDataAccountCash moAccountCash;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldIsAdjustmentYearEnd;
    private erp.lib.form.SFormField moFieldIsAdjustmentAudit;
    private erp.lib.form.SFormField moFieldFkAccountCashId_n;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.mfin.form.SFormRecordEntry moFormEntry;
    private erp.mfin.form.SDialogRecordPayment moDialogPaymentSup;
    private erp.mfin.form.SDialogRecordPayment moDialogPaymentCus;
    private erp.mfin.form.SDialogRecordPaymentComplete moDialogPaymentCompleteSup;
    private erp.mfin.form.SDialogRecordPaymentComplete moDialogPaymentCompleteCus;
    private erp.mfin.form.SFormMoneyInOut moFormMoneyInOut;
    private erp.mfin.form.SFormMoneyOutCheck moFormMoneyOutCheck;
    private erp.mfin.form.SFormMoneyInOutBizPartner moFormMoneyInOutBizPartner;
    private erp.mfin.form.SFormDifferenceIncomeExpense moFormDifferenceIncomeExpense;
    private erp.mfin.form.SFormAccountCashTransfer moFormAccountCashTransfer;
    private erp.lib.table.STablePaneGrid moPaneGridEntries;

    private boolean mbParamIsReadOnly;
    private boolean mbOriginalIsDeleted;
    private java.lang.String msAuxLastEntryConcept;

    /** Creates new form SFormRecord */
    public SFormRecord(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_REC;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlPeriod = new javax.swing.JLabel();
        jtfPeriod = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlPkNumberId = new javax.swing.JLabel();
        jtfPkNumberId = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jckIsRecordConceptCopyEnabled = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jlFkAccountCashId_n = new javax.swing.JLabel();
        jcbFkAccountCashId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jtfAccountCashCurrencyKey = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlDebit = new javax.swing.JLabel();
        jtfDebit = new javax.swing.JTextField();
        jtfCurrencyKeyDebit = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlCredit = new javax.swing.JLabel();
        jtfCredit = new javax.swing.JTextField();
        jtfCurrencyKeyCredit = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlBalance = new javax.swing.JLabel();
        jtfBalance = new javax.swing.JTextField();
        jtfCurrencyKeyBalance = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jckIsAudited = new javax.swing.JCheckBox();
        jckIsAdjustmentYearEnd = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jckIsAuthorized = new javax.swing.JCheckBox();
        jckIsAdjustmentAudit = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        jckIsSystem = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpEntriesPanel = new javax.swing.JPanel();
        jpEntriesControl = new javax.swing.JPanel();
        jpEntriesControlWest = new javax.swing.JPanel();
        jbEntryNew = new javax.swing.JButton();
        jbEntryNewInsert = new javax.swing.JButton();
        jbEntryNewCopy = new javax.swing.JButton();
        jbEntryEdit = new javax.swing.JButton();
        jbEntryDelete = new javax.swing.JButton();
        jsEntry01 = new javax.swing.JSeparator();
        jbEntryMoveDown = new javax.swing.JButton();
        jbEntryMoveUp = new javax.swing.JButton();
        jsEntry2 = new javax.swing.JSeparator();
        jbEntryViewSum = new javax.swing.JButton();
        jsEntry3 = new javax.swing.JSeparator();
        jtbEntryFilter = new javax.swing.JToggleButton();
        jpEntriesControlCenter = new javax.swing.JPanel();
        jpEntriesControlEast = new javax.swing.JPanel();
        jlGuiConceptPolicy = new javax.swing.JLabel();
        jcbGuiConceptPolicy = new javax.swing.JComboBox<SFormComponentItem>();
        jpEntriesControlCashAccount = new javax.swing.JPanel();
        jpControlCashAccount01 = new javax.swing.JPanel();
        jbMoneyIn = new javax.swing.JButton();
        jbMoneyInOther = new javax.swing.JButton();
        jsCashAccount011 = new javax.swing.JSeparator();
        jbAdvanceCus = new javax.swing.JButton();
        jbAdvanceSupRefund = new javax.swing.JButton();
        jbMoneyInDbr = new javax.swing.JButton();
        jbMoneyInCdr = new javax.swing.JButton();
        jsCashAccount012 = new javax.swing.JSeparator();
        jbPaymentCus = new javax.swing.JButton();
        jbPaymentCusIntegral = new javax.swing.JButton();
        jsCashAccount013 = new javax.swing.JSeparator();
        jbExchangeProfit = new javax.swing.JButton();
        jpControlCashAccount02 = new javax.swing.JPanel();
        jbMoneyOut = new javax.swing.JButton();
        jbMoneyOutOther = new javax.swing.JButton();
        jsCashAccount021 = new javax.swing.JSeparator();
        jbAdvanceCusRefund = new javax.swing.JButton();
        jbAdvanceSup = new javax.swing.JButton();
        jbMoneyOutDbr = new javax.swing.JButton();
        jbMoneyOutCdr = new javax.swing.JButton();
        jsCashAccount022 = new javax.swing.JSeparator();
        jbPaymentSup = new javax.swing.JButton();
        jbPaymentSupIntegral = new javax.swing.JButton();
        jsCashAccount023 = new javax.swing.JSeparator();
        jbExchangeLoss = new javax.swing.JButton();
        jpControlCashAccount03 = new javax.swing.JPanel();
        jbCheck = new javax.swing.JButton();
        jbTransfer = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PÃ³liza contable"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(6, 1, 5, 1));

        jPanel11.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDate.setText("Fecha de la pÃ³liza: *");
        jlDate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlDate);

        jftDate.setText("yyyy/mm/dd");
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jftDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbDate);

        jPanel4.add(jPanel11);

        jPanel6.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlPeriod.setText("PerÃ­odo contable:");
        jlPeriod.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlPeriod);

        jtfPeriod.setEditable(false);
        jtfPeriod.setText("yyyy-dd");
        jtfPeriod.setFocusable(false);
        jtfPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jtfPeriod);

        jPanel4.add(jPanel6);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlCompanyBranch.setText("Sucursal de la empresa:");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlCompanyBranch);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("COMPANY BRANCH");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel14.add(jtfCompanyBranch);

        jPanel4.add(jPanel14);

        jPanel5.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlPkNumberId.setText("NÃºmero de pÃ³liza:");
        jlPkNumberId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jlPkNumberId);

        jtfPkNumberId.setEditable(false);
        jtfPkNumberId.setText("0");
        jtfPkNumberId.setFocusable(false);
        jtfPkNumberId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jtfPkNumberId);

        jPanel4.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlConcept.setText("Concepto pÃ³liza: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel7.add(jtfConcept);

        jckIsRecordConceptCopyEnabled.setText("Copiar");
        jckIsRecordConceptCopyEnabled.setEnabled(false);
        jckIsRecordConceptCopyEnabled.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jckIsRecordConceptCopyEnabled.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jckIsRecordConceptCopyEnabled.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel7.add(jckIsRecordConceptCopyEnabled);

        jPanel4.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlFkAccountCashId_n.setText("Cuenta de efectivo:");
        jlFkAccountCashId_n.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlFkAccountCashId_n);

        jcbFkAccountCashId_n.setEnabled(false);
        jcbFkAccountCashId_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(jcbFkAccountCashId_n);

        jtfAccountCashCurrencyKey.setEditable(false);
        jtfAccountCashCurrencyKey.setText("CUR");
        jtfAccountCashCurrencyKey.setToolTipText("Moneda");
        jtfAccountCashCurrencyKey.setFocusable(false);
        jtfAccountCashCurrencyKey.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfAccountCashCurrencyKey);

        jPanel4.add(jPanel9);

        jPanel8.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Saldo de la pÃ³liza contable:"));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(6, 1, 2, 1));

        jPanel15.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDebit.setText("Cargos:");
        jlDebit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDebit);

        jtfDebit.setEditable(false);
        jtfDebit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDebit.setText("0.00");
        jtfDebit.setFocusable(false);
        jtfDebit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel15.add(jtfDebit);

        jtfCurrencyKeyDebit.setEditable(false);
        jtfCurrencyKeyDebit.setText("CUR");
        jtfCurrencyKeyDebit.setFocusable(false);
        jtfCurrencyKeyDebit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel15.add(jtfCurrencyKeyDebit);

        jPanel13.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlCredit.setText("Abonos:");
        jlCredit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlCredit);

        jtfCredit.setEditable(false);
        jtfCredit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCredit.setText("0.00");
        jtfCredit.setFocusable(false);
        jtfCredit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jtfCredit);

        jtfCurrencyKeyCredit.setEditable(false);
        jtfCurrencyKeyCredit.setText("CUR");
        jtfCurrencyKeyCredit.setFocusable(false);
        jtfCurrencyKeyCredit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfCurrencyKeyCredit);

        jPanel13.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBalance.setText("Saldo:");
        jlBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlBalance);

        jtfBalance.setEditable(false);
        jtfBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfBalance.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBalance.setText("0.00");
        jtfBalance.setFocusable(false);
        jtfBalance.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel17.add(jtfBalance);

        jtfCurrencyKeyBalance.setEditable(false);
        jtfCurrencyKeyBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfCurrencyKeyBalance.setText("CUR");
        jtfCurrencyKeyBalance.setFocusable(false);
        jtfCurrencyKeyBalance.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jtfCurrencyKeyBalance);

        jPanel13.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jckIsAudited.setText("Registro auditado");
        jckIsAudited.setEnabled(false);
        jckIsAudited.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel18.add(jckIsAudited);

        jckIsAdjustmentYearEnd.setText("Ajuste de cierre");
        jckIsAdjustmentYearEnd.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel18.add(jckIsAdjustmentYearEnd);

        jPanel13.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jckIsAuthorized.setText("Registro autorizado");
        jckIsAuthorized.setEnabled(false);
        jckIsAuthorized.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel19.add(jckIsAuthorized);

        jckIsAdjustmentAudit.setText("Ajuste de auditorÃ­a");
        jckIsAdjustmentAudit.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel19.add(jckIsAdjustmentAudit);

        jPanel13.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jckIsSystem.setText("Registro de sistema");
        jckIsSystem.setEnabled(false);
        jckIsSystem.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel20.add(jckIsSystem);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel20.add(jckIsDeleted);

        jPanel13.add(jPanel20);

        jPanel12.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel12, java.awt.BorderLayout.EAST);

        jPanel3.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpEntriesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas de la pÃ³liza contable:"));
        jpEntriesPanel.setLayout(new java.awt.BorderLayout());

        jpEntriesControl.setLayout(new java.awt.BorderLayout());

        jpEntriesControlWest.setLayout(new java.awt.FlowLayout(0, 1, 0));

        jbEntryNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbEntryNew.setToolTipText("Crear partida [Ctrl + N]");
        jbEntryNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryNew);

        jbEntryNewInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_insert.gif"))); // NOI18N
        jbEntryNewInsert.setToolTipText("Insertar partida [Ctrl + MayÃºsc + I]");
        jbEntryNewInsert.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryNewInsert);

        jbEntryNewCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_copy.gif"))); // NOI18N
        jbEntryNewCopy.setToolTipText("Copiar partida [Ctrl + MayÃºsc + C]");
        jbEntryNewCopy.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryNewCopy);

        jbEntryEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEntryEdit.setToolTipText("Modificar partida [Ctrl + M]");
        jbEntryEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryEdit);

        jbEntryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbEntryDelete.setToolTipText("Eliminar partida [Ctrl + D]");
        jbEntryDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryDelete);

        jsEntry01.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry01.setPreferredSize(new java.awt.Dimension(3, 23));
        jpEntriesControlWest.add(jsEntry01);

        jbEntryMoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_move_down.gif"))); // NOI18N
        jbEntryMoveDown.setToolTipText("Mover partida abajo [Ctrl + MayÃºsc + D]");
        jbEntryMoveDown.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryMoveDown);

        jbEntryMoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_move_up.gif"))); // NOI18N
        jbEntryMoveUp.setToolTipText("Mover partida arriba [Ctrl + MayÃºsc + U]");
        jbEntryMoveUp.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryMoveUp);

        jsEntry2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry2.setPreferredSize(new java.awt.Dimension(3, 23));
        jpEntriesControlWest.add(jsEntry2);

        jbEntryViewSum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_sum.gif"))); // NOI18N
        jbEntryViewSum.setToolTipText("Ver sumatoria [Ctrl + S]");
        jbEntryViewSum.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlWest.add(jbEntryViewSum);

        jsEntry3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry3.setPreferredSize(new java.awt.Dimension(3, 23));
        jpEntriesControlWest.add(jsEntry3);

        jtbEntryFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_off.gif"))); // NOI18N
        jtbEntryFilter.setToolTipText("Filtrar partidas eliminadas [Ctrl + F]");
        jtbEntryFilter.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbEntryFilter.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_on.gif"))); // NOI18N
        jpEntriesControlWest.add(jtbEntryFilter);

        jpEntriesControl.add(jpEntriesControlWest, java.awt.BorderLayout.WEST);

        jpEntriesControlCenter.setLayout(new java.awt.FlowLayout(2, 1, 0));
        jpEntriesControl.add(jpEntriesControlCenter, java.awt.BorderLayout.CENTER);

        jpEntriesControlEast.setLayout(new java.awt.FlowLayout(2, 2, 0));

        jlGuiConceptPolicy.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlGuiConceptPolicy.setText("Concepto nuevas partidas: ");
        jlGuiConceptPolicy.setPreferredSize(new java.awt.Dimension(135, 23));
        jpEntriesControlEast.add(jlGuiConceptPolicy);

        jcbGuiConceptPolicy.setPreferredSize(new java.awt.Dimension(130, 23));
        jpEntriesControlEast.add(jcbGuiConceptPolicy);

        jpEntriesControl.add(jpEntriesControlEast, java.awt.BorderLayout.EAST);

        jpEntriesControlCashAccount.setLayout(new java.awt.GridLayout(3, 1));

        jpControlCashAccount01.setLayout(new java.awt.FlowLayout(0, 1, 0));

        jbMoneyIn.setText("Ingreso");
        jbMoneyIn.setToolTipText("Crear ingreso de efectivo");
        jbMoneyIn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyIn.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbMoneyIn);

        jbMoneyInOther.setText("Ingreso otra");
        jbMoneyInOther.setToolTipText("Crear ingreso de efectivo en otra cuenta");
        jbMoneyInOther.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyInOther.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbMoneyInOther);

        jsCashAccount011.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsCashAccount011.setPreferredSize(new java.awt.Dimension(3, 23));
        jpControlCashAccount01.add(jsCashAccount011);

        jbAdvanceCus.setText("Ant cte");
        jbAdvanceCus.setToolTipText("Crear anticipo cobro a clientes");
        jbAdvanceCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbAdvanceCus.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbAdvanceCus);

        jbAdvanceSupRefund.setText("Reem ant prv");
        jbAdvanceSupRefund.setToolTipText("Crear reembolso anticipo pago a proveedores");
        jbAdvanceSupRefund.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbAdvanceSupRefund.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbAdvanceSupRefund);

        jbMoneyInDbr.setText("Ingreso ddr");
        jbMoneyInDbr.setToolTipText("Crear ingreso por deudores diversos");
        jbMoneyInDbr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyInDbr.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbMoneyInDbr);

        jbMoneyInCdr.setText("Ingreso acr");
        jbMoneyInCdr.setToolTipText("Crear ingreso por acreedores diversos");
        jbMoneyInCdr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyInCdr.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbMoneyInCdr);

        jsCashAccount012.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsCashAccount012.setPreferredSize(new java.awt.Dimension(3, 23));
        jpControlCashAccount01.add(jsCashAccount012);

        jbPaymentCus.setText("Cobro cte");
        jbPaymentCus.setToolTipText("Crear cobro a clientes");
        jbPaymentCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPaymentCus.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbPaymentCus);

        jbPaymentCusIntegral.setText("Cobro cte int");
        jbPaymentCusIntegral.setToolTipText("Crear cobro integral a clientes");
        jbPaymentCusIntegral.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPaymentCusIntegral.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbPaymentCusIntegral);

        jsCashAccount013.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsCashAccount013.setPreferredSize(new java.awt.Dimension(3, 23));
        jpControlCashAccount01.add(jsCashAccount013);

        jbExchangeProfit.setText("Gan cambios");
        jbExchangeProfit.setToolTipText("Crear ganancia cambiaria");
        jbExchangeProfit.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbExchangeProfit.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount01.add(jbExchangeProfit);

        jpEntriesControlCashAccount.add(jpControlCashAccount01);

        jpControlCashAccount02.setLayout(new java.awt.FlowLayout(0, 1, 0));

        jbMoneyOut.setText("Egreso");
        jbMoneyOut.setToolTipText("Crear egreso de efectivo");
        jbMoneyOut.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOut.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbMoneyOut);

        jbMoneyOutOther.setText("Egreso otra");
        jbMoneyOutOther.setToolTipText("Crear egreso de efectivo en otra cuenta");
        jbMoneyOutOther.setFocusable(false);
        jbMoneyOutOther.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutOther.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbMoneyOutOther);

        jsCashAccount021.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsCashAccount021.setPreferredSize(new java.awt.Dimension(3, 23));
        jpControlCashAccount02.add(jsCashAccount021);

        jbAdvanceCusRefund.setText("Reem ant cte");
        jbAdvanceCusRefund.setToolTipText("Crear reembolso anticipo cobro a clientes");
        jbAdvanceCusRefund.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbAdvanceCusRefund.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbAdvanceCusRefund);

        jbAdvanceSup.setText("Ant prv");
        jbAdvanceSup.setToolTipText("Crear anticipo pago a proveedores");
        jbAdvanceSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbAdvanceSup.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbAdvanceSup);

        jbMoneyOutDbr.setText("Egreso ddr");
        jbMoneyOutDbr.setToolTipText("Crear egreso por deudores diversos");
        jbMoneyOutDbr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutDbr.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbMoneyOutDbr);

        jbMoneyOutCdr.setText("Egreso acr");
        jbMoneyOutCdr.setToolTipText("Crear egreso por acreedores diversos");
        jbMoneyOutCdr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutCdr.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbMoneyOutCdr);

        jsCashAccount022.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsCashAccount022.setPreferredSize(new java.awt.Dimension(3, 23));
        jpControlCashAccount02.add(jsCashAccount022);

        jbPaymentSup.setText("Pago prv");
        jbPaymentSup.setToolTipText("Crear pago a proveedores");
        jbPaymentSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPaymentSup.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbPaymentSup);

        jbPaymentSupIntegral.setText("Pago prv int");
        jbPaymentSupIntegral.setToolTipText("Crear pago integral a proveedores");
        jbPaymentSupIntegral.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPaymentSupIntegral.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbPaymentSupIntegral);

        jsCashAccount023.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsCashAccount023.setPreferredSize(new java.awt.Dimension(3, 23));
        jpControlCashAccount02.add(jsCashAccount023);

        jbExchangeLoss.setText("PÃ©r cambios");
        jbExchangeLoss.setToolTipText("Crear pÃ©rdida cambiaria");
        jbExchangeLoss.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbExchangeLoss.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount02.add(jbExchangeLoss);

        jpEntriesControlCashAccount.add(jpControlCashAccount02);

        jpControlCashAccount03.setLayout(new java.awt.FlowLayout(0, 1, 0));

        jbCheck.setText("Cheque");
        jbCheck.setToolTipText("Crear egreso de efectivo con cheque");
        jbCheck.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbCheck.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount03.add(jbCheck);

        jbTransfer.setText("Traspaso");
        jbTransfer.setToolTipText("Crear traspaso de efectivo");
        jbTransfer.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbTransfer.setPreferredSize(new java.awt.Dimension(85, 23));
        jpControlCashAccount03.add(jbTransfer);

        jpEntriesControlCashAccount.add(jpControlCashAccount03);

        jpEntriesControl.add(jpEntriesControlCashAccount, java.awt.BorderLayout.SOUTH);

        jpEntriesPanel.add(jpEntriesControl, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpEntriesPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(2));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1000)/2, (screenSize.height-675)/2, 1000, 675);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;
        mvFields = new Vector<SFormField>();

        moFieldDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDate, jlDate);
        moFieldDate.setPickerButton(jbDate);
        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldIsAdjustmentYearEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsAdjustmentYearEnd);
        moFieldIsAdjustmentAudit = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsAdjustmentAudit);
        moFieldFkAccountCashId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkAccountCashId_n, jlFkAccountCashId_n);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields.add(moFieldDate);
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldFkAccountCashId_n);
        mvFields.add(moFieldIsDeleted);

        moFormEntry = new SFormRecordEntry(miClient);
        moDialogPaymentSup = new SDialogRecordPayment(miClient, SDataConstantsSys.BPSS_CT_BP_SUP);
        moDialogPaymentCus = new SDialogRecordPayment(miClient, SDataConstantsSys.BPSS_CT_BP_CUS);
        moDialogPaymentCompleteSup = new SDialogRecordPaymentComplete(miClient, SDataConstantsSys.BPSS_CT_BP_SUP);
        moDialogPaymentCompleteCus = new SDialogRecordPaymentComplete(miClient, SDataConstantsSys.BPSS_CT_BP_CUS);
        moFormMoneyInOut = new SFormMoneyInOut(miClient);
        moFormMoneyOutCheck = new SFormMoneyOutCheck(miClient);
        moFormMoneyInOutBizPartner = new SFormMoneyInOutBizPartner(miClient);
        moFormDifferenceIncomeExpense = new SFormDifferenceIncomeExpense(miClient);
        moFormAccountCashTransfer = new SFormAccountCashTransfer(miClient);
        moPaneGridEntries = new STablePaneGrid(miClient);
        moPaneGridEntries.setDoubleClickAction(this, "publicActionEntryEdit");
        jpEntriesPanel.add(moPaneGridEntries, BorderLayout.CENTER);

        aoTableColumns = new STableColumnForm[24];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", 175);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Debe $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Haber $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio", STableConstants.WIDTH_EXCHANGE_RATE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Debe mon $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Haber mon $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Sistema", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Diferencia cambiaria", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Subclase movimiento", 200);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. centro costo", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cheque", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creaciÃ³n", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "CreaciÃ³n", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificaciÃ³n", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "ModificaciÃ³n", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminaciÃ³n", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "EliminaciÃ³n", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Id interno", STableConstants.WIDTH_NUM_TINYINT);

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneGridEntries.addTableColumn(aoTableColumns[i]);
        }

        jcbGuiConceptPolicy.removeAllItems();
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_BLANK }, "En blanco"));
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_RECORD }, "Copiar concepto pÃ³liza"));
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_CURR_ENTRY }, "Copiar concepto actual"));
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_LAST_ENTRY }, "Copiar Ãºltimo concepto"));

        if (miClient.getSessionXXX().getParamsErp().getIsRecordConceptCopyEnabled()) {
            SFormUtilities.locateComboBoxItem(jcbGuiConceptPolicy, new int[] { CONCEPT_POLICY_RECORD });
        }
        else {
            SFormUtilities.locateComboBoxItem(jcbGuiConceptPolicy, new int[] { CONCEPT_POLICY_BLANK });
        }

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDate.addActionListener(this);
        jbEntryNew.addActionListener(this);
        jbEntryNewCopy.addActionListener(this);
        jbEntryNewInsert.addActionListener(this);
        jbEntryEdit.addActionListener(this);
        jbEntryDelete.addActionListener(this);
        jbEntryMoveDown.addActionListener(this);
        jbEntryMoveUp.addActionListener(this);
        jbEntryViewSum.addActionListener(this);
        jbMoneyIn.addActionListener(this);
        jbMoneyInOther.addActionListener(this);
        jbMoneyOut.addActionListener(this);
        jbMoneyOutOther.addActionListener(this);
        jbAdvanceSup.addActionListener(this);
        jbAdvanceSupRefund.addActionListener(this);
        jbAdvanceCus.addActionListener(this);
        jbAdvanceCusRefund.addActionListener(this);
        jbMoneyInCdr.addActionListener(this);
        jbMoneyInDbr.addActionListener(this);
        jbMoneyOutCdr.addActionListener(this);
        jbMoneyOutDbr.addActionListener(this);
        jbPaymentSup.addActionListener(this);
        jbPaymentSupIntegral.addActionListener(this);
        jbPaymentCus.addActionListener(this);
        jbPaymentCusIntegral.addActionListener(this);
        jbExchangeProfit.addActionListener(this);
        jbExchangeLoss.addActionListener(this);
        jbCheck.addActionListener(this);
        jbTransfer.addActionListener(this);
        jtbEntryFilter.addActionListener(this);
        jcbFkAccountCashId_n.addItemListener(this);

        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryNew", "entryNew", KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryNewInsert", "entryNewInsert", KeyEvent.VK_I, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryNewCopy", "entryNewCopy", KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryEdit", "entryEdit", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryDelete", "entryDelete", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryMoveDown", "entryMoveDown", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryMoveUp", "entryMoveUp", KeyEvent.VK_U, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryViewSum", "entryViewSum", KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryFilter", "entryFilter", KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);

        /*
        SFormUtilities.createActionMap(rootPane, this, "publicActionMoneyIn", "moneyIn", KeyEvent.VK_I, KeyEvent.ALT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionPaymentCus", "paymentCus", KeyEvent.VK_C, KeyEvent.ALT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionPaymentCompleteCus", "paymentCompleteCus", KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK | KeyEvent.ALT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionMoneyOut", "moneyOut", KeyEvent.VK_E, KeyEvent.ALT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionPaymentSup", "paymentSup", KeyEvent.VK_P, KeyEvent.ALT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionPaymentCompleteSup", "paymentCompleteSup", KeyEvent.VK_P, KeyEvent.CTRL_DOWN_MASK | KeyEvent.ALT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionCheck", "check", KeyEvent.VK_H, KeyEvent.ALT_DOWN_MASK);
        */

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jftDate.isEnabled()) jftDate.requestFocus(); else jbCancel.requestFocus();
        }
    }

    private void updateRecord() {
        moRecord.setDate(moFieldDate.getDate());
        moRecord.setConcept(moFieldConcept.getString());
        if (moFieldFkAccountCashId_n.getComponent().isEnabled()) {
            moRecord.setFkCompanyBranchId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[0]);
            moRecord.setFkAccountCashId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[1]);
        }
        moRecord.setDbmsDataAccountCash(moAccountCash);

        moRecord.getDbmsRecordEntries().clear();

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            moRecord.getDbmsRecordEntries().add((SDataRecordEntry) row.getData());
        }
    }

    private void renderEntries(boolean renumber) {
        int sortingPosition = 0;

        moPaneGridEntries.renderTableRows();
        
        if (renumber) {
            for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
                SDataRecordEntry entry = (SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData();

                if (entry.getIsDeleted()) {
                    entry.setSortingPosition(0);
                }
                else {
                    entry.setSortingPosition(++sortingPosition);
                }

                entry.setIsRegistryEdited(true);
                moPaneGridEntries.getTableRow(i).prepareTableRow();
            }
        }
    }

    private void calculateBalance() {
        double debit = 0;
        double credit = 0;

        for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
            debit += ((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getDebit();
            credit += ((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getCredit();
        }

        jtfDebit.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(debit));
        jtfCredit.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(credit));
        jtfBalance.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(debit - credit));
    }

    private void renderPeriod() {
        java.util.Date date = moFieldDate.getDate();

        if (date == null) {
            jtfPeriod.setText("");
        }
        else {
            jtfPeriod.setText(miClient.getSessionXXX().getFormatters().getDateYearMonthFormat().format(date));
        }
    }

    private void renderCompanyBranch() {
        jtfCompanyBranch.setText(moRecord == null ? miClient.getSessionXXX().getCurrentCompanyBranchName() : SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moRecord.getFkCompanyBranchId() }));
        jtfCompanyBranch.setToolTipText(jtfCompanyBranch.getText());
        jtfCompanyBranch.setCaretPosition(0);
    }

    private void renderAccountCashSettings() {
        if (jcbFkAccountCashId_n.getSelectedIndex() <= 0) {
            moAccountCash = null;
        }
        else {
            moAccountCash = (SDataAccountCash) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC_CASH, moFieldFkAccountCashId_n.getKey(), SLibConstants.EXEC_MODE_SILENT);
        }

        if (moAccountCash == null) {
            jtfAccountCashCurrencyKey.setText("");
        }
        else {
            jtfAccountCashCurrencyKey.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moAccountCash.getFkCurrencyId() }, SLibConstants.DESCRIPTION_CODE));
        }
    }

    private int obtainNewUserId() {
        int userId = 0;

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            if (((SDataRecordEntry) row.getData()).getUserId() > userId) {
                userId = ((SDataRecordEntry) row.getData()).getUserId();
            }
        }

        return ++userId;
    }

    private java.util.Vector<erp.mfin.data.SDataCheck> obtainRecordChecks() {
        Vector<SDataCheck> checks = new Vector<SDataCheck>();

        for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
            if (((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getDbmsCheck() != null) {
                checks.add(((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getDbmsCheck());
            }
        }

        return checks;
    }

    private void itemStateFkAccountCashId_n() {
        renderAccountCashSettings();
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDate.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDate.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDate.requestFocus();
        }
    }

    /* XXX Not anymore required (2010-10-26)
    private void actionFkAccountCashId_n() {
        miClient.pickOption(SDataConstants.FIN_ACC_CASH, moFieldFkAccountCashId_n, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
    }
    */

    private void actionEntryNew() {
        if (jbEntryNew.isEnabled()) {
            SDataRecordEntry entry = null;

            updateRecord();

            moFormEntry.formReset();
            moFormEntry.setValue(SDataConstants.FIN_REC, moRecord);
            moFormEntry.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());

            switch (((int[]) ((SFormComponentItem) jcbGuiConceptPolicy.getSelectedItem()).getPrimaryKey())[0]) {
                case CONCEPT_POLICY_BLANK:
                    moFormEntry.setValue(SLibConstants.VALUE_TEXT, "");
                    break;
                case CONCEPT_POLICY_RECORD:
                    moFormEntry.setValue(SLibConstants.VALUE_TEXT, moFieldConcept.getString());
                    break;
                case CONCEPT_POLICY_CURR_ENTRY:
                    if (moPaneGridEntries.getTable().getSelectedRow() != -1) {
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, ((SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData()).getConcept());
                    }
                    break;
                case CONCEPT_POLICY_LAST_ENTRY:
                    moFormEntry.setValue(SLibConstants.VALUE_TEXT, msAuxLastEntryConcept);
                    break;
                default:
            }

            moFormEntry.setFormVisible(true);

            if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                entry = (SDataRecordEntry) moFormEntry.getRegistry();

                moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                renderEntries(true);
                calculateBalance();
                moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);

                msAuxLastEntryConcept = (String) moFormEntry.getValue(SLibConstants.VALUE_TEXT);    // preserve last entry concept
            }
        }
    }

    private void actionEntryNewInsert() {
        if (jbEntryNewInsert.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            SDataRecordEntry entry = null;

            if (index != -1) {
                updateRecord();

                moFormEntry.formReset();
                moFormEntry.setValue(SDataConstants.FIN_REC, moRecord);
                moFormEntry.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());

                switch (((int[]) ((SFormComponentItem) jcbGuiConceptPolicy.getSelectedItem()).getPrimaryKey())[0]) {
                    case CONCEPT_POLICY_BLANK:
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, "");
                        break;
                    case CONCEPT_POLICY_RECORD:
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, moFieldConcept.getString());
                        break;
                    case CONCEPT_POLICY_CURR_ENTRY:
                        if (moPaneGridEntries.getTable().getSelectedRow() != -1) {
                            moFormEntry.setValue(SLibConstants.VALUE_TEXT, ((SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData()).getConcept());
                        }
                        break;
                    case CONCEPT_POLICY_LAST_ENTRY:
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, msAuxLastEntryConcept);
                        break;
                    default:
                }

                moFormEntry.setFormVisible(true);

                if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    entry = (SDataRecordEntry) moFormEntry.getRegistry();

                    moPaneGridEntries.insertTableRow(new SDataRecordEntryRow(entry), index);
                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(index + 1);

                    msAuxLastEntryConcept = (String) moFormEntry.getValue(SLibConstants.VALUE_TEXT);    // preserve last entry concept
                }
            }
        }
    }

    private void actionEntryNewCopy() {
        if (jbEntryNewCopy.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            SDataRecordEntry entry = null;
            SDataRecordEntry entryCopy = null;

            if (index != -1) {
                entry = (SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData();
                entryCopy = entry.clone();
                entryCopy.setIsRegistryNew(false);

                updateRecord();

                moFormEntry.formReset();
                moFormEntry.setValue(SDataConstants.FIN_REC, moRecord);
                moFormEntry.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                moFormEntry.setRegistry(entryCopy);
                moFormEntry.setFormVisible(true);

                if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    entry = (SDataRecordEntry) moFormEntry.getRegistry();
                    entry.resetRegistry();
                    entry.setPkEntryId(0);
                    entry.setIsSystem(false);

                    if (index + 1 < moPaneGridEntries.getTableGuiRowCount()) {
                        moPaneGridEntries.insertTableRow(new SDataRecordEntryRow(entry), index + 1);
                    }
                    else {
                        moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                    }

                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(index + 1);

                    msAuxLastEntryConcept = (String) moFormEntry.getValue(SLibConstants.VALUE_TEXT);    // preserve last entry concept
                }
            }
        }
    }

    private void actionEntryEdit() {
        if (jbEntryEdit.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            SDataRecordEntry entry = null;
            SFormInterface form = null;

            if (index != -1) {
                entry = (SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData();

                updateRecord();

                if (entry.getDbmsCheck() != null) {
                    form = moFormMoneyOutCheck;
                    form.setValue(SDataConstants.FIN_REC, moRecord);
                    form.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                    form.formRefreshCatalogues();
                    form.formReset();
                }
                else {
                    form = moFormEntry;
                    form.formReset();
                    form.setValue(SDataConstants.FIN_REC, moRecord);
                    form.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                }

                form.setRegistry(entry);
                form.setFormVisible(true);

                if (form.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    moPaneGridEntries.setTableRow(new SDataRecordEntryRow(form.getRegistry()), index);
                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(index);
                }
            }
        }
    }

    private void actionEntryDelete() {
        if (jbEntryDelete.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            int userId = 0;
            SDataRecordEntry entry = null;

            if (index != -1 && miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                entry = (SDataRecordEntry) moPaneGridEntries.getTableRow(index).getData();

                if (entry.getIsDeleted()) {
                    miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_REG_ALREADY_DELETE);
                }
                else {
                    userId = entry.getUserId();

                    if (userId == 0) {
                        // Delete single entry:

                        if (entry.getIsRegistryNew()) {
                            moPaneGridEntries.removeTableRow(index);
                        }
                        else {
                            entry.setIsDeleted(true);
                            entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                            entry.setIsRegistryEdited(true);
                            entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

                            moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entry), index);
                        }
                    }
                    else {
                        // Delete group of entries:

                        for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); ) {
                            entry = (SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData();
                            if (entry.getUserId() != userId) {
                                i++;
                            }
                            else {
                                if (entry.getIsRegistryNew()) {
                                    moPaneGridEntries.removeTableRow(i);
                                    moPaneGridEntries.renderTableRows();
                                }
                                else {
                                    entry.setIsDeleted(true);
                                    entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                                    entry.setIsRegistryEdited(true);
                                    entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

                                    moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entry), i++);
                                }
                            }
                        }
                    }
                }

                renderEntries(true);
                calculateBalance();
                moPaneGridEntries.setTableRowSelection(index < moPaneGridEntries.getTableGuiRowCount() ? index : moPaneGridEntries.getTableGuiRowCount() - 1);
            }
        }
    }

    private void actionEntryMoveDown() {
        if (jbEntryMoveDown.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();

            if (index != -1 && index + 1 < moPaneGridEntries.getTableGuiRowCount()) {
                SDataRecordEntry entryA = (SDataRecordEntry) moPaneGridEntries.getTableRow(index).getData();
                SDataRecordEntry entryB = (SDataRecordEntry) moPaneGridEntries.getTableRow(index + 1).getData();

                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryB), index);
                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryA), index + 1);
                renderEntries(true);
                moPaneGridEntries.setTableRowSelection(index + 1);
            }
        }
    }

    private void actionEntryMoveUp() {
        if (jbEntryMoveUp.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();

            if (index > 0) {
                SDataRecordEntry entryA = (SDataRecordEntry) moPaneGridEntries.getTableRow(index - 1).getData();
                SDataRecordEntry entryB = (SDataRecordEntry) moPaneGridEntries.getTableRow(index).getData();

                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryB), index - 1);
                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryA), index);
                renderEntries(true);
                moPaneGridEntries.setTableRowSelection(index - 1);
            }
        }
    }

    private void actionEntryViewSum() {
        int count = 0;
        double debit = 0d;
        double credit = 0d;

        if (moPaneGridEntries.getTable().getSelectedRow() != -1) {
            for (int row : moPaneGridEntries.getTable().getSelectedRows()) {
                count++;
                debit += ((SDataRecordEntry) ((SDataRecordEntryRow) moPaneGridEntries.getTableRow(row)).getData()).getDebit();
                credit += ((SDataRecordEntry) ((SDataRecordEntryRow) moPaneGridEntries.getTableRow(row)).getData()).getCredit();
            }

            miClient.showMsgBoxInformation(
                    "Total cargos: " + miClient.getSessionXXX().getFormatters().getDecimalsCurrencyLocalFormat().format(debit) + ".\n" +
                    "Total abonos: " + miClient.getSessionXXX().getFormatters().getDecimalsCurrencyLocalFormat().format(credit) + "." +
                    (debit == 0 || credit == 0 ? "" : "\nDiferencia (cargos-abonos): " + miClient.getSessionXXX().getFormatters().getDecimalsCurrencyLocalFormat().format(debit - credit) + "."));
        }
    }

    private void actionMoneyIn() {
        updateRecord();

        moFormMoneyInOut.formRefreshCatalogues();
        moFormMoneyInOut.formReset();
        moFormMoneyInOut.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOut.setValue(SDataConstants.FIN_ACC_CASH, moRecord.getDbmsDataAccountCash());
        moFormMoneyInOut.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, true);
        moFormMoneyInOut.setFormVisible(true);

        if (moFormMoneyInOut.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOut.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyInOther() {
        updateRecord();

        moFormMoneyInOut.formRefreshCatalogues();
        moFormMoneyInOut.formReset();
        moFormMoneyInOut.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOut.setValue(SDataConstants.FIN_ACC_CASH, null);
        moFormMoneyInOut.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, true);
        moFormMoneyInOut.setFormVisible(true);

        if (moFormMoneyInOut.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOut.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyOut() {
        updateRecord();

        moFormMoneyInOut.formRefreshCatalogues();
        moFormMoneyInOut.formReset();
        moFormMoneyInOut.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOut.setValue(SDataConstants.FIN_ACC_CASH, moRecord.getDbmsDataAccountCash());
        moFormMoneyInOut.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, false);
        moFormMoneyInOut.setFormVisible(true);

        if (moFormMoneyInOut.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOut.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyOutOther() {
        updateRecord();

        moFormMoneyInOut.formRefreshCatalogues();
        moFormMoneyInOut.formReset();
        moFormMoneyInOut.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOut.setValue(SDataConstants.FIN_ACC_CASH, null);
        moFormMoneyInOut.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, false);
        moFormMoneyInOut.setFormVisible(true);

        if (moFormMoneyInOut.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOut.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionAdvanceSup() {
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_SUP);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_SUP_ADV);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionAdvanceSupRefund() {
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_SUP);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_SUP_ADV_REF);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionAdvanceCus() {
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_CUS);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_CUS_ADV);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionAdvanceCusRefund() {
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_CUS);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_CUS_ADV_REF);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyInCdr() {
        updateRecord();

        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_CDR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_CDR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyInDbr() {
        updateRecord();

        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_DBR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_DBR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyOutCdr() {
        updateRecord();

        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_CDR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_CDR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionMoneyOutDbr() {
        updateRecord();

        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, SDataConstants.BPSX_BP_DBR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_DBR);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionPaymentCus() {
        if (jbPaymentCus.isEnabled()) {
            int userId = 0;
            double rateToday = 0d;
            double[] cashBal = null;
            SDataRecord record = null;

            try {
                rateToday = SDataUtilities.obtainExchangeRate(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate());
                cashBal = SDataUtilities.obtainAccountCashBalanceUpdated(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate(),
                        moAccountCash.getPrimaryKey(), moAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                            SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK, moRecord, null);

                moDialogPaymentCus.formReset();
                moDialogPaymentCus.setValue(SDataConstants.FIN_ACC_CASH, new Object[] { moRecord, moAccountCash, rateToday, cashBal });
                moDialogPaymentCus.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                moDialogPaymentCus.setFormVisible(true);

                if (moDialogPaymentCus.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNewUserId();
                    record = (SDataRecord) moDialogPaymentCus.getRegistry();

                    if (record.getDbmsRecordEntries().size() > 0) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }

    private void actionPaymentCusIntegral() {
        if (jbPaymentCusIntegral.isEnabled()) {
            int userId = 0;
            double rateToday = 0d;
            double[] cashBal = null;
            SDataRecord record = null;

            try {
                rateToday = SDataUtilities.obtainExchangeRate(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate());
                cashBal = SDataUtilities.obtainAccountCashBalanceUpdated(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate(),
                        moAccountCash.getPrimaryKey(), moAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                            SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK, moRecord, null);

                moDialogPaymentCompleteCus.formReset();
                moDialogPaymentCompleteCus.setValue(SDataConstants.FIN_ACC_CASH, new Object[] { moRecord, moAccountCash, rateToday, cashBal });
                moDialogPaymentCompleteCus.setFormVisible(true);

                if (moDialogPaymentCompleteCus.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNewUserId();
                    record = (SDataRecord) moDialogPaymentCompleteCus.getRegistry();

                    if (record.getDbmsRecordEntries().size() > 0) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }

    private void actionPaymentSup() {
        if (jbPaymentSup.isEnabled()) {
            int userId = 0;
            double rateToday = 0d;
            double[] cashBal = null;
            SDataRecord record = null;

            try {
                rateToday = SDataUtilities.obtainExchangeRate(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate());
                cashBal = SDataUtilities.obtainAccountCashBalanceUpdated(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate(),
                        moAccountCash.getPrimaryKey(), moAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                            SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK, moRecord, null);

                moDialogPaymentSup.formReset();
                moDialogPaymentSup.setValue(SDataConstants.FIN_ACC_CASH, new Object[] { moRecord, moAccountCash, rateToday, cashBal });
                moDialogPaymentSup.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                moDialogPaymentSup.setFormVisible(true);

                if (moDialogPaymentSup.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNewUserId();
                    record = (SDataRecord) moDialogPaymentSup.getRegistry();

                    if (record.getDbmsRecordEntries().size() > 0) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }

    private void actionPaymentSupIntegral() {
        if (jbPaymentSupIntegral.isEnabled()) {
            int userId = 0;
            double rateToday = 0d;
            double[] cashBal = null;
            SDataRecord record = null;

            try {
                rateToday = SDataUtilities.obtainExchangeRate(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate());
                cashBal = SDataUtilities.obtainAccountCashBalanceUpdated(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate(),
                        moAccountCash.getPrimaryKey(), moAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                            SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK, moRecord, null);

                moDialogPaymentCompleteSup.formReset();
                moDialogPaymentCompleteSup.setValue(SDataConstants.FIN_ACC_CASH, new Object[] { moRecord, moAccountCash, rateToday, cashBal });
                moDialogPaymentCompleteSup.setFormVisible(true);

                if (moDialogPaymentCompleteSup.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNewUserId();
                    record = (SDataRecord) moDialogPaymentCompleteSup.getRegistry();

                    if (record.getDbmsRecordEntries().size() > 0) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }

    private void actionExchangeProfit() {
        int userId = 0;
        SDataRecord record = null;

        if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId_n())) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_EMPTY_ACC);
        }
        else {            
            if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkCostCenterDifferenceIncomeId_n())) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_EMPTY_CC);
            }
            else {                
                moFormDifferenceIncomeExpense.setValue(SDataConstants.FIN_REC, moRecord);
                moFormDifferenceIncomeExpense.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, true);
                moFormDifferenceIncomeExpense.formReset();
                moFormDifferenceIncomeExpense.setFormVisible(true);

                if (moFormDifferenceIncomeExpense.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNewUserId();
                    record = (SDataRecord) moFormDifferenceIncomeExpense.getRegistry();

                    if (record.getDbmsRecordEntries().size() > 0) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
        }        
    }

    private void actionExchangeLoss() {
        int userId = 0;
        SDataRecord record = null;

        if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId_n())) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_EMPTY_ACC);
        }
        else {            
            if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkCostCenterDifferenceExpenseId_n())) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_EMPTY_CC);
            }
            else {                
                moFormDifferenceIncomeExpense.setValue(SDataConstants.FIN_REC, moRecord);
                moFormDifferenceIncomeExpense.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, false);
                moFormDifferenceIncomeExpense.formReset();
                moFormDifferenceIncomeExpense.setFormVisible(true);

                if (moFormDifferenceIncomeExpense.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNewUserId();
                    record = (SDataRecord) moFormDifferenceIncomeExpense.getRegistry();

                    if (record.getDbmsRecordEntries().size() > 0) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
        }
    }

    private void actionCheck() {
        updateRecord();

        moFormMoneyOutCheck.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyOutCheck.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyOutCheck.formRefreshCatalogues();
        moFormMoneyOutCheck.formReset();
        moFormMoneyOutCheck.setFormVisible(true);

        if (moFormMoneyOutCheck.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyOutCheck.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionTransfer() {
        int userId = 0;
        SDataRecord record = null;

        updateRecord();

        moFormAccountCashTransfer.setValue(SDataConstants.FIN_REC, moRecord);
        moFormAccountCashTransfer.formRefreshCatalogues();
        moFormAccountCashTransfer.formReset();
        moFormAccountCashTransfer.setFormVisible(true);

        if (moFormAccountCashTransfer.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            userId = obtainNewUserId();
            record = (SDataRecord) moFormAccountCashTransfer.getRegistry();

            if (record.getDbmsRecordEntries().size() > 0) {
                for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                    entry.setUserId(userId);
                    moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                }

                renderEntries(true);
                calculateBalance();
                moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
            }
        }
    }

    private void actionEntryFilter() {
        if (jtbEntryFilter.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();

            moPaneGridEntries.setGridViewStatus(!jtbEntryFilter.isSelected() ? STableConstants.VIEW_STATUS_ALL : STableConstants.VIEW_STATUS_ALIVE);
            renderEntries(false);
            moPaneGridEntries.setTableRowSelection(index < moPaneGridEntries.getTableGuiRowCount() ? index : moPaneGridEntries.getTableGuiRowCount() - 1);

            jbEntryMoveUp.setEnabled(jtbEntryFilter.isSelected() && jbEntryNew.isEnabled());
            jbEntryMoveDown.setEnabled(jtbEntryFilter.isSelected() && jbEntryNew.isEnabled());
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        if (jbOk.isEnabled()) {
            boolean ok = true;
            SFormValidation validation = formValidate();

            if (validation.getIsError()) {
                if (validation.getComponent() != null) {
                    validation.getComponent().requestFocus();
                }
                if (validation.getMessage().length() > 0) {
                    miClient.showMsgBoxWarning(validation.getMessage());
                }
            }
            else {
                if (!mbOriginalIsDeleted && jckIsDeleted.isSelected() && miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) != JOptionPane.YES_OPTION) {
                    ok = false;
                }

                if (ok) {
                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    setVisible(false);
                }
            }
        }
    }

    private void actionCancel() {
        if (jbCancel.isEnabled()) {
            if (jckIsSystem.isSelected() || mbParamIsReadOnly || miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_FORM_CLOSE) == JOptionPane.YES_OPTION) {
                mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
                setVisible(false);
            }
        }
    }

    public void publicActionEntryNew() {
        actionEntryNew();
    }

    public void publicActionEntryNewInsert() {
        actionEntryNewInsert();
    }

    public void publicActionEntryNewCopy() {
        actionEntryNewCopy();
    }

    public void publicActionEntryEdit() {
        actionEntryEdit();
    }

    public void publicActionEntryDelete() {
        actionEntryDelete();
    }

    public void publicActionEntryMoveDown() {
        actionEntryMoveDown();
    }

    public void publicActionEntryMoveUp() {
        actionEntryMoveUp();
    }

    public void publicActionEntryViewSum() {
        actionEntryViewSum();
    }

    public void publicActionEntryFilter() {
        jtbEntryFilter.setSelected(!jtbEntryFilter.isSelected());
    }

    public void publicActionMoneyIn() {
        actionMoneyIn();
    }

    public void publicActionPaymentCus() {
        actionPaymentCus();
    }

    public void publicActionPaymentCompleteCus() {
        actionPaymentCusIntegral();
    }

    public void publicActionPaymentSup() {
        actionPaymentSup();
    }

    public void publicActionCheck() {
        actionCheck();
    }

    public void publicActionMoneyOut() {
        actionMoneyOut();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAdvanceCus;
    private javax.swing.JButton jbAdvanceCusRefund;
    private javax.swing.JButton jbAdvanceSup;
    private javax.swing.JButton jbAdvanceSupRefund;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCheck;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbEntryDelete;
    private javax.swing.JButton jbEntryEdit;
    private javax.swing.JButton jbEntryMoveDown;
    private javax.swing.JButton jbEntryMoveUp;
    private javax.swing.JButton jbEntryNew;
    private javax.swing.JButton jbEntryNewCopy;
    private javax.swing.JButton jbEntryNewInsert;
    private javax.swing.JButton jbEntryViewSum;
    private javax.swing.JButton jbExchangeLoss;
    private javax.swing.JButton jbExchangeProfit;
    private javax.swing.JButton jbMoneyIn;
    private javax.swing.JButton jbMoneyInCdr;
    private javax.swing.JButton jbMoneyInDbr;
    private javax.swing.JButton jbMoneyInOther;
    private javax.swing.JButton jbMoneyOut;
    private javax.swing.JButton jbMoneyOutCdr;
    private javax.swing.JButton jbMoneyOutDbr;
    private javax.swing.JButton jbMoneyOutOther;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPaymentCus;
    private javax.swing.JButton jbPaymentCusIntegral;
    private javax.swing.JButton jbPaymentSup;
    private javax.swing.JButton jbPaymentSupIntegral;
    private javax.swing.JButton jbTransfer;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountCashId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbGuiConceptPolicy;
    private javax.swing.JCheckBox jckIsAdjustmentAudit;
    private javax.swing.JCheckBox jckIsAdjustmentYearEnd;
    private javax.swing.JCheckBox jckIsAudited;
    private javax.swing.JCheckBox jckIsAuthorized;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsRecordConceptCopyEnabled;
    private javax.swing.JCheckBox jckIsSystem;
    private javax.swing.JFormattedTextField jftDate;
    private javax.swing.JLabel jlBalance;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlCredit;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDebit;
    private javax.swing.JLabel jlFkAccountCashId_n;
    private javax.swing.JLabel jlGuiConceptPolicy;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlPkNumberId;
    private javax.swing.JPanel jpControlCashAccount01;
    private javax.swing.JPanel jpControlCashAccount02;
    private javax.swing.JPanel jpControlCashAccount03;
    private javax.swing.JPanel jpEntriesControl;
    private javax.swing.JPanel jpEntriesControlCashAccount;
    private javax.swing.JPanel jpEntriesControlCenter;
    private javax.swing.JPanel jpEntriesControlEast;
    private javax.swing.JPanel jpEntriesControlWest;
    private javax.swing.JPanel jpEntriesPanel;
    private javax.swing.JSeparator jsCashAccount011;
    private javax.swing.JSeparator jsCashAccount012;
    private javax.swing.JSeparator jsCashAccount013;
    private javax.swing.JSeparator jsCashAccount021;
    private javax.swing.JSeparator jsCashAccount022;
    private javax.swing.JSeparator jsCashAccount023;
    private javax.swing.JSeparator jsEntry01;
    private javax.swing.JSeparator jsEntry2;
    private javax.swing.JSeparator jsEntry3;
    private javax.swing.JToggleButton jtbEntryFilter;
    private javax.swing.JTextField jtfAccountCashCurrencyKey;
    private javax.swing.JTextField jtfBalance;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfCredit;
    private javax.swing.JTextField jtfCurrencyKeyBalance;
    private javax.swing.JTextField jtfCurrencyKeyCredit;
    private javax.swing.JTextField jtfCurrencyKeyDebit;
    private javax.swing.JTextField jtfDebit;
    private javax.swing.JTextField jtfPeriod;
    private javax.swing.JTextField jtfPkNumberId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {

    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moRecord = null;
        moAccountCash = null;
        mbOriginalIsDeleted = false;
        msAuxLastEntryConcept = "";

        moPaneGridEntries.createTable(this);
        moPaneGridEntries.clearTableRows();
        moPaneGridEntries.setGridViewStatus(STableConstants.VIEW_STATUS_ALIVE);
        moPaneGridEntries.getTable().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jtbEntryFilter.setSelected(true);
        jpEntriesControl.remove(jpEntriesControlCashAccount);

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        jckIsRecordConceptCopyEnabled.setSelected(miClient.getSessionXXX().getParamsErp().getIsRecordConceptCopyEnabled());
        jtfCurrencyKeyDebit.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyCredit.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyBalance.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());

        jftDate.setEnabled(true);
        jtfConcept.setEnabled(true);
        jbDate.setEnabled(true);
        jbEntryNew.setEnabled(true);
        jbEntryNewInsert.setEnabled(true);
        jbEntryNewCopy.setEnabled(true);
        jbEntryEdit.setEnabled(true);
        jbEntryDelete.setEnabled(true);
        jbEntryMoveDown.setEnabled(true);
        jbEntryMoveUp.setEnabled(true);
        jbMoneyIn.setEnabled(true);
        jbMoneyInOther.setEnabled(true);
        jbMoneyOut.setEnabled(true);
        jbMoneyOutOther.setEnabled(true);
        jbAdvanceSup.setEnabled(true);
        jbAdvanceSupRefund.setEnabled(true);
        jbAdvanceCus.setEnabled(true);
        jbAdvanceCusRefund.setEnabled(true);
        jbPaymentSup.setEnabled(true);
        jbPaymentSupIntegral.setEnabled(true);
        jbPaymentCus.setEnabled(true);
        jbPaymentCusIntegral.setEnabled(true);
        jbMoneyInCdr.setEnabled(true);
        jbMoneyInDbr.setEnabled(true);
        jbMoneyOutCdr.setEnabled(true);
        jbMoneyOutDbr.setEnabled(true);
        jbExchangeProfit.setEnabled(true);
        jbExchangeLoss.setEnabled(true);
        jbCheck.setEnabled(true);
        jbTransfer.setEnabled(true);
        jcbGuiConceptPolicy.setEnabled(true);
        jbOk.setEnabled(true);

        jckIsDeleted.setEnabled(false);
        jckIsAdjustmentYearEnd.setEnabled(false);
        jckIsAdjustmentAudit.setEnabled(false);

        calculateBalance();
        renderPeriod();
        renderCompanyBranch();
        renderAccountCashSettings();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkAccountCashId_n, SDataConstants.FIN_ACC_CASH, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
        moFormEntry.formRefreshCatalogues();
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            // Validate accounting record period:

            if (!SLibTimeUtilities.isBelongingToPeriod(moFieldDate.getDate(), moRecord.getPkYearId(), moRecord.getPkPeriodId())) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_DATE_REC);
                validation.setComponent(jftDate);
            }

            if (!validation.getIsError()) {
                if (moFieldIsDeleted.getBoolean()) {
                    SDataRecordEntry entry = null;

                    for (STableRow row : moPaneGridEntries.getGridRows()) {
                        entry = (SDataRecordEntry) row.getData();
                        if (entry.getIsSystem() && entry.getUserId() == 0) {
                            validation.setMessage("No se puede eliminar esta pÃ³liza contable puesto que al menos una de sus partidas es de sistema.");
                            break;
                        }
                    }
                }

                if (!validation.getIsError()) {
                    if (jcbFkAccountCashId_n.getSelectedIndex() > 0) {
                        String currency = "";
                        SDataRecordEntry entry = null;

                        // Validate account cash currency:

                        updateRecord();
                        currency = SDataReadDescriptions.getCatalogueDescription(miClient,
                                SDataConstants.CFGU_CUR, new int[] { moRecord.getDbmsDataAccountCash().getFkCurrencyId() });

                        for (STableRow row : moPaneGridEntries.getGridRows()) {
                            entry = (SDataRecordEntry) row.getData();
                            if (!entry.getIsDeleted() && !entry.getIsExchangeDifference()) {
                                if (entry.getFkCurrencyId() != moRecord.getDbmsDataAccountCash().getFkCurrencyId()) {
                                    if (miClient.showMsgBoxConfirm("Al menos una de las monedas de las partidas no coincide con " +
                                            "la moneda de la cuenta de efectivo de la pÃ³liza contable (" + currency + ").\nÂ¿Desea continuar?") != JOptionPane.YES_OPTION) {
                                        validation.setMessage("Se debe especificar la moneda de las partidas como '" + currency + "'.");
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        boolean isReadOnly = false;

        moRecord = (SDataRecord) registry;
        moAccountCash = moRecord.getDbmsDataAccountCash();

        SFormUtilities.populateComboBox(miClient, jcbFkAccountCashId_n, SDataConstants.FIN_ACC_CASH, new int[] { moRecord.getFkCompanyBranchId_n() });

        moFieldDate.setFieldValue(moRecord.getDate());
        moFieldConcept.setFieldValue(moRecord.getConcept());
        moFieldIsAdjustmentYearEnd.setFieldValue(moRecord.getIsAdjustmentsYearEnd());
        moFieldIsAdjustmentAudit.setFieldValue(moRecord.getIsAdjustmentsAudit());
        moFieldFkAccountCashId_n.setFieldValue(new int[] { moRecord.getFkCompanyBranchId_n(), moRecord.getFkAccountCashId_n() });
        jtfPkNumberId.setText(moRecord.getPkRecordTypeId() + "-" + moRecord.getPkNumberId());
        //jtfPkNumberId.setText(moRecord.getPkRecordTypeId() + "-" + miClient.getSessionXXX().getFormatters().getRecordNumberFormat().format(moRecord.getPkNumberId()));
        jckIsAudited.setSelected(moRecord.getIsAudited());
        jckIsAuthorized.setSelected(moRecord.getIsAuthorized());
        jckIsSystem.setSelected(moRecord.getIsSystem());
        moFieldIsDeleted.setFieldValue(moRecord.getIsDeleted());

        mbOriginalIsDeleted = moRecord.getIsDeleted();

        for (SDataRecordEntry entry : moRecord.getDbmsRecordEntries()) {
            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
        }
        renderEntries(false);
        moPaneGridEntries.setTableRowSelection(0);

        if (!SDataUtilities.isPeriodOpen(miClient, moRecord.getDate())) {
            mbParamIsReadOnly = true;
        }

        if (mbParamIsReadOnly || moRecord.getIsSystem() || moRecord.getIsAudited() || moRecord.getIsAuthorized()) {
            isReadOnly = true;

            jftDate.setEnabled(false);
            jtfConcept.setEnabled(false);
            jbDate.setEnabled(false);
            jbEntryNew.setEnabled(false);
            jbEntryNewInsert.setEnabled(false);
            jbEntryNewCopy.setEnabled(false);
            jbEntryEdit.setEnabled(false);
            jbEntryDelete.setEnabled(false);
            jbEntryMoveDown.setEnabled(false);
            jbEntryMoveUp.setEnabled(false);
            jbMoneyIn.setEnabled(false);
            jbMoneyInOther.setEnabled(false);
            jbMoneyOut.setEnabled(false);
            jbMoneyOutOther.setEnabled(false);
            jbAdvanceSup.setEnabled(false);
            jbAdvanceSupRefund.setEnabled(false);
            jbAdvanceCus.setEnabled(false);
            jbAdvanceCusRefund.setEnabled(false);
            jbPaymentSup.setEnabled(false);
            jbPaymentSupIntegral.setEnabled(false);
            jbPaymentCus.setEnabled(false);
            jbPaymentCusIntegral.setEnabled(false);
            jbMoneyInCdr.setEnabled(false);
            jbMoneyInDbr.setEnabled(false);
            jbMoneyOutCdr.setEnabled(false);
            jbMoneyOutDbr.setEnabled(false);
            jbExchangeProfit.setEnabled(false);
            jbExchangeLoss.setEnabled(false);
            jbCheck.setEnabled(false);
            jbTransfer.setEnabled(false);
            jcbGuiConceptPolicy.setEnabled(false);
            jbOk.setEnabled(false);
        }
        else {
            jckIsDeleted.setEnabled(true);
            jckIsAdjustmentYearEnd.setEnabled(true);
            jckIsAdjustmentAudit.setEnabled(true);
        }

        if (moAccountCash != null) {
            jpEntriesControl.add(jpEntriesControlCashAccount, BorderLayout.SOUTH);
            jbExchangeProfit.setEnabled(!isReadOnly && moAccountCash.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
            jbExchangeLoss.setEnabled(!isReadOnly && moAccountCash.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
            jbCheck.setEnabled(!isReadOnly && moAccountCash.getIsCheckWalletApplying());
        }

        if (moRecord.getPkRecordTypeId().equalsIgnoreCase(SDataConstantsSys.FINU_TP_REC_JOURNAL)) {
            jckIsAdjustmentYearEnd.setEnabled(true);
            jckIsAdjustmentAudit.setEnabled(true);
        }
        else {
            jckIsAdjustmentYearEnd.setEnabled(false);
            jckIsAdjustmentAudit.setEnabled(false);
        }

        calculateBalance();
        renderPeriod();
        renderCompanyBranch();
        renderAccountCashSettings();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moRecord == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FORM_EDIT_ONLY);
        }
        else {
            moRecord.setDate(moFieldDate.getDate());
            moRecord.setConcept(moFieldConcept.getString());
            moRecord.setIsAdjustmentsYearEnd(moFieldIsAdjustmentYearEnd.getBoolean());
            moRecord.setIsAdjustmentsAudit(moFieldIsAdjustmentAudit.getBoolean());
            moRecord.setIsDeleted(moFieldIsDeleted.getBoolean());
            if (moFieldFkAccountCashId_n.getComponent().isEnabled()) {
                moRecord.setFkCompanyBranchId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[0]);
                moRecord.setFkAccountCashId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[1]);
            }
            moRecord.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

            moRecord.getDbmsRecordEntries().clear();

            for (STableRow row : moPaneGridEntries.getGridRows()) {
                moRecord.getDbmsRecordEntries().add((SDataRecordEntry) row.getData());
            }
        }

        return moRecord;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SLibConstants.VALUE_STATUS:
                mbParamIsReadOnly = (Boolean) value;
                break;
            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDate) {
                actionDate();
            }
            else if (button == jbEntryNew) {
                actionEntryNew();
            }
            else if (button == jbEntryNewCopy) {
                actionEntryNewCopy();
            }
            else if (button == jbEntryNewInsert) {
                actionEntryNewInsert();
            }
            else if (button == jbEntryEdit) {
                actionEntryEdit();
            }
            else if (button == jbEntryDelete) {
                actionEntryDelete();
            }
            else if (button == jbEntryMoveDown) {
                actionEntryMoveDown();
            }
            else if (button == jbEntryMoveUp) {
                actionEntryMoveUp();
            }
            else if (button == jbEntryViewSum) {
                actionEntryViewSum();
            }
            else if (button == jbMoneyIn) {
                actionMoneyIn();
            }
            else if (button == jbMoneyInOther) {
                actionMoneyInOther();
            }
            else if (button == jbMoneyOut) {
                actionMoneyOut();
            }
            else if (button == jbMoneyOutOther) {
                actionMoneyOutOther();
            }
            else if (button == jbAdvanceSup) {
                actionAdvanceSup();
            }
            else if (button == jbAdvanceSupRefund) {
                actionAdvanceSupRefund();
            }
            else if (button == jbAdvanceCus) {
                actionAdvanceCus();
            }
            else if (button == jbAdvanceCusRefund) {
                actionAdvanceCusRefund();
            }
            else if (button == jbPaymentSup) {
                actionPaymentSup();
            }
            else if (button == jbPaymentSupIntegral) {
                actionPaymentSupIntegral();
            }
            else if (button == jbPaymentCus) {
                actionPaymentCus();
            }
            else if (button == jbPaymentCusIntegral) {
                actionPaymentCusIntegral();
            }
            else if (button == jbMoneyInCdr) {
                actionMoneyInCdr();
            }
            else if (button == jbMoneyInDbr) {
                actionMoneyInDbr();
            }
            else if (button == jbMoneyOutCdr) {
                actionMoneyOutCdr();
            }
            else if (button == jbMoneyOutDbr) {
                actionMoneyOutDbr();
            }
            else if (button == jbExchangeProfit) {
                actionExchangeProfit();
            }
            else if (button == jbExchangeLoss) {
                actionExchangeLoss();
            }
            else if (button == jbCheck) {
                actionCheck();
            }
            else if (button == jbTransfer) {
                actionTransfer();
            }
        }
        else if (e.getSource() instanceof javax.swing.JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbEntryFilter) {
                actionEntryFilter();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == jcbFkAccountCashId_n) {
                itemStateFkAccountCashId_n();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            SDataRecordEntryRow row = (SDataRecordEntryRow) moPaneGridEntries.getSelectedTableRow();

            if (row != null) {
                SDataRecordEntry entry = (SDataRecordEntry) row.getData();

                jbEntryNewCopy.setEnabled(!jckIsSystem.isSelected() && !entry.getIsSystem() && !mbParamIsReadOnly);
                jbEntryEdit.setEnabled(!jckIsSystem.isSelected() && !entry.getIsSystem() && !mbParamIsReadOnly);
                jbEntryDelete.setEnabled(!jckIsSystem.isSelected() && (!entry.getIsSystem() || entry.getUserId() != 0) && !mbParamIsReadOnly);
            }
        }
    }
}
