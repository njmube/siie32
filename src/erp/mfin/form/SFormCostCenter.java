/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.gui.account.SAccountUtils;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataCostCenter;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.SLibTimeUtils;

/**
 *
 * @author  Sergio Flores
 */
public class SFormCostCenter extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataCostCenter moCostCenter;
    private erp.lib.form.SFormField moFieldCostCenter;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd_n;
    private erp.lib.form.SFormField moFieldIsActive;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.mfin.form.SPanelAccount moPanelPkCostCenterId;

    /** Creates new form DFormCompany */
    public SFormCostCenter(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_CC;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpRegistryNorth = new javax.swing.JPanel();
        jlDummyCostCenter = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCostCenter = new javax.swing.JLabel();
        jtfCostCenter = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd_n = new javax.swing.JLabel();
        jftDateEnd_n = new javax.swing.JFormattedTextField();
        jbDateEnd_n = new javax.swing.JButton();
        jckIsActive = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpControls = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Centro de costo"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout(5, 5));

        jpRegistryNorth.setLayout(new java.awt.BorderLayout());

        jlDummyCostCenter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDummyCostCenter.setText("[Panel centro costo]");
        jlDummyCostCenter.setPreferredSize(new java.awt.Dimension(100, 50));
        jpRegistryNorth.add(jlDummyCostCenter, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(5, 1, 5, 1));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCostCenter.setText("Centro costo: *");
        jlCostCenter.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlCostCenter);

        jtfCostCenter.setText("COST CENTER");
        jtfCostCenter.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jtfCostCenter);

        jPanel4.add(jPanel6);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateStart.setText("Fecha inicial vigencia: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlDateStart);

        jftDateStart.setText("yyyy/mm/dd");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbDateStart);

        jPanel4.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateEnd_n.setText("Fecha final vigencia:"); // NOI18N
        jlDateEnd_n.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlDateEnd_n);

        jftDateEnd_n.setText("yyyy/mm/dd");
        jftDateEnd_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jftDateEnd_n);

        jbDateEnd_n.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd_n.setToolTipText("Seleccionar fecha");
        jbDateEnd_n.setFocusable(false);
        jbDateEnd_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbDateEnd_n);

        jPanel4.add(jPanel12);

        jckIsActive.setText("Centro activo");
        jPanel4.add(jckIsActive);

        jckIsDeleted.setText("Registro eliminado");
        jPanel4.add(jckIsDeleted);

        jpRegistryNorth.add(jPanel4, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpRegistryNorth, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar"); // NOI18N
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOK);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        try {
            moPanelPkCostCenterId = new SPanelAccount(miClient, SDataConstants.FIN_CC, true, true, true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpRegistryNorth.remove(jlDummyCostCenter);
        jpRegistryNorth.add(moPanelPkCostCenterId, BorderLayout.NORTH);

        moFieldCostCenter = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCostCenter, jlCostCenter);
        moFieldCostCenter.setLengthMax(100);
        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateEnd_n, jlDateEnd_n);
        moFieldDateEnd_n.setPickerButton(jbDateEnd_n);
        moFieldIsActive = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsActive);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldCostCenter);
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd_n);
        mvFields.add(moFieldIsActive);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDateStart.addActionListener(this);
        jbDateEnd_n.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moPanelPkCostCenterId.getFieldAccount().getComponent().isEnabled()) {
                moPanelPkCostCenterId.getFieldAccount().getComponent().requestFocus();
            }
            else {
                jtfCostCenter.requestFocus();
            }
        }
    }

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionDateEnd_n() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd_n.getDate(), moFieldDateEnd_n);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateEnd_n;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbOK;
    private javax.swing.JCheckBox jckIsActive;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JFormattedTextField jftDateEnd_n;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlCostCenter;
    private javax.swing.JLabel jlDateEnd_n;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummyCostCenter;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRegistryNorth;
    private javax.swing.JTextField jtfCostCenter;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCostCenter = null;

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        moFieldDateStart.setFieldValue(SLibTimeUtils.getBeginOfYear(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd_n.setFieldValue(null);
        moFieldIsActive.setFieldValue(true);

        moPanelPkCostCenterId.enableFields(true);
        moPanelPkCostCenterId.resetPanel();
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            // Validate principal cost-center:

            if (moCostCenter == null) {
                if (moPanelPkCostCenterId.getDataCostCenterMajor() == null) {
                    validation.setMessage("El centro de costo principal no existe.");
                    validation.setComponent(moPanelPkCostCenterId.getFieldAccount().getComponent());
                }
                else if (moPanelPkCostCenterId.getFieldAccount().getUsedLevelsCount() > moPanelPkCostCenterId.getDataCostCenterMajor().getDeep()) {
                    validation.setMessage("La profundidad del centro de costo (" + moPanelPkCostCenterId.getFieldAccount().getUsedLevelsCount() + ") " +
                            "es mayor a la profundidadl centro de costo principal (" + moPanelPkCostCenterId.getDataCostCenterMajor().getDeep() + ").");
                    validation.setComponent(moPanelPkCostCenterId.getFieldAccount().getComponent());
                }
                else if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_CC_VAL,
                        new Object[] { moPanelPkCostCenterId.getFieldAccount().getString() },
                        SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                    validation.setMessage("Ya existe un registro para el valor especificado en el campo 'No. centro costo'.");
                    validation.setComponent(moPanelPkCostCenterId.getFieldAccount().getComponent());
                }
                else if (moPanelPkCostCenterId.getDataCostCenterMajor().getDateStart().after(moFieldDateStart.getDate())) {
                    validation.setMessage("La fecha del campo '" + jlDateStart.getText() + "' no puede ser anterior a la fecha " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moPanelPkCostCenterId.getDataCostCenterMajor().getDateStart()) + ".");
                    validation.setComponent(jftDateStart);
                }
                else if (moPanelPkCostCenterId.getDataCostCenterMajor().getDateEnd_n() != null && (moFieldDateEnd_n.getDate() == null || moPanelPkCostCenterId.getDataCostCenterMajor().getDateEnd_n().before(moFieldDateEnd_n.getDate()))) {
                    validation.setMessage("La fecha del campo '" + jlDateEnd_n.getText() + "' no puede ser posterior a la fecha " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moPanelPkCostCenterId.getDataCostCenterMajor().getDateEnd_n()) + ".");
                    validation.setComponent(jftDateEnd_n);
                }
            }

            if (!validation.getIsError()) {
                if (moFieldDateEnd_n.getDate() != null && moFieldDateEnd_n.getDate().before(moFieldDateStart.getDate())) {
                    validation.setMessage("La fecha del campo '" + jlDateEnd_n.getText() + "' no puede ser anterior a la fecha del campo '" + jlDateStart.getText() + "'.");
                    validation.setComponent(jftDateEnd_n);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCostCenter = (SDataCostCenter) registry;

        moPanelPkCostCenterId.getFieldAccount().setFieldValue(moCostCenter.getPkCostCenterIdXXX());
        moFieldCostCenter.setFieldValue(moCostCenter.getCostCenter());
        moFieldDateStart.setFieldValue(moCostCenter.getDateStart());
        moFieldDateEnd_n.setFieldValue(moCostCenter.getDateEnd_n());
        moFieldIsActive.setFieldValue(moCostCenter.getIsActive());
        moFieldIsDeleted.setFieldValue(moCostCenter.getIsDeleted());

        moPanelPkCostCenterId.enableFields(false);
        moPanelPkCostCenterId.refreshPanel();
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCostCenter == null) {
            moCostCenter = new SDataCostCenter();
            moCostCenter.setPkCostCenterIdXXX(moPanelPkCostCenterId.getFieldAccount().getString());
            moCostCenter.setDeep(0);    // for all non principal cost centers deep is 0
            moCostCenter.setLevel(moPanelPkCostCenterId.getFieldAccount().getUsedLevelsCount());
            moCostCenter.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCostCenter.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCostCenter.setCode(SAccountUtils.convertCodeStd(moPanelPkCostCenterId.getFieldAccount().getString()));
        moCostCenter.setCostCenter(moFieldCostCenter.getString());
        moCostCenter.setDateStart(moFieldDateStart.getDate());
        moCostCenter.setDateEnd_n(moFieldDateEnd_n.getDate());
        moCostCenter.setIsActive(moFieldIsActive.getBoolean());
        moCostCenter.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moCostCenter;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDateStart) {
                actionDateStart();
            }
            else if (button == jbDateEnd_n) {
                actionDateEnd_n();
            }
        }
    }
}
