/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepTrialBalance.java
 *
 * Created on 29/06/2010, 05:02:26 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sergio Flores
 */
public class SDialogRepTrialBalance extends javax.swing.JDialog implements java.awt.event.FocusListener {

    private boolean mbFirstTime;
    private boolean mbIsItemType;
    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.mfin.form.SPanelAccount moPanelAccountStartId;
    private erp.mfin.form.SPanelAccount moPanelAccountEndId;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private java.lang.String msAccountStartId;
    private java.lang.String msAccountEndId;

    /** Creates new form SDialogRepTrialBalance */
    public SDialogRepTrialBalance(erp.client.SClientInterface client, boolean isItemType) {
        super(client.getFrame(), true);
        miClient = client;
        mbIsItemType = isItemType;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jpAccountBegin = new javax.swing.JPanel();
        jlAccountBegin = new javax.swing.JLabel();
        jpAccountEnd = new javax.swing.JPanel();
        jlAccountEnd = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlLevelAccount = new javax.swing.JLabel();
        jsLevelAccount = new javax.swing.JSpinner();
        jPanel10 = new javax.swing.JPanel();
        jlLevelCostCenter = new javax.swing.JLabel();
        jsLevelCostCenter = new javax.swing.JSpinner();
        jPanel11 = new javax.swing.JPanel();
        jckShowSysAccounts = new javax.swing.JCheckBox();
        jckShowEmptyAccounts = new javax.swing.JCheckBox();
        jckShowDetail = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jckShowRecordAdjYearEnd = new javax.swing.JCheckBox();
        jckShowRecordAdjAudit = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Balanza de comprobación");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateStartActionPerformed(evt);
            }
        });
        jPanel3.add(jbDateStart);

        jPanel6.add(jPanel3);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateEndActionPerformed(evt);
            }
        });
        jPanel8.add(jbDateEnd);

        jPanel6.add(jPanel8);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(2, 1));

        jpAccountBegin.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable inicial:"));
        jpAccountBegin.setLayout(new java.awt.BorderLayout());

        jlAccountBegin.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlAccountBegin.setText("[Panel cuenta contable]");
        jlAccountBegin.setPreferredSize(new java.awt.Dimension(100, 50));
        jpAccountBegin.add(jlAccountBegin, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jpAccountBegin);

        jpAccountEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable final:"));
        jpAccountEnd.setLayout(new java.awt.BorderLayout());

        jlAccountEnd.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlAccountEnd.setText("[Panel cuenta contable]");
        jlAccountEnd.setPreferredSize(new java.awt.Dimension(100, 50));
        jpAccountEnd.add(jlAccountEnd, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jpAccountEnd);

        jPanel5.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlLevelAccount.setText("Profundidad ctas. contables:");
        jlLevelAccount.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlLevelAccount);

        jsLevelAccount.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jsLevelAccount);

        jPanel9.add(jPanel7);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlLevelCostCenter.setText("Profundidad centros costo:");
        jlLevelCostCenter.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlLevelCostCenter);

        jsLevelCostCenter.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jsLevelCostCenter);

        jPanel9.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowSysAccounts.setText("Mostrar subcuentas de sistema");
        jckShowSysAccounts.setMaximumSize(new java.awt.Dimension(150, 23));
        jckShowSysAccounts.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(jckShowSysAccounts);

        jckShowEmptyAccounts.setText("Mostrar ctas. contables sin movimientos");
        jckShowEmptyAccounts.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel11.add(jckShowEmptyAccounts);

        jckShowDetail.setText("Mostrar detalle");
        jckShowDetail.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jckShowDetail);

        jPanel9.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowRecordAdjYearEnd.setText("Incluir ajustes de cierre");
        jckShowRecordAdjYearEnd.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(jckShowRecordAdjYearEnd);

        jckShowRecordAdjAudit.setText("Incluir ajustes de auditoría");
        jckShowRecordAdjAudit.setOpaque(false);
        jckShowRecordAdjAudit.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel12.add(jckShowRecordAdjAudit);

        jPanel9.add(jPanel12);

        jPanel5.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jbPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jbPrint);

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jbClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-672)/2, (screenSize.height-425)/2, 672, 425);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jbPrintActionPerformed

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void jbDateStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateStartActionPerformed
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }//GEN-LAST:event_jbDateStartActionPerformed

    private void jbDateEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateEndActionPerformed
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }//GEN-LAST:event_jbDateEndActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mbFirstTime = true;

        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        jckShowSysAccounts.setSelected(true);
        jckShowEmptyAccounts.setSelected(false);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);

        jsLevelAccount.setModel(new SpinnerNumberModel(1, 1, miClient.getSessionXXX().getParamsErp().getDeepAccounts(), 1));
        jsLevelCostCenter.setModel(new SpinnerNumberModel(1, 1, miClient.getSessionXXX().getParamsErp().getDeepCostCenters(), 1));

        try {
            moPanelAccountStartId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, false, false);
            moPanelAccountEndId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, false, false);

            jpAccountBegin.remove(jlAccountBegin);
            jpAccountEnd.remove(jlAccountEnd);

            jpAccountBegin.add(moPanelAccountStartId, BorderLayout.CENTER);
            jpAccountEnd.add(moPanelAccountEndId, BorderLayout.CENTER);

            moPanelAccountStartId.resetPanel();
            moPanelAccountEndId.resetPanel();
            moPanelAccountStartId.getFieldAccount().getComponent().addFocusListener(this);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        if (mbIsItemType) {
            jckShowSysAccounts.setEnabled(false);
            jckShowEmptyAccounts.setEnabled(false);
            jckShowDetail.setEnabled(true);
            jlLevelCostCenter.setEnabled(true);
            jsLevelCostCenter.setEnabled(true);
            setTitle("Balanza de comprobación por tipo de ítem");
        }
        else {
            jsLevelAccount.setValue(miClient.getSessionXXX().getParamsErp().getDeepAccounts() > 1 ? 2 : 1);
            jsLevelCostCenter.setValue(miClient.getSessionXXX().getParamsErp().getDeepCostCenters() > 1 ? 2 : 1);
            jckShowSysAccounts.setEnabled(false);
            jckShowEmptyAccounts.setEnabled(false);
            jckShowDetail.setEnabled(false);
            jlLevelCostCenter.setEnabled(false);
            jsLevelCostCenter.setEnabled(false);
            jlLevelAccount.setEnabled(false);
            jsLevelAccount.setEnabled(false);
            setTitle("Balanza de comprobación con centros de costo e ítems");
        }

        setModalityType(ModalityType.MODELESS);
        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateStart.requestFocus();
            jckShowRecordAdjYearEnd.setSelected(true);
            jckShowRecordAdjAudit.setSelected(true);
        }
    }

    private void print() {
        int report = SLibConstants.UNDEFINED;
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        String sql = "";

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            msAccountStartId = moPanelAccountStartId.getFieldAccount().getString();
            msAccountEndId = moPanelAccountStartId.isEmptyAccountId() && moPanelAccountEndId.isEmptyAccountId() ?
                moPanelAccountEndId.getFieldAccount().getString().replace('0', '9') :
                moPanelAccountEndId.getFieldAccount().getString();

            map = miClient.createReportParams();

            if (mbIsItemType) {
                String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
                String costCenter = miClient.getSessionXXX().getParamsErp().getFormatCostCenterId().replace('9', '0');
                Vector<Integer> levelsAccount = SDataUtilities.getAccountLevels(account);
                Vector<Integer> levelsCostCenter = SDataUtilities.getAccountLevels(costCenter);
                String substrAccount = account.substring(0, levelsAccount.get((Integer) jsLevelAccount.getValue() - 1));
                String substrCostCenter = costCenter.substring(0, levelsCostCenter.get((Integer) jsLevelCostCenter.getValue() - 1));

                report = SDataConstantsSys.REP_FIN_TRIAL_BAL_ITEM;

                map.put("nYear", SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]);
                map.put("tDateStart", moFieldDateStart.getDate());
                map.put("tDateEnd", moFieldDateEnd.getDate());
                map.put("sAccountStart", msAccountStartId);
                map.put("sAccountEnd", msAccountEndId);
                map.put("nLenAccount", substrAccount.length());
                map.put("nLenCostCenter", substrCostCenter.length());
                map.put("sCompAccount", account.substring(substrAccount.length()));
                map.put("sCompCostCenter", costCenter.substring(substrCostCenter.length()));
                map.put("bDetail", jckShowDetail.isSelected());
                map.put("bIsItemOrderByKey", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? true : false);
            }
            else  {
                report = SDataConstantsSys.REP_FIN_TRIAL_BAL_CC_ITEM;

                sql = createParamSql();

                map.put("sTitle", "BALANZA DE COMPROBACIÓN ANALÍTICA CON CENTROS DE COSTO E ÍTEMS");
                map.put("tDateStart", moFieldDateStart.getDate());
                map.put("tDateEnd", moFieldDateEnd.getDate());
                map.put("nLevel", (Integer) jsLevelAccount.getValue());
                map.put("nDeep", miClient.getSessionXXX().getParamsErp().getDeepAccounts());
                map.put("sSqlCostCenterRange", createParamSqlCostCenter());
                map.put("sRank", "RANGO CUENTAS CONTABLES: DE ");
                map.put("sRankIdMin", msAccountStartId);
                map.put("sRankIdMax", msAccountEndId);
                map.put("sSqlGroupBy", "GROUP BY " + createParamSqlCostCenter() + ", re.fid_item_n ");
                map.put("sSqlOrderBy", "ORDER BY fid_cc_n, i.item_key, i.item, re.fid_item_n; ");
                map.put("bIsItemOrderByKey", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? true : false);
                map.put("sSql", sql);
            }

            map.put("sSqlWhere", (!jckShowRecordAdjYearEnd.isSelected() ? " AND b_adj_year = 0 " : "") +
                    (!jckShowRecordAdjAudit.isSelected() ? " AND b_adj_audit = 0 " : ""));

            jasperPrint = SDataUtilities.fillReport(miClient, report, map);
            jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle(getTitle());
            jasperViewer.setVisible(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
    }

    private java.lang.String createParamSql() {
        int len = 0;
        int year = SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0];
        String sql = "";
        String sSqlWhere = "";
        String txtDateStart = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateStart.getDate());
        String txtDateEnd = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate());
        String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(account);

        sSqlWhere = (!jckShowRecordAdjYearEnd.isSelected() ? " AND r.b_adj_year = 0 " : "") +
                    (!jckShowRecordAdjAudit.isSelected() ? " AND r.b_adj_audit = 0 " : "");

        for (int i = 1; i <= (Integer) jsLevelAccount.getValue(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : account.length();

            /*
             * 'a' stands for account
             * 'am' stands for major account
             */

            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT " + ((Integer) jsLevelAccount.getValue() == 1 ?
                    "LEFT(re.fid_acc, " + len + ")" : "CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')") + " AS f_id_acc, " +
                    "re.fid_acc, am.deep, am.fid_tp_acc_sys, " + i + " AS f_lev, " +
                    "(SELECT a.acc FROM fin_acc AS a WHERE a.id_acc = CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')) AS f_acc, COUNT(*) AS f_count, " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.id_year = " + year + " AND r.dt <= '" + txtDateEnd + "' AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    "INNER JOIN fin_acc AS a ON " +
                    "a.id_acc = re.fid_acc AND re.fid_acc >= '" + msAccountStartId + "' AND re.fid_acc <= '" + msAccountEndId + "' " +
                    "INNER JOIN fin_acc AS am ON " +
                    "am.id_acc = CONCAT(LEFT(re.fid_acc, " + (levels.get(1) - 1) + "), '" + account.substring(levels.get(1) - 1) + "') " +
                    "GROUP BY " + ((Integer) jsLevelAccount.getValue() == 1 ? "LEFT(re.fid_acc, " + len + ") " : "CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "') ") +
                    "HAVING NOT (f_ob = 0 AND f_dbt = 0 AND f_cdt = 0) ";
        }

        sql += "ORDER BY f_id_acc, f_lev ";

        return sql;
    }

    private java.lang.String createParamSqlCostCenter() {
        int len = 0;
        String sSqlCostCenterRange = "";
        String costCenter = miClient.getSessionXXX().getParamsErp().getFormatCostCenterId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(costCenter);

        for (int i = 1; i <= (Integer) jsLevelCostCenter.getValue(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : costCenter.length();

            sSqlCostCenterRange = ((Integer) jsLevelCostCenter.getValue() == 1 ? "LEFT(re.fid_cc_n, " + len + ")" : "CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')");
        }

        return sSqlCostCenterRange;
    }

    private void actionAccountIdFocusGained() {
    }

    private void actionAccountIdFocusLost() {
        if (!moPanelAccountStartId.isEmptyAccountId() && moPanelAccountEndId.isEmptyAccountId()) {
            moPanelAccountEndId.getFieldAccount().setFieldValue(moPanelAccountStartId.getFieldAccount().getFieldValue());
        }
    }

    public void actionPrint() {
        boolean error = false;
        String msg = "";
        JComponent component = null;

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            if (moFieldDateStart.getDate().after(moFieldDateEnd.getDate())) {
                msg = "La fecha del campo '" + jlDateStart.getText() + "' no puede ser posterior a la del campo '" + jlDateEnd.getText() + "'.";
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0]) {
                msg = "La fecha del campo '" + jlDateStart.getText() + "' y la del campo '" + jlDateEnd.getText() + "' deben pertenecer al mismo ejercicio.";
            }
            else if (moPanelAccountStartId.getFieldAccount().getString().compareTo(moPanelAccountEndId.getFieldAccount().getString()) > 0) {
                msg = "El valor para el campo '" + ((TitledBorder) jpAccountBegin.getBorder()).getTitle() + "' " +
                        "no puede ser mayor al del campo '" + ((TitledBorder) jpAccountEnd.getBorder()).getTitle() + "'.";
            }

            if (msg.length() > 0) {
                miClient.showMsgBoxWarning(msg);
            }
            else {
                print();
            }
        }
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbPrint;
    private javax.swing.JCheckBox jckShowDetail;
    private javax.swing.JCheckBox jckShowEmptyAccounts;
    private javax.swing.JCheckBox jckShowRecordAdjAudit;
    private javax.swing.JCheckBox jckShowRecordAdjYearEnd;
    private javax.swing.JCheckBox jckShowSysAccounts;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlAccountBegin;
    private javax.swing.JLabel jlAccountEnd;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlLevelAccount;
    private javax.swing.JLabel jlLevelCostCenter;
    private javax.swing.JPanel jpAccountBegin;
    private javax.swing.JPanel jpAccountEnd;
    private javax.swing.JSpinner jsLevelAccount;
    private javax.swing.JSpinner jsLevelCostCenter;
    // End of variables declaration//GEN-END:variables

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelAccountStartId.getFieldAccount().getComponent()) {
                actionAccountIdFocusGained();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelAccountStartId.getFieldAccount().getComponent()) {
                actionAccountIdFocusLost();
            }
        }
    }
}
