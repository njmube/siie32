       /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataAccountCash;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;

/**
 *
 * @author  Sergio Flores
 */
public class SFormAccountCashCash extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataAccountCash moAccountCash;
    private erp.lib.form.SFormField moFieldPkCompanyBranchId;
    private erp.lib.form.SFormField moFieldAuxEntity;
    private erp.lib.form.SFormField moFieldAuxCode;
    private erp.lib.form.SFormField moFieldFkAccountCashTypeId;
    private erp.lib.form.SFormField moFieldFkCurrencyId;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldIsEntityActive;

    private erp.mfin.form.SPanelAccount moPanelFkAccountId;

    /** Creates new form SFormAccountCashCash */
    public SFormAccountCashCash(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FINX_ACC_CASH_CASH;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlPkCompanyBranchId = new javax.swing.JLabel();
        jcbPkCompanyBranchId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkCompanyBranchId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlAuxCode = new javax.swing.JLabel();
        jtfAuxCode = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlAuxEntity = new javax.swing.JLabel();
        jtfAuxEntity = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlFkAccountCashTypeId = new javax.swing.JLabel();
        jcbFkAccountCashTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel8 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jcbFkCurrencyId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkCurrencyId = new javax.swing.JButton();
        jpAccount = new javax.swing.JPanel();
        jlDummyAccount = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jckIsEntityActive = new javax.swing.JCheckBox();
        jlDummy = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Caja"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel13.setLayout(new java.awt.GridLayout(6, 1, 5, 1));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkCompanyBranchId.setForeground(java.awt.Color.blue);
        jlPkCompanyBranchId.setText("Sucursal de la empresa: *");
        jlPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlPkCompanyBranchId);

        jcbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(jcbPkCompanyBranchId);

        jbPkCompanyBranchId.setText("...");
        jbPkCompanyBranchId.setToolTipText("Seleccionar sucursal de la empresa");
        jbPkCompanyBranchId.setFocusable(false);
        jbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbPkCompanyBranchId);

        jPanel13.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAuxCode.setText("Clave de caja: *");
        jlAuxCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlAuxCode);

        jtfAuxCode.setText("CODE");
        jtfAuxCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jtfAuxCode);

        jPanel13.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAuxEntity.setText("Nombre de caja: *");
        jlAuxEntity.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlAuxEntity);

        jtfAuxEntity.setText("CASH ACCOUNT");
        jtfAuxEntity.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel5.add(jtfAuxEntity);

        jPanel13.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkAccountCashTypeId.setText("Tipo de caja: *");
        jlFkAccountCashTypeId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlFkAccountCashTypeId);

        jcbFkAccountCashTypeId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel6.add(jcbFkAccountCashTypeId);

        jPanel13.add(jPanel6);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkCurrencyId.setText("Moneda de caja: *"); // NOI18N
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlFkCurrencyId);

        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(jcbFkCurrencyId);

        jbFkCurrencyId.setText("...");
        jbFkCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkCurrencyId.setFocusable(false);
        jbFkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbFkCurrencyId);

        jPanel13.add(jPanel8);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpAccount.setLayout(new java.awt.BorderLayout());

        jlDummyAccount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDummyAccount.setText("[Panel cuenta contable]");
        jlDummyAccount.setPreferredSize(new java.awt.Dimension(100, 50));
        jpAccount.add(jlDummyAccount, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpAccount, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jckIsDeleted.setText("Registro eliminado");
        jPanel1.add(jckIsDeleted);

        jckIsEntityActive.setText("Est√° activo");
        jPanel1.add(jckIsEntityActive);

        jlDummy.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel1.add(jlDummy);

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(600, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        try {
            moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpAccount.remove(jlDummyAccount);
        jpAccount.add(moPanelFkAccountId, BorderLayout.NORTH);

        moFieldPkCompanyBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCompanyBranchId, jlPkCompanyBranchId);
        moFieldPkCompanyBranchId.setPickerButton(jbPkCompanyBranchId);
        moFieldAuxEntity = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfAuxEntity, jlAuxEntity);
        moFieldAuxEntity.setLengthMax(50);
        moFieldAuxCode = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfAuxCode, jlAuxCode);
        moFieldAuxCode.setLengthMax(10);
        moFieldFkAccountCashTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountCashTypeId, jlFkAccountCashTypeId);
        moFieldFkCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldFkCurrencyId.setPickerButton(jbFkCurrencyId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);
        moFieldIsEntityActive = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsEntityActive);
        
        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldPkCompanyBranchId);
        mvFields.add(moFieldAuxEntity);
        mvFields.add(moFieldAuxCode);
        mvFields.add(moFieldFkAccountCashTypeId);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldIsEntityActive);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkCompanyBranchId.addActionListener(this);
        jbFkCurrencyId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkCompanyBranchId.isEnabled()) {
                jcbPkCompanyBranchId.requestFocus();
            }
            else {
                jtfAuxCode.requestFocus();
            }
        }
    }

    private void actionPkCompanyBranchId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldPkCompanyBranchId, miClient.getSessionXXX().getCompany().getPrimaryKey());
    }

    private void actionFkCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkCurrencyId, null);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkCurrencyId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkCompanyBranchId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountCashTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCurrencyId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCompanyBranchId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsEntityActive;
    private javax.swing.JLabel jlAuxCode;
    private javax.swing.JLabel jlAuxEntity;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummyAccount;
    private javax.swing.JLabel jlFkAccountCashTypeId;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlPkCompanyBranchId;
    private javax.swing.JPanel jpAccount;
    private javax.swing.JTextField jtfAuxCode;
    private javax.swing.JTextField jtfAuxEntity;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moAccountCash = null;

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        // Set default values:

        moFieldPkCompanyBranchId.setFieldValue(new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
        moFieldFkCurrencyId.setFieldValue(new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() });

        jcbPkCompanyBranchId.setEnabled(true);
        jbPkCompanyBranchId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
        jckIsEntityActive.setEnabled(false);
        jckIsEntityActive.setSelected(true);

        moPanelFkAccountId.resetPanel();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbPkCompanyBranchId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
        SFormUtilities.populateComboBox(miClient, jcbFkAccountCashTypeId, SDataConstants.FINS_TP_ACC_CASH, new int[] { SDataConstantsSys.FINS_CT_ACC_CASH_CASH });
        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String message = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            message = SDataUtilities.validateAccount(miClient, moPanelFkAccountId.getCurrentInputAccount(), null);

            if (message.length() > 0) {
                validation.setMessage(message);
                validation.setComponent(moPanelFkAccountId.getFieldAccount().getComponent());
            }
            else if (moPanelFkAccountId.getCurrentInputAccount().getFkAccountSystemTypeId() != SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH) {
                validation.setMessage("El tipo de cuenta de sistema de la cuenta contable deber ser:\n" +
                        "'" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH }) + "'.");
                validation.setComponent(moPanelFkAccountId.getFieldAccount().getComponent());
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moAccountCash = (SDataAccountCash) registry;

        moFieldPkCompanyBranchId.setFieldValue(new int[] { moAccountCash.getPkCompanyBranchId() });
        moPanelFkAccountId.getFieldAccount().setFieldValue(moAccountCash.getFkAccountId());
        moFieldFkAccountCashTypeId.setFieldValue(new int[] { SDataConstantsSys.FINS_CT_ACC_CASH_CASH, moAccountCash.getFkAccountCashTypeId() });
        moFieldFkCurrencyId.setFieldValue(new int[] { moAccountCash.getFkCurrencyId() });
        moFieldIsDeleted.setFieldValue(moAccountCash.getIsDeleted());

        moFieldAuxCode.setFieldValue(moAccountCash.getAuxCode());
        moFieldAuxEntity.setFieldValue(moAccountCash.getAuxEntity());
        jckIsEntityActive.setSelected(moAccountCash.getAuxIsEntityActive());

        jcbPkCompanyBranchId.setEnabled(false);
        jbPkCompanyBranchId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
        jckIsEntityActive.setEnabled(true);

        moPanelFkAccountId.refreshPanel();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moAccountCash == null) {
            moAccountCash = new SDataAccountCash();
            moAccountCash.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moAccountCash.setAuxFkCompanyId(miClient.getSessionXXX().getCompany().getPkCompanyId());
        }
        else {
            moAccountCash.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moAccountCash.setPkCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);
        moAccountCash.setFkBizPartnerBranchId_n(0);
        moAccountCash.setFkBankAccountId_n(0);
        moAccountCash.setFkAccountId(moPanelFkAccountId.getFieldAccount().getString());
        moAccountCash.setFkAccountCashCategoryId(moFieldFkAccountCashTypeId.getKeyAsIntArray()[0]);
        moAccountCash.setFkAccountCashTypeId(moFieldFkAccountCashTypeId.getKeyAsIntArray()[1]);
        moAccountCash.setIsCheckWalletApplying(false);
        moAccountCash.setFkCurrencyId(moFieldFkCurrencyId.getKeyAsIntArray()[0]);
        moAccountCash.setIsDeleted(moFieldIsDeleted.getBoolean());

        moAccountCash.setAuxCode(moFieldAuxCode.getString());
        moAccountCash.setAuxEntity(moFieldAuxEntity.getString());
        moAccountCash.setAuxIsEntityActive(moFieldIsEntityActive.getBoolean());
        
        return moAccountCash;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkCompanyBranchId) {
                actionPkCompanyBranchId();
            }
            else if (button == jbFkCurrencyId) {
                actionFkCurrencyId();
            }
        }
    }
}
