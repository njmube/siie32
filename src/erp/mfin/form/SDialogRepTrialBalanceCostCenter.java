/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepTrialBalanceCostCenter.java
 *
 * Created on 8/10/2010, 09:38:43 AM
 */

package erp.mfin.form;

import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.awt.event.FocusEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Alfonso Flores
 */
public class SDialogRepTrialBalanceCostCenter extends javax.swing.JDialog implements java.awt.event.FocusListener {

    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.mfin.form.SPanelAccount moPanelCostCenterBeginId;
    private erp.mfin.form.SPanelAccount moPanelCostCenterEndId;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private java.lang.String msCostCenterBeginId;
    private java.lang.String msCostCenterEndId;

    /** Creates new form SDialogRepTrialBalanceCostCenter */
    public SDialogRepTrialBalanceCostCenter(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlLevel = new javax.swing.JLabel();
        jsLevel = new javax.swing.JSpinner();
        jckShowEmptyCostCenter = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jpCostCenterBegin = new javax.swing.JPanel();
        jlCostCenterBegin = new javax.swing.JLabel();
        jpCostCenterEnd = new javax.swing.JPanel();
        jlCostCenterEnd = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Balanza de comprobración de centros de costo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(592, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jbPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jbPrint);

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jbClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(576, 78));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha inicial");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateStartActionPerformed(evt);
            }
        });
        jPanel4.add(jbDateStart);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateEndActionPerformed(evt);
            }
        });
        jPanel5.add(jbDateEnd);

        jPanel3.add(jPanel5);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros del reporte:"));
        jPanel7.setPreferredSize(new java.awt.Dimension(576, 78));
        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlLevel.setText("Nivel de profundidad:");
        jlLevel.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlLevel);

        jsLevel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jsLevel);

        jPanel7.add(jPanel8);

        jckShowEmptyCostCenter.setText("Mostrar centros de costos-beneficio sin movimientos");
        jPanel7.add(jckShowEmptyCostCenter);

        jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jpCostCenterBegin.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo inicial:"));
        jpCostCenterBegin.setPreferredSize(new java.awt.Dimension(576, 80));
        jpCostCenterBegin.setLayout(new java.awt.BorderLayout());

        jlCostCenterBegin.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlCostCenterBegin.setText("[Panel cost center]");
        jpCostCenterBegin.add(jlCostCenterBegin, java.awt.BorderLayout.CENTER);

        jPanel9.add(jpCostCenterBegin, java.awt.BorderLayout.NORTH);

        jpCostCenterEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo final:"));
        jpCostCenterEnd.setLayout(new java.awt.BorderLayout());

        jlCostCenterEnd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlCostCenterEnd.setText("[Panel cost center]");
        jpCostCenterEnd.add(jlCostCenterEnd, java.awt.BorderLayout.CENTER);

        jPanel9.add(jpCostCenterEnd, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-415)/2, 600, 415);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jbPrintActionPerformed

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void jbDateStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateStartActionPerformed
        actionDateStart();
    }//GEN-LAST:event_jbDateStartActionPerformed

    private void jbDateEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateEndActionPerformed
        actionDateEnd();
    }//GEN-LAST:event_jbDateEndActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mbFirstTime = true;

        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        jckShowEmptyCostCenter.setSelected(false);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);

        jsLevel.setModel(new SpinnerNumberModel(1, 1, miClient.getSessionXXX().getParamsErp().getDeepCostCenters(), 1));

        try {
            moPanelCostCenterBeginId = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            moPanelCostCenterEndId = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);

            jpCostCenterBegin.remove(jlCostCenterBegin);
            jpCostCenterEnd.remove(jlCostCenterEnd);

            jpCostCenterBegin.add(moPanelCostCenterBeginId, BorderLayout.CENTER);
            jpCostCenterEnd.add(moPanelCostCenterEndId, BorderLayout.CENTER);

            moPanelCostCenterBeginId.resetPanel();
            moPanelCostCenterEndId.resetPanel();
            moPanelCostCenterBeginId.getFieldAccount().getComponent().addFocusListener(this);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        setModalityType(ModalityType.MODELESS);
        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateStart.requestFocus();
        }
    }

    private void print() {
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        String sql = "";

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            msCostCenterBeginId = moPanelCostCenterBeginId.getFieldAccount().getString();
            msCostCenterEndId = moPanelCostCenterBeginId.isEmptyAccountId() && moPanelCostCenterEndId.isEmptyAccountId() ?
                moPanelCostCenterEndId.getFieldAccount().getString().replace('0', '9') :
                moPanelCostCenterEndId.getFieldAccount().getString();

            sql = createParamSql();

            map = miClient.createReportParams();
            map.put("nYear", SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]);
            map.put("tDateStart", moFieldDateStart.getDate());
            map.put("tDateEnd", moFieldDateEnd.getDate());
            map.put("nLevel", (Integer) jsLevel.getValue());
            map.put("nDeep", miClient.getSessionXXX().getParamsErp().getDeepCostCenters());
            map.put("bShowEmptyCostCenter", jckShowEmptyCostCenter.isSelected());
            map.put("sCostCenterIdMin", msCostCenterBeginId);
            map.put("sCostCenterIdMax", msCostCenterEndId);
            map.put("nSortingItemType", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId());
            map.put("sSql", sql);

            jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_FIN_TRIAL_BAL_CC, map);
            jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle(getTitle());
            jasperViewer.setVisible(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
    }

    private java.lang.String createParamSql() {
        int len = 0;
        int year = SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0];
        String sql = "";
        String txtDateStart = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateStart.getDate());
        String txtDateEnd = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate());
        String costCenter = miClient.getSessionXXX().getParamsErp().getFormatCostCenterId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(costCenter);

        for (int i = 1; i <= (Integer) jsLevel.getValue(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : costCenter.length();

            /*
             * 'c' stands for cost center
             * 'cm' stands for major cost center
             */
            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT " + ((Integer) jsLevel.getValue() == 1 ?
                        "LEFT(re.fid_cc_n, " + len + ")" : "CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')") + " AS f_id_cc, " +
                    "re.fid_cc_n, cm.deep, " + i + " AS f_lev, " +
                    "(SELECT cc.cc FROM fin_cc AS cc WHERE cc.id_cc = CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')) AS f_cc, " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.id_year = " + year + " AND r.dt <= '" + txtDateEnd + "' AND r.b_del = 0 AND re.b_del = 0 " +
                    "INNER JOIN fin_cc AS c ON " +
                    "c.id_cc = re.fid_cc_n AND re.fid_cc_n >= '" + msCostCenterBeginId + "' AND re.fid_cc_n <= '" + msCostCenterEndId + "' " +
                    "INNER JOIN fin_cc AS cm ON " +
                    "cm.id_cc = CONCAT(LEFT(re.fid_cc_n, " + (levels.get(1) - 1) + "), '" + costCenter.substring(levels.get(1) - 1) + "') " +
                    "GROUP BY " + ((Integer) jsLevel.getValue() == 1 ? "LEFT(re.fid_cc_n, " + len + ") " : "CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "') ") +
                    (jckShowEmptyCostCenter.isSelected() ? "" : "HAVING NOT (f_ob = 0 AND f_dbt = 0 AND f_cdt = 0) ");
        }

        sql += "ORDER BY f_id_cc ";

        return sql;
    }

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }

    private void actionCostCenterIdFocusGained() {
    }

    private void actionCostCenterIdFocusLost() {
        if (!moPanelCostCenterBeginId.isEmptyAccountId() && moPanelCostCenterEndId.isEmptyAccountId()) {
            moPanelCostCenterEndId.getFieldAccount().setFieldValue(moPanelCostCenterBeginId.getFieldAccount().getFieldValue());
        }
    }

    public void actionPrint() {
        boolean error = false;
        String msg = "";
        JComponent component = null;

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            if (moFieldDateStart.getDate().after(moFieldDateEnd.getDate())) {
                msg = "La fecha del campo '" + jlDateStart.getText() + "' no puede ser posterior a la del campo '" + jlDateEnd.getText() + "'.";
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0]) {
                msg = "La fecha del campo '" + jlDateStart.getText() + "' y la del campo '" + jlDateEnd.getText() + "' deben pertenecer al mismo ejercicio.";
            }
            else if (moPanelCostCenterBeginId.getFieldAccount().getString().compareTo(moPanelCostCenterEndId.getFieldAccount().getString()) > 0) {
                msg = "El valor para el campo '" + ((TitledBorder) jpCostCenterBegin.getBorder()).getTitle() + "' " +
                        "no puede ser mayor al del campo '" + ((TitledBorder) jpCostCenterEnd.getBorder()).getTitle() + "'.";
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]) {
                msg = "La fecha inicial y final deben pertenecer al mismo ejercicio.";
            }

            if (msg.length() > 0) {
                miClient.showMsgBoxWarning(msg);
            }
            else {
                print();
            }
        }
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbPrint;
    private javax.swing.JCheckBox jckShowEmptyCostCenter;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlCostCenterBegin;
    private javax.swing.JLabel jlCostCenterEnd;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlLevel;
    private javax.swing.JPanel jpCostCenterBegin;
    private javax.swing.JPanel jpCostCenterEnd;
    private javax.swing.JSpinner jsLevel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelCostCenterBeginId.getFieldAccount().getComponent()) {
                actionCostCenterIdFocusGained();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelCostCenterBeginId.getFieldAccount().getComponent()) {
                actionCostCenterIdFocusLost();
            }
        }
    }
}
