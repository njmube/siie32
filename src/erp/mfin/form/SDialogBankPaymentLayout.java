/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableCellEditorOptions;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableUtilities;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranchBankAccount;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataLayoutBank;
import erp.mfin.data.SDialogLayoutRow;
import erp.mod.fin.db.SFinConsts;
import erp.mod.fin.db.SFinRecordLayout;
import erp.mod.fin.db.SXmlBankLayout;
import erp.mod.fin.db.SXmlBankLayoutPaymentDoc;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibMethod;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiItem;
import sa.lib.xml.SXmlElement;

/**
 *
 * @author Juan Barajas
 */
public class SDialogBankPaymentLayout extends javax.swing.JDialog implements erp.lib.form.SFormExtendedInterface, java.awt.event.ActionListener, java.awt.event.ItemListener, CellEditorListener {

    private static final int COL_APP = 7;
    private static final int COL_BAL = 9;
    private static final int COL_ACC = 11;
    private static final int COL_EMAIL = 12;

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private int mnLayout;
    private int mnLayoutType;
    private int mnLayoutSubtype;
    private int mnLayoutBank;
    private int mnCurrencyId;
    private double mdBalanceTot;
    private double mdBalancePayed;
    private boolean mbHasPayment;
    private int mnNumberDocs;
    private String msLayoutText;
    private String msLayoutXml;
    private java.lang.String msAccountDebit;
    private java.lang.String msDebitFiscalId;
    private java.lang.String msAccountCredit;
    private ArrayList<SGuiItem> mvAccountCredit2;
    private Vector<String> mvAccountCredit;
    private Vector<String> mvAccountCreditAll;
    private List<Vector<String>> mltAccountCredit;
    private List<ArrayList<SGuiItem>> mltAccountCredit2;

    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneOptions;
    private erp.lib.table.STableCellEditorOptions moTableCellEditorOptions;
    private erp.mfin.data.SDialogLayoutRow moRow;
    private Vector<erp.mfin.data.SDialogLayoutRow> mvLayoutRows;
    
    private erp.lib.form.SFormField moFieldDateDue;
    private erp.lib.form.SFormField moFieldDateLayout;
    private erp.lib.form.SFormField moFieldLayoutId;
    private erp.lib.form.SFormField moFieldLayoutType;
    private erp.lib.form.SFormField moFieldAccountDebit;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldConsecutiveDay;

    private erp.mfin.data.SDataLayoutBank moLayoutBank;
    private erp.mbps.data.SDataBizPartner moDataBizPartner;
    private erp.mfin.data.SDataAccountCash moDataAccountCash;
    private erp.mbps.data.SDataBizPartnerBranchBankAccount moDataBizPartnerBranchBankAccount;
    
    protected ArrayList<SFinRecordLayout> maFinRecordLayout;

    public SDialogBankPaymentLayout(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;
        mnFormType = SDataConstants.FIN_LAY_BANK;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDateDue = new javax.swing.JLabel();
        jftDateDue = new javax.swing.JFormattedTextField();
        jbDateDue = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jlDate = new javax.swing.JLabel();
        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlPkLayouId = new javax.swing.JLabel();
        jcbPkLayoutId = new javax.swing.JComboBox();
        jlPkBankLayoutTypeId = new javax.swing.JLabel();
        jcbLayoutType = new javax.swing.JComboBox();
        jlAccountDebit = new javax.swing.JLabel();
        jcbAccountDebit = new javax.swing.JComboBox();
        jPanel10 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jlConsecutiveDay = new javax.swing.JLabel();
        jtfConsecutiveDay = new javax.swing.JTextField();
        jbShowDocs = new javax.swing.JButton();
        jbCleanDocs = new javax.swing.JButton();
        jpOptions = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbSelectAll = new javax.swing.JButton();
        jbCleanAll = new javax.swing.JButton();
        jlDummy = new javax.swing.JLabel();
        jckAccountAll = new javax.swing.JCheckBox();
        jckDateMaturityRo = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlBalanceTot = new javax.swing.JLabel();
        jtfBalanceTot = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Documentos a pagar");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Informaci√≥n adicional:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDue.setText("Vencimiento:");
        jlDateDue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlDateDue);

        jftDateDue.setText("dd/mm/yyyy");
        jftDateDue.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jftDateDue);

        jbDateDue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateDue.setToolTipText("Seleccionar fecha");
        jbDateDue.setFocusable(false);
        jbDateDue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDateDue);

        jLabel1.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel7.add(jLabel1);

        jlDate.setText("Pago:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDate);

        jftDate.setText("dd/mm/yyyy");
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jftDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDate);

        jPanel6.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkLayouId.setText("Layout: *");
        jlPkLayouId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlPkLayouId);

        jcbPkLayoutId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkLayoutId.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbPkLayoutId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkLayoutIdItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbPkLayoutId);

        jlPkBankLayoutTypeId.setText("Tipo layout: *");
        jlPkBankLayoutTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlPkBankLayoutTypeId);

        jcbLayoutType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbLayoutType.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbLayoutType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbLayoutTypeItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbLayoutType);

        jlAccountDebit.setText("Cuenta cargo: *");
        jlAccountDebit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlAccountDebit);

        jcbAccountDebit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbAccountDebit.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbAccountDebit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbAccountDebitItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbAccountDebit);

        jPanel6.add(jPanel8);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConcept.setText("Concepto/descripci√≥n:");
        jlConcept.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(309, 23));
        jPanel10.add(jtfConcept);

        jlConsecutiveDay.setText("Consecutivo d√≠a: *");
        jlConsecutiveDay.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlConsecutiveDay);

        jtfConsecutiveDay.setText("CONSECUTIVE");
        jtfConsecutiveDay.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel10.add(jtfConsecutiveDay);

        jbShowDocs.setText("Mostar documentos");
        jbShowDocs.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbShowDocs.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jbShowDocs);

        jbCleanDocs.setText("Limpiar documentos");
        jbCleanDocs.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanDocs.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jbCleanDocs);

        jPanel6.add(jPanel10);

        getContentPane().add(jPanel6, java.awt.BorderLayout.NORTH);

        jpOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos con saldo:"));
        jpOptions.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(1, 1, 0, 1));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(222, 25));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jbSelectAll.setText("Todo");
        jbSelectAll.setToolTipText("Pagar");
        jbSelectAll.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel2.add(jbSelectAll);

        jbCleanAll.setText("Nada");
        jbCleanAll.setToolTipText("Pagar");
        jbCleanAll.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel2.add(jbCleanAll);

        jlDummy.setFocusable(false);
        jlDummy.setPreferredSize(new java.awt.Dimension(20, 23));
        jPanel2.add(jlDummy);

        jckAccountAll.setText("Solo cuentas bancarias del layout especificado");
        jPanel2.add(jckAccountAll);

        jckDateMaturityRo.setText("Solo documentos del vecimiento especificado");
        jPanel2.add(jckDateMaturityRo);

        jPanel5.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel1.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbRefresh);

        jPanel5.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel5);

        jpOptions.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 2));

        jlBalanceTot.setText("Total:");
        jlBalanceTot.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jlBalanceTot);

        jtfBalanceTot.setEditable(false);
        jtfBalanceTot.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBalanceTot.setText("0.00");
        jtfBalanceTot.setEnabled(false);
        jtfBalanceTot.setFocusable(false);
        jtfBalanceTot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfBalanceTot);

        jpOptions.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jpOptions, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(1092, 640));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkLayoutIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkLayoutIdItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedLayout();
        }
    }//GEN-LAST:event_jcbPkLayoutIdItemStateChanged

    private void jcbLayoutTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbLayoutTypeItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedBankLayoutTypeId();
        }
    }//GEN-LAST:event_jcbLayoutTypeItemStateChanged

    private void jcbAccountDebitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbAccountDebitItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedAccountDebit();
        }
    }//GEN-LAST:event_jcbAccountDebitItemStateChanged

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] tableColumns = null;
        mvFields = new Vector<SFormField>();

        moPaneOptions = new STablePane(miClient);
        jpOptions.add(moPaneOptions, BorderLayout.CENTER);
        
        moFieldDateDue = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateDue, jlDateDue);
        moFieldDateDue.setPickerButton(jbDateDue);
        moFieldDateLayout = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDate, jlDate);
        moFieldDateLayout.setPickerButton(jbDate);
        moFieldLayoutId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkLayoutId, jlPkLayouId);
        moFieldLayoutType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbLayoutType, jlPkBankLayoutTypeId);
        moFieldAccountDebit = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbAccountDebit, jlAccountDebit);
        //moFieldAccountDebit.setPickerButton(jbAccountDebit);
        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(30);
        moFieldConsecutiveDay = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfConsecutiveDay, jlConsecutiveDay);
        moFieldConsecutiveDay.setLengthMax(3);

        tableColumns = new STableColumnForm[19];
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Proveedor", 300);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave proveedor", 75);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal proveedor", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc.", STableConstants.WIDTH_CODE_DOC);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc.", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc.", STableConstants.WIDTH_DATE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
        tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Aplicar pago", STableConstants.WIDTH_BOOLEAN);
        tableColumns[i++].setEditable(true);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo $", STableConstants.WIDTH_VALUE_2X);
        tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto pagar $", STableConstants.WIDTH_VALUE_2X);
        tableColumns[i++].setEditable(true);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta", 125);
        tableColumns[i++].setEditable(true);
        tableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "E-mail", 100);
        tableColumns[i++].setEditable(true);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Subtotal $", STableConstants.WIDTH_VALUE_2X);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Impuesto trasladado $", STableConstants.WIDTH_VALUE_2X);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Impuesto retenido $", STableConstants.WIDTH_VALUE_2X);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total doc. $", STableConstants.WIDTH_VALUE_2X);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha vencimiento", STableConstants.WIDTH_DATE);

        for (i = 0; i < tableColumns.length; i++) {
            moPaneOptions.addTableColumn(tableColumns[i]);
        }

        moTableCellEditorOptions = new STableCellEditorOptions(miClient);

        moPaneOptions.createTable();
        moPaneOptions.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(this);
        moPaneOptions.getTable().getDefaultEditor(Double.class).addCellEditorListener(this);
        moPaneOptions.getTable().getDefaultEditor(String.class).addCellEditorListener(this);
        moPaneOptions.getTable().getDefaultEditor(String.class).addCellEditorListener(this);
        moPaneOptions.getTable().getColumnModel().getColumn(COL_ACC).setCellEditor(moTableCellEditorOptions);
        moPaneOptions.getTable().getTableHeader().setReorderingAllowed(false);
        moPaneOptions.getTable().getTableHeader().setResizingAllowed(true);
        moPaneOptions.getTable().setRowSorter(new TableRowSorter<AbstractTableModel>(moPaneOptions.getTableModel()));
        moPaneOptions.getTable().getTableHeader().setEnabled(false);

        mvFields.add(moFieldDateDue);
        mvFields.add(moFieldLayoutId);
        mvFields.add(moFieldLayoutType);
        mvFields.add(moFieldAccountDebit);
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldConsecutiveDay);

        jbSelectAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
        jbShowDocs.addActionListener(this);
        jbCleanDocs.addActionListener(this);
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbSeek.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jtfSeek.addActionListener(this);
        jckDateMaturityRo.addItemListener(this);
        jckAccountAll.addItemListener(this);

        SFormUtilities.createActionMap(rootPane, this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }
    
    private void enableFields(boolean enable) {
        jftDateDue.setEnabled(enable);
        jcbPkLayoutId.setEnabled(enable);
        jcbLayoutType.setEnabled(enable);
        jbShowDocs.setEnabled(enable);
        jbCleanDocs.setEnabled(!enable);
    }

    private void renderBankLayoutSettings() {
        jtfConcept.setText("");

        if (moFieldLayoutType.getKeyAsIntArray()[0] > 0) {
            mnLayout = ((int[]) ((SFormComponentItem) jcbPkLayoutId.getSelectedItem()).getPrimaryKey())[0];
            
            mnLayoutSubtype = ((int[]) ((SFormComponentItem) jcbLayoutType.getSelectedItem()).getPrimaryKey())[0];
            mnLayoutType = ((int[]) ((SFormComponentItem) jcbLayoutType.getSelectedItem()).getForeignKey())[0];
            mnLayoutBank = ((int[]) ((SFormComponentItem) jcbLayoutType.getSelectedItem()).getForeignKey())[1];

            switch (mnLayoutType) {
                 case SDataConstantsSys.FINS_TP_PAY_BANK_THIRD:
                     jtfConcept.setEnabled(mnLayout == SFinConsts.LAY_BANK_SANTANDER);
                    break;
                case SDataConstantsSys.FINS_TP_PAY_BANK_TEF:
                     jtfConcept.setEnabled(mnLayout == SFinConsts.LAY_BANK_SANTANDER);
                    break;
                case SDataConstantsSys.FINS_TP_PAY_BANK_SPEI_FD_N:
                     jtfConcept.setEnabled(mnLayout == SFinConsts.LAY_BANK_HSBC || mnLayout == SFinConsts.LAY_BANK_SANTANDER);
                    break;
                case SDataConstantsSys.FINS_TP_PAY_BANK_SPEI_FD_Y:
                     jtfConcept.setEnabled(mnLayout == SFinConsts.LAY_BANK_SANTANDER);
                    break;
                default :
                    break;
            }
            jtfConsecutiveDay.setEnabled(mnLayout == SFinConsts.LAY_BANK_BANBAJIO);
        }
        else {
            jtfConcept.setEnabled(false);
            jtfConsecutiveDay.setEnabled(false);
        }
    }

    private void renderAccountSettings() {
        if (moFieldAccountDebit.getKeyAsIntArray()[0] > 0) {
            moDataAccountCash = (SDataAccountCash) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC_CASH, moFieldAccountDebit.getKey(), SLibConstants.EXEC_MODE_SILENT);

            moDataBizPartnerBranchBankAccount = (SDataBizPartnerBranchBankAccount) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BANK_ACC, new int[] { moDataAccountCash.getFkBizPartnerBranchId_n(), moDataAccountCash.getFkBankAccountId_n() }, SLibConstants.EXEC_MODE_SILENT);
            mnCurrencyId = moDataBizPartnerBranchBankAccount.getFkCurrencyId();
            msAccountDebit = moDataBizPartnerBranchBankAccount.getBankAccountNumber();
        }
        else {
            moDataBizPartnerBranchBankAccount = null;
             mnCurrencyId = 0;
        }
    }
    
    private void populateLayoutType() {
        if (moFieldLayoutId.getKeyAsIntArray()[0] > 0) {
            SFormUtilities.populateComboBox(miClient, jcbLayoutType, SDataConstants.FINU_TP_LAY_BANK, new int[] { moFieldLayoutId.getKeyAsIntArray()[0] });
            jcbLayoutType.setEnabled(true);
        }
        else {
            jcbLayoutType.setEnabled(false);
        }
    }
    
    private void populateLayoutBank() {
        Vector<SFormComponentItem> items = new Vector<SFormComponentItem>();

        items.add(new SFormComponentItem(new int[] { 0 }, "(" + SUtilConsts.TXT_SELECT + " layout)"));
        items.add(new SFormComponentItem(new int[] { 1 }, SFinConsts.TXT_LAY_BANK_HSBC));
        items.add(new SFormComponentItem(new int[] { 2 }, SFinConsts.TXT_LAY_BANK_SANTANDER));
        items.add(new SFormComponentItem(new int[] { 3 }, SFinConsts.TXT_LAY_BANK_BANBAJIO));
        
        jcbPkLayoutId.removeAllItems();
        for (int i = 0; i < items.size(); i++) {
            jcbPkLayoutId.addItem(items.get(i));
        }
    }

    private void itemStateChangedBankLayoutTypeId() {
        renderBankLayoutSettings();
    }

    private void itemStateChangedAccountDebit() {
        renderAccountSettings();
    }
    
    private void itemStateChangedLayout() {
        populateLayoutType();
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moPaneOptions.getTable().requestFocus();
        }
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateDue.getDate(), moFieldDateDue);
    }
    
    private void actionDatePayment() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateLayout.getDate(), moFieldDateLayout);
    }

    private void actionSelectAll() {
        moPaneOptions.repaint();

        for (int i = 0; i < moPaneOptions.getTableGuiRowCount(); i++) {
            moPaneOptions.getTable().setValueAt(true, i, COL_APP);
            renderBalancePayment();
        }
    }

    private void actionCleanAll() {
        moPaneOptions.repaint();

        for (int i = 0; i < moPaneOptions.getTableGuiRowCount(); i++) {
            moPaneOptions.getTable().setValueAt(false, i, COL_APP);
            renderBalancePayment();
        }
    }
    
    private void actionShowDocs() {
        SFormValidation validation = formValidate();
        
        if (!validation.getIsError()) {
            enableFields(false);
            showDps();
        }
        else {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
    }
    
    private void actionCleanDocs() {
        enableFields(true);
        mvLayoutRows.clear();
        mvAccountCredit.clear();
        mvAccountCredit2.clear();
        mvAccountCreditAll.clear();
        moPaneOptions.repaint();
        moPaneOptions.clearTableRows();
        
    }
    
    private void createLayoutXml() {
        SXmlBankLayout layoutXml = new SXmlBankLayout();
        SFinRecordLayout recordLayout = null;
        
        for (STableRow row : moPaneOptions.getTableModel().getTableRows()) {
            for (int i = 0; i < mvLayoutRows.size(); i++) {
                if (SLibUtilities.compareKeys(((SDialogLayoutRow) row).getPrimaryKey(), mvLayoutRows.get(i).getPrimaryKey()) && (mvLayoutRows.get(i).getIsForPayment() || mvLayoutRows.get(i).getIsToPayed())) {
                    SXmlBankLayoutPaymentDoc xmlLayoutDps = new SXmlBankLayoutPaymentDoc();

                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_DPS_YEAR).setValue(((SDialogLayoutRow) row).getPkYearId());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_DPS_DOC).setValue(((SDialogLayoutRow) row).getPkDocId());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_AMT).setValue(((SDialogLayoutRow) row).getBalanceTot());
                    /*
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_AMT_PAY).setValue(((SDialogLayoutRow) row).getBalancePayed());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_EMAIL).setValue(((SDialogLayoutRow) row).getEmail());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_APP_PAY).setValue(((SDialogLayoutRow) row).getIsToPayed());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_BPB).setValue(((SDialogLayoutRow) row).getBizPartnerBranch());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_BPB_BANK_ACC).setValue(((SDialogLayoutRow) row).getBizPartnerBranchAccountId());
                    */
                    mdBalancePayed += ((SDialogLayoutRow) row).getBalancePayed();
                    
                    if (!((SDialogLayoutRow) row).getFinRecordLayout().isEmpty()) {
                        recordLayout = ((SDialogLayoutRow) row).getFinRecordLayout().get(0);
                        if (!mvLayoutRows.get(i).getIsForPayment()) {
                            //recordLayout.setIsDeleted(true);
                            maFinRecordLayout.add(recordLayout);
                        }
                    }
                    else {
                        //recordLayout = new SFinRecordLayout(SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, "", SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED);
                    }
                    /*
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_REC_YEAR).setValue(recordLayout.getPkYearId());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_REC_PER).setValue(recordLayout.getPkPeriodId());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_REC_BKC).setValue(recordLayout.getPkBookkeepingCenterId());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_REC_TP_REC).setValue(recordLayout.getPkRecordTypeId());
                    xmlLayoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_REC_NUM).setValue(recordLayout.getPkNumberId());
                    */

                    if (mvLayoutRows.get(i).getIsForPayment()) {
                        layoutXml.getXmlElements().add(xmlLayoutDps);
                    }
                }
            }
        }
        msLayoutXml = layoutXml.getXmlString();
    }
    
    private void loadDocsXml() {
        //mbHasPaymnet = true;
        boolean found = false;
        SXmlBankLayout gridXml = new SXmlBankLayout();
        
        try {
            gridXml.processXml(moLayoutBank.getLayoutXml());
            
            for (SXmlElement element : gridXml.getXmlElements()) {
                if (element instanceof SXmlBankLayoutPaymentDoc) {
                    // Dps:

                    SXmlBankLayoutPaymentDoc layoutDps = (SXmlBankLayoutPaymentDoc) element;
                    for (int i = 0; i < mvLayoutRows.size(); i++) {
                        if (SLibUtilities.compareKeys(new int[] { (Integer) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_DPS_YEAR).getValue(), (Integer) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_DPS_DOC).getValue() }, mvLayoutRows.get(i).getPrimaryKey())) {
                             mvLayoutRows.get(i).setIsForPayment(true);
                             /*
                             mvLayoutRows.get(i).setIsToPayed((boolean) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_APP_PAY).getValue());
                             mvLayoutRows.get(i).setBizPartnerBranchId(((SGuiItem) row.getValues().get(COL_ACC)).getPrimaryKey()[0]);
                             mvLayoutRows.get(i).setBizPartnerBranchAccountId(((SGuiItem) row.getValues().get(COL_ACC)).getPrimaryKey()[1]);
                             */
                             mvLayoutRows.get(i).setBalanceTot((double) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_AMT).getValue());
                             /*
                             mvLayoutRows.get(i).setBalancePayed((double) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_AMT_PAY).getValue());
                             mvLayoutRows.get(i).setEmail((String) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_EMAIL).getValue());
                             
                             mdBalancePayed += (double) layoutDps.getAttribute(SXmlBankLayoutPaymentDoc.ATT_LAY_ROW_AMT_PAY).getValue();
                             */
                        }
                    }
                }
            }
            
            
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @SuppressWarnings("unchecked")
    private void renderBankAccountCredit(int nBizPartnerBranch, int nBankId) {
        String sql = "";
        ResultSet resultSet = null;
        Statement statementAux;
        msAccountCredit = "";
        HashSet<String> oAccountCredit;
        //HashSet<String> oAccountCreditAll;
        String accountCredit = "";
        int bpbId = 0;
        int bpbBankAccId = 0;

        try {
            sql = "SELECT b.id_bpb, b.id_bank_acc, b.acc_num, b.acc_num_std, b.fid_bank, b.b_def, COALESCE(lay.fid_tp_pay_bank, 0) AS f_tp_pay, " +
                    "COALESCE(lay.id_tp_lay_bank, 0) AS f_tp_lay, bp.code_bank_san, bp.code_bank_baj, b.alias_baj " +
                    "FROM erp.bpsu_bank_acc AS b " +
                    "LEFT OUTER JOIN erp.bpsu_bank_acc_lay_bank AS l ON b.id_bpb = l.id_bpb AND b.id_bank_acc = l.id_bank_acc " +
                    "LEFT OUTER JOIN erp.finu_tp_lay_bank AS lay ON l.id_tp_lay_bank = lay.id_tp_lay_bank " +
                    "LEFT OUTER JOIN erp.bpsu_bp AS bp ON bp.id_bp = b.fid_bank " +
                    "WHERE b.b_del = 0 AND b.id_bpb = " + nBizPartnerBranch +
                    (mnLayoutType == SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? " AND b.fid_bank = " + nBankId : " AND b.fid_bank <> " + nBankId) + " ";

            //oAccountCreditAll = new HashSet<String>();
            oAccountCredit = new HashSet<String>();
            mvAccountCreditAll = new Vector<String>();
            mvAccountCredit = new Vector<String>();
            mvAccountCredit2 = new ArrayList<SGuiItem>();

            statementAux = miClient.getSession().getStatement().getConnection().createStatement();

            resultSet = statementAux.executeQuery(sql);
            while (resultSet.next()) {
                bpbId = resultSet.getInt(1);
                bpbBankAccId = resultSet.getInt(2);
                
                if (resultSet.getBoolean(6) && resultSet.getInt(7) == mnLayoutType) {
                    msAccountCredit = (mnLayoutType != SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? resultSet.getString(4) : resultSet.getString(3));
                }
                else if (msAccountCredit.length() == 0 && resultSet.getInt(7) == mnLayoutType) {
                    msAccountCredit = (mnLayoutType != SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? resultSet.getString(4) : resultSet.getString(3));
                }
                accountCredit = mnLayoutType != SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? resultSet.getString(4) : resultSet.getString(3);

                if (resultSet.getInt(7) == mnLayoutType && resultSet.getInt(8) == mnLayoutSubtype) {
                    oAccountCredit.add(accountCredit);
                }
                //oAccountCreditAll.add(accountCredit);
                moRow.getCodeBankAccountCredit().put(mnLayoutType != SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? resultSet.getString(4) : resultSet.getString(3), mnLayout == SFinConsts.LAY_BANK_BANBAJIO ? resultSet.getString(10) : resultSet.getString(9));
                moRow.getAliasBankAccountCredit().put(mnLayoutType != SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? resultSet.getString(4) : resultSet.getString(3), resultSet.getString(11));
            }
            
            for (String s : oAccountCredit) {
                mvAccountCredit.add(s);
                mvAccountCredit2.add(new SGuiItem(new int[] { bpbId, bpbBankAccId }, s));
            }
            
            /*
            for (String s : oAccountCreditAll) {
                mvAccountCreditAll.add(s);
            }
            */
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void renderFiscalId() {
        moDataBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, miClient.getSessionXXX().getCurrentCompany().getPrimaryKey(), SLibConstants.EXEC_MODE_SILENT);

        msDebitFiscalId = moDataBizPartner.getFiscalId();
    }

    private void renderBalancePayment() {
        java.util.Vector values = null;
        mdBalanceTot = 0;
        moPaneOptions.repaint();

        jtfBalanceTot.setText(miClient.getSessionXXX().getFormatters().getDecimalsCurrencyFormat().format(mdBalanceTot));
        for (int i = 0; i < moPaneOptions.getTableGuiRowCount(); i++) {
            if (((Boolean) moPaneOptions.getTable().getValueAt(i, COL_APP))) {
                values = moPaneOptions.getTableRow(i).getValues();

                if (((Double)  moPaneOptions.getTable().getValueAt(i, COL_BAL)) == 0) {
                    moPaneOptions.getTable().setValueAt(((Number) values.get(COL_BAL - 1)).doubleValue(), i, COL_BAL);
                }
                mdBalanceTot += ((Number) values.get(COL_BAL)).doubleValue();
            }
            else {
                values = moPaneOptions.getTableRow(i).getValues();
                moPaneOptions.getTable().setValueAt(0d, i, COL_BAL);

                mdBalanceTot -= ((Number) values.get(COL_BAL)).doubleValue();
            }
            jtfBalanceTot.setText(miClient.getSessionXXX().getFormatters().getDecimalsCurrencyFormat().format(mdBalanceTot));
        }
    }

    private void processEditingAppPayment() {
        int index = -1;
        moPaneOptions.repaint();

        index = moPaneOptions.getTable().getSelectedRow();

        if (((Boolean) moPaneOptions.getTable().getValueAt(index, COL_APP))) {
            moPaneOptions.getTable().setValueAt(true, index, COL_APP);
        }
        else {
            moPaneOptions.getTable().setValueAt(false, index, COL_APP);
        }
        renderBalancePayment();
    }

    private void processEditingStoppedBalance() {
        int index = 0;
        mdBalanceTot = 0;
        moPaneOptions.repaint();

        for (STableRow row : moPaneOptions.getTableModel().getTableRows()) {
            mdBalanceTot += ((Double) row.getValues().get(COL_BAL));

            if (((Double) row.getValues().get(COL_BAL)) > 0) {
                moPaneOptions.getTable().setValueAt(true, index, COL_APP);
            }
            else {
                moPaneOptions.getTable().setValueAt(false, index, COL_APP);
            }
            index++;
        }
        jtfBalanceTot.setText(miClient.getSessionXXX().getFormatters().getDecimalsCurrencyFormat().format(mdBalanceTot));
    }

    private void updateLayoutRow() {
        for (STableRow row : moPaneOptions.getTableModel().getTableRows()) {
            for (int i = 0; i < mvLayoutRows.size(); i++) {
                if (SLibUtilities.compareKeys(((SDialogLayoutRow) row).getPrimaryKey(), mvLayoutRows.get(i).getPrimaryKey())) {
                     mvLayoutRows.get(i).setIsForPayment(((Boolean) row.getValues().get(COL_APP)));
                     mvLayoutRows.get(i).setAccountCredit(((String) row.getValues().get(COL_ACC)));
                     /*
                     mvLayoutRows.get(i).setBizPartnerBranchId(((SGuiItem) row.getValues().get(COL_ACC)).getPrimaryKey()[0]);
                     mvLayoutRows.get(i).setBizPartnerBranchAccountId(((SGuiItem) row.getValues().get(COL_ACC)).getPrimaryKey()[1]);
                     */
                     mvLayoutRows.get(i).setBalanceTot(((Double) row.getValues().get(COL_BAL)));
                     mvLayoutRows.get(i).setBankKey(SLibUtilities.parseInt((((String) row.getValues().get(COL_ACC)).length() > 0 ? ((String) row.getValues().get(COL_ACC)).substring(0, 3) : "000")));
                     mvLayoutRows.get(i).setEmail(((String) row.getValues().get(COL_EMAIL)));
                     mvLayoutRows.get(i).setSantanderBankCode(mvLayoutRows.get(i).getCodeBankAccountCredit().get((String) row.getValues().get(COL_ACC)));
                     mvLayoutRows.get(i).setBajioBankCode(mvLayoutRows.get(i).getCodeBankAccountCredit().get((String) row.getValues().get(COL_ACC)));
                     mvLayoutRows.get(i).setBajioBankAlias(mvLayoutRows.get(i).getAliasBankAccountCredit().get((String) row.getValues().get(COL_ACC)));
                }
            }
        }
    }

    private void loadLayoutRow() {
        updateLayoutRow();
        moPaneOptions.clearTableRows();
        
        if (mvLayoutRows != null) {
            mltAccountCredit.clear();
            mltAccountCredit2.clear();
            
            for (int i = 0; i < mvLayoutRows.size(); i++) {
                mvLayoutRows.get(i).prepareTableRow();

                if (!jckDateMaturityRo.isSelected()) {
                    if (!jckAccountAll.isSelected()) {
                        if (mvLayoutRows.get(i).getAccountCreditArrayAll().size() > 0) {
                            mltAccountCredit.add(mvLayoutRows.get(i).getAccountCreditArrayAll());
                            moPaneOptions.addTableRow(mvLayoutRows.get(i));
                        }
                    }
                    else {
                        if (mvLayoutRows.get(i).getAccountCreditArray().size() > 0) {
                            mltAccountCredit.add(mvLayoutRows.get(i).getAccountCreditArray());
                            mltAccountCredit2.add(mvLayoutRows.get(i).getAccountCreditArray2());
                            moPaneOptions.addTableRow(mvLayoutRows.get(i));
                        }
                    }
                }
                else if (moFieldDateDue.getDate().equals(mvLayoutRows.get(i).getDateMaturityRo())) {
                    if (!jckAccountAll.isSelected()) {
                        if (mvLayoutRows.get(i).getAccountCreditArrayAll().size() > 0) {
                            mltAccountCredit.add(mvLayoutRows.get(i).getAccountCreditArrayAll());
                            moPaneOptions.addTableRow(mvLayoutRows.get(i));
                        }
                    }
                    else {
                        if (mvLayoutRows.get(i).getAccountCreditArray().size() > 0) {
                            mltAccountCredit.add(mvLayoutRows.get(i).getAccountCreditArray());
                            mltAccountCredit2.add(mvLayoutRows.get(i).getAccountCreditArray2());
                            moPaneOptions.addTableRow(mvLayoutRows.get(i));
                        }
                    }
                }

            }
        }
        renderBalancePayment();
        //moTableCellEditorOptions.setAccounts(mltAccountCredit);
        moTableCellEditorOptions.setAccounts(mltAccountCredit2);
        moPaneOptions.renderTableRows();
        moPaneOptions.setTableRowSelection(0);
    }
    
    private void createLayoutText() throws Exception {
        boolean isError = false;
        boolean isFound = false;
        double total = 0;
        Vector<SDialogLayoutRow> vLayoutRows = new Vector<>();
        updateLayoutRow();

        for (STableRow row : moPaneOptions.getTableModel().getTableRows()) {
            for (int i = 0; i < mvLayoutRows.size(); i++) {
                if (SLibUtilities.compareKeys(((SDialogLayoutRow) row).getPrimaryKey(), mvLayoutRows.get(i).getPrimaryKey()) && mvLayoutRows.get(i).getIsForPayment()) {
                    if (mvLayoutRows.get(i).getAccountCredit().length() > 0) {
                        for (SDialogLayoutRow layoutRow : vLayoutRows) {
                            isFound = false;
                            
                            if (SLibUtilities.compareKeys(new int[] { layoutRow.getBizPartnerId(), }, new int[] { mvLayoutRows.get(i).getBizPartnerId() }) &&
                                   layoutRow.getAccountCredit().compareTo(mvLayoutRows.get(i).getAccountCredit()) == 0) {
                                total = layoutRow.getBalanceTot();
                                //layoutRow.setBalanceTot(total + mvLayoutRows.get(i).getBalanceTot());
                                isFound = true;
                            }
                            
                            if (isFound) {
                                break;
                            }
                        }
                        
                        if (!isFound) {
                            vLayoutRows.add(mvLayoutRows.get(i));
                        }
                    }
                    else {
                        isError = true;
                        throw new Exception("No ha especificado la cuenta de abono para uno o mas pagos.");
                    }
                    mnNumberDocs++;
                }
            }
            if (isError) {
                break;
            }
        }
        
        // Validate "alias" for payment with BanBajio Bank
        
        if (mnLayout == SFinConsts.LAY_BANK_BANBAJIO) {
            for (SDialogLayoutRow layoutRow : vLayoutRows) {
                if (layoutRow.getBajioBankAlias().isEmpty()) {
                    isError = true;
                    throw new Exception("No se ha especificado el 'alias ' de la cuenta de abono '" + layoutRow.getAccountCredit() + "' del proveedor '" + layoutRow.getBizPartner() + "'.");
                }
            }
        }

        if (!isError) {
            if (vLayoutRows.size() > 0) {
                switch (mnLayoutType) {
                     case SDataConstantsSys.FINS_TP_PAY_BANK_THIRD:
                         switch (mnLayout) {
                            case SFinConsts.LAY_BANK_HSBC:
                                //msLayoutText = SFinUtilities.createLayoutHsbcThird(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                           case SFinConsts.LAY_BANK_SANTANDER:
                                //msLayoutText = SFinUtilities.createLayoutSantanderThird(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                           case SFinConsts.LAY_BANK_BANBAJIO:
                                //msLayoutText = SFinUtilities.createLayoutBanBajioThird(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase(), moFieldDateLayout.getDate(), moFieldConsecutiveDay.getInteger());
                               break;
                            default :
                                break;
                            }
                        break;
                    case SDataConstantsSys.FINS_TP_PAY_BANK_TEF:
                         switch (mnLayout) {
                            case SFinConsts.LAY_BANK_HSBC:
                                //msLayoutText = SFinUtilities.createLayoutHsbcTef(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                           case SFinConsts.LAY_BANK_SANTANDER:
                                //msLayoutText = SFinUtilities.createLayoutSantanderTef(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                           case SFinConsts.LAY_BANK_BANBAJIO:
                                //msLayoutText = SFinUtilities.createLayoutBanBajioTef(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase(), moFieldDateLayout.getDate(), moFieldConsecutiveDay.getInteger());
                               break;
                            default :
                                break;
                            }
                        break;
                    case SDataConstantsSys.FINS_TP_PAY_BANK_SPEI_FD_N:
                         switch (mnLayout) {
                            case SFinConsts.LAY_BANK_HSBC:
                                //msLayoutText = SFinUtilities.createLayoutHsbcSpeiFdN(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                                break;
                           case SFinConsts.LAY_BANK_SANTANDER:
                                //msLayoutText = SFinUtilities.createLayoutSantanderSpeiFdN(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                           case SFinConsts.LAY_BANK_BANBAJIO:
                                //msLayoutText = SFinUtilities.createLayoutBanBajioSpeiFdN(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase(), moFieldDateLayout.getDate(), moFieldConsecutiveDay.getInteger());
                               break;
                            default :
                                break;
                            }
                        break;
                    case SDataConstantsSys.FINS_TP_PAY_BANK_SPEI_FD_Y:
                         switch (mnLayout) {
                            case SFinConsts.LAY_BANK_HSBC:
                                //msLayoutText = SFinUtilities.createLayoutHsbcSpeiFdY(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                           case SFinConsts.LAY_BANK_SANTANDER:
                                //msLayoutText = SFinUtilities.createLayoutSantanderSpeiFdY(miClient, vLayoutRows, moFieldLayoutType.getString().toLowerCase());
                               break;
                            default :
                                break;
                            }
                        break;
                    default :
                        break;
                }
            }
            else {
                throw new Exception("No ha especificado ning√∫n documento para pago.");
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCleanAll;
    private javax.swing.JButton jbCleanDocs;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbDateDue;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JButton jbSelectAll;
    private javax.swing.JButton jbShowDocs;
    private javax.swing.JComboBox jcbAccountDebit;
    private javax.swing.JComboBox jcbLayoutType;
    private javax.swing.JComboBox jcbPkLayoutId;
    private javax.swing.JCheckBox jckAccountAll;
    private javax.swing.JCheckBox jckDateMaturityRo;
    private javax.swing.JFormattedTextField jftDate;
    private javax.swing.JFormattedTextField jftDateDue;
    private javax.swing.JLabel jlAccountDebit;
    private javax.swing.JLabel jlBalanceTot;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlConsecutiveDay;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateDue;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlPkBankLayoutTypeId;
    private javax.swing.JLabel jlPkLayouId;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpOptions;
    private javax.swing.JTextField jtfBalanceTot;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfConsecutiveDay;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            //actionSeek(miClient, moPaneOptions, jtfSeek.getText().trim(), 4);
            STableUtilities.actionSeek(miClient, moPaneOptions, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneOptions, getTitle());
        }
    }

    public void actionRefresh() {
        loadLayoutRow();
    }

    public void actionDateMaturityRo() {
        loadLayoutRow();

        if (moPaneOptions.getTableGuiRowCount() > 0) {
            jtfSeek.setEnabled(true);
            jbSeek.setEnabled(true);
            jbExportCsv.setEnabled(true);
            jbSelectAll.setEnabled(true);
            jbCleanAll.setEnabled(true);
        }
        else {
            jtfSeek.setEnabled(false);
            jbSeek.setEnabled(false);
            jbExportCsv.setEnabled(false);
            jbSelectAll.setEnabled(false);
            jbCleanAll.setEnabled(false);
        }
    }

    public void actionAccountAll() {
        loadLayoutRow();

        if (moPaneOptions.getTableGuiRowCount() > 0) {
            jtfSeek.setEnabled(true);
            jbSeek.setEnabled(true);
            jbExportCsv.setEnabled(true);
            jbSelectAll.setEnabled(true);
            jbCleanAll.setEnabled(true);
        }
        else {
            jtfSeek.setEnabled(false);
            jbSeek.setEnabled(false);
            jbExportCsv.setEnabled(false);
            jbSelectAll.setEnabled(false);
            jbCleanAll.setEnabled(false);
        }
    }

    @SuppressWarnings("unchecked")
    public void showDps() {
        String sql = "";
        ResultSet resulSet = null;
        mvLayoutRows = new Vector<>();
        mltAccountCredit = new ArrayList<>();
        mltAccountCredit2 = new ArrayList<>();

        moPaneOptions.clearTableRows();

        try {
            sql = createSqlQuery();

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                moRow = new SDialogLayoutRow(miClient);

                moRow.setPkYearId(resulSet.getInt(4));
                moRow.setPkDocId(resulSet.getInt(5));
                moRow.setBizPartnerId(resulSet.getInt(1));
                moRow.setBizPartner(resulSet.getString(2));
                moRow.setBizPartnerKey(resulSet.getString(16));
                moRow.setBizPartnerCreditFiscalId(resulSet.getString(3));
                moRow.setBizPartnerBranch(resulSet.getString(18));
                moRow.setTypeDps(resulSet.getString(17));
                moRow.setNumberSer(resulSet.getString(7));
                moRow.setDate(resulSet.getDate(6));
                moRow.setBizPartnerBranchCob(resulSet.getString(19));
                moRow.setSubTotal(resulSet.getDouble(8));
                moRow.setTaxCharged(resulSet.getDouble(9));
                moRow.setTaxRetained(resulSet.getDouble(10));
                moRow.setTotal(resulSet.getDouble(11));
                moRow.setBalance(resulSet.getDouble(13));
                moRow.setBalanceTot(0);
                moRow.setCurrencyKey(resulSet.getString(20));
                moRow.setTotalVat(resulSet.getDouble(21));
                moRow.setDateMaturityRo(resulSet.getDate(22));
                moRow.setCurrencyId(mnCurrencyId);
                renderBankAccountCredit(resulSet.getInt(15), mnLayoutBank);
                renderFiscalId();
                moRow.setAccountCredit(msAccountCredit);
                moRow.setEmail(resulSet.getString(14));

                moRow.setCf(0);
                moRow.setApply(1);
                moRow.setAccountDebit(msAccountDebit);
                moRow.setBizPartnerDebitFiscalId(msDebitFiscalId);
                moRow.setIsForPayment(false);
                moRow.setIsToPayed(false);
                moRow.setReference(resulSet.getString(7));
                moRow.setAccType("CLA");
                moRow.setConcept(moFieldConcept.getString());
                moRow.setDescription(moFieldConcept.getString());
                moRow.setAccountCreditArray2(mvAccountCredit2);
                moRow.setAccountCreditArray(mvAccountCredit);
                moRow.setAccountCreditArrayAll(mvAccountCreditAll);

                moRow.prepareTableRow();

                if (moFieldDateDue.getDate().equals(resulSet.getDate(22)) && mvAccountCredit.size() > 0) {
                    moPaneOptions.addTableRow(moRow);
                    mltAccountCredit.add(mvAccountCredit);
                    mltAccountCredit2.add(mvAccountCredit2);
                }
                mvLayoutRows.add(moRow);
            }

            if (moPaneOptions.getTableGuiRowCount() > 0) {
                moPaneOptions.renderTableRows();
                moPaneOptions.setTableRowSelection(0);
                //moTableCellEditorOptions.setAccounts(mltAccountCredit);
                moTableCellEditorOptions.setAccounts(mltAccountCredit2);

                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);
                jbSelectAll.setEnabled(true);
                jbCleanAll.setEnabled(true);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private String createSqlQuery() {
        String sSql = "";
        String sCur = "";

        sCur = mnCurrencyId >= 2 ? "_cur" : "";

        sSql = "SELECT b.id_bp, b.bp, b.fiscal_id, 0 AS id_year, 0 AS id_doc, NULL AS dt, " + // 5
                 "'' AS f_num, 0 AS f_stot, 0 AS f_tax, 0 AS f_ret, 0 AS f_tot, c.id_cur AS f_id_cur, " + // 11
                 "SUM(re.credit" + sCur + " - re.debit" + sCur + ") AS f_bal, bcon.email_01, bpb.id_bpb, bct.bp_key, " +  // 15
                 "NULL AS f_dps_code, bpb.bpb, cob.code, c.cur_key, 0 AS f_iva, NULL AS dt_mat " +  // 21
                 "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                 "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                 "r.id_year = " + SLibTimeUtilities.digestYear(moFieldDateDue.getDate())[0] + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(SLibTimeUtilities.getEndOfYear(moFieldDateDue.getDate())) + "' AND r.b_del = 0 AND re.b_del = 0 AND " +
                 "re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] + " AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] + " AND " +
                 "re.fid_dps_year_n IS NULL AND re.fid_dps_doc_n IS NULL " +
                 "INNER JOIN erp.bpsu_bp AS b ON re.fid_bp_nr = b.id_bp " +
                 "INNER JOIN erp.bpsu_bp_ct AS bct ON re.fid_bp_nr = bct.id_bp AND bct.id_ct_bp = re.fid_tp_sys_mov_xxx " +
                 "INNER JOIN erp.bpsu_bpb AS bpb ON re.fid_bp_nr = bpb.fid_bp AND bpb.fid_tp_bpb = " + SDataConstantsSys.BPSS_TP_BPB_HQ + " " +
                 "INNER JOIN erp.cfgu_cur AS c ON re.fid_cur = c.id_cur AND c.id_cur = " + mnCurrencyId + " " +
                 "INNER JOIN erp.bpsu_bpb AS cob ON r.fid_cob = cob.id_bpb " +
                 "LEFT OUTER JOIN erp.bpsu_bpb_con AS bcon ON bpb.id_bpb = bcon.id_bpb AND bcon.id_con = 1 " +
                 "WHERE EXISTS(SELECT * FROM erp.bpsu_bank_acc AS ac WHERE bpb.id_bpb = ac.id_bpb " + (mnLayoutType == SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? "AND ac.fid_bank = " + mnLayoutBank : "AND ac.fid_bank <> " + mnLayoutBank) + ") " +
                 "GROUP BY b.bp, b.id_bp " +
                 "HAVING f_bal > 0 " + /*(mnTypePay != SDataConstantsSys.FINS_TP_PAY_BANK_SPEI_FD_N ? "AND f_tax > 0" : "") + " " +*/

                 "UNION " +

                 "SELECT b.id_bp, b.bp, b.fiscal_id, d.id_year, d.id_doc, d.dt AS dt, " +  // 5
                 "CONCAT(d.num_ser, IF(length(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +  // 6
                 "d.stot" + sCur + "_r AS f_stot, d.tax_charged" + sCur + "_r AS f_tax, " +  // 8
                 "d.tax_retained" + sCur + "_r AS f_ret, d.tot" + sCur + "_r AS f_tot, c.id_cur AS f_id_cur, " +  // 11
                 "SUM(re.credit" + sCur + " - re.debit" + sCur + ") AS f_bal, bcon.email_01, d.fid_bpb, bct.bp_key, " +  // 15
                 "dt.code, bpb.bpb, cob.code, c.cur_key, " + // 19
                 "COALESCE((SELECT SUM(tax.tax" + sCur + ") FROM trn_dps_ety AS de " +
                 "INNER JOIN trn_dps_ety_tax AS tax ON de.id_year = tax.id_year AND de.id_doc = tax.id_doc AND de.id_ety = tax.id_ety AND tax.id_tax_bas = " + SDataConstantsSys.FINU_TAX_BAS_VAT + " " +
                 "WHERE d.id_year = de.id_year AND d.id_doc = de.id_doc AND de.b_del = 0), 0) AS f_iva, ADDDATE(d.dt_start_cred, d.days_cred) AS dt_mat " + // 21
                 "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                 "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                 "r.id_year = " + SLibTimeUtilities.digestYear(moFieldDateDue.getDate())[0] + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(SLibTimeUtilities.getEndOfYear(moFieldDateDue.getDate())) + "' AND r.b_del = 0 AND re.b_del = 0 AND " +
                 "re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] + " AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] + " " +
                 "INNER JOIN erp.bpsu_bp AS b ON re.fid_bp_nr = b.id_bp " +
                 "INNER JOIN erp.bpsu_bp_ct AS bct ON re.fid_bp_nr = bct.id_bp AND bct.id_ct_bp = re.fid_tp_sys_mov_xxx " +
                 "INNER JOIN trn_dps AS d ON re.fid_dps_year_n = d.id_year AND re.fid_dps_doc_n = d.id_doc AND d.b_del = 0 AND d.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + " " +
                 "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND d.fid_tp_dps = dt.id_tp_dps " +
                 "INNER JOIN erp.bpsu_bpb AS bpb ON d.fid_bpb = bpb.id_bpb " +
                 "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur AND c.id_cur = " + mnCurrencyId + " " +
                 "INNER JOIN erp.bpsu_bpb AS cob ON d.fid_cob = cob.id_bpb " +
                 "LEFT OUTER JOIN erp.bpsu_bpb_con AS bcon ON bpb.id_bpb = bcon.id_bpb AND bcon.id_con = 1 " +
                 "WHERE EXISTS(SELECT * FROM erp.bpsu_bank_acc AS ac WHERE bpb.id_bpb = ac.id_bpb " + (mnLayoutType == SDataConstantsSys.FINS_TP_PAY_BANK_THIRD ? "AND ac.fid_bank = " + mnLayoutBank : "AND ac.fid_bank <> " + mnLayoutBank) + ") " +
                 "GROUP BY b.id_bp, b.bp, b.fiscal_id, d.id_year, d.id_doc, d.dt, d.stot_r, d.tax_charged_r, d.tax_retained_r, d.tot_r, c.id_cur, bcon.email_01, d.fid_bpb, bct.bp_key, dt.code, bpb.bpb, cob.code " +
                 "HAVING f_bal > 0 " + /*(mnTypePay != SDataConstantsSys.FINS_TP_PAY_BANK_SPEI_FD_N ? "AND f_tax > 0" : "") + " " +*/
                 "ORDER BY bp, id_bp, f_num, dt, id_year, id_doc; ";

        return sSql;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDateDue) {
                actionDate();
            }
            else if (button == jbDate) {
                actionDatePayment();
            }
            else if (button == jbSelectAll) {
                actionSelectAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
            else if (button == jbShowDocs) {
                actionShowDocs();
            }
            else if (button == jbCleanDocs) {
                actionCleanDocs();
            }
            else if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moPaneOptions.getTable().getSelectedColumn()) {
            case COL_APP:
                processEditingAppPayment();
                break;
            case COL_BAL:
                processEditingStoppedBalance();
                break;
            default:
                break;
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();

            if (checkBox == jckDateMaturityRo) {
                actionDateMaturityRo();
            }
            else if (checkBox == jckAccountAll) {
                actionAccountAll();
            }
        }
    }

    @Override
    public void formClearRegistry() {
        
    }

    @Override
    public void formReset() {
        mbFirstTime = true;
        jtfBalanceTot.setText(miClient.getSessionXXX().getFormatters().getDecimalsCurrencyFormat().format(0));
        mnCurrencyId = 0;
        mdBalanceTot = 0;
        mdBalancePayed = 0;
        msDebitFiscalId = "";
        msAccountDebit = "";
        msAccountCredit = "";
        moDataBizPartner = null;
        moRow = null;
        mvLayoutRows = null;
        mnNumberDocs = 0;
        msLayoutText = "";
        msLayoutXml = "";
        mbHasPayment = false;
        jckDateMaturityRo.setSelected(true);
        jckAccountAll.setSelected(true);

        moLayoutBank = null;

        for (SFormField mvField : mvFields) {
            mvField.resetField();
        }

        jbSelectAll.setEnabled(false);
        jbCleanAll.setEnabled(false);
        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);
        
        moFieldDateDue.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        moFieldDateLayout.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        moDataAccountCash = null;
        moDataBizPartnerBranchBankAccount = null;
        mnLayoutType = 0;
        mnLayoutSubtype = 0;
        mnLayoutBank = 0;
        mnLayout = 0;
        msAccountDebit = "";
        moFieldConcept.setFieldValue("");
        moFieldConsecutiveDay.setFieldValue(0);

        jcbLayoutType.setEnabled(false);
        jtfConcept.setEnabled(false);
        
        maFinRecordLayout = new ArrayList<SFinRecordLayout>();

        enableFields(true);
        populateLayoutBank();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbLayoutType, SDataConstants.FINU_TP_LAY_BANK);
        SFormUtilities.populateComboBox(miClient, jcbAccountDebit, SDataConstants.FINX_ACC_CASH_BANK, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        
        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (mnLayoutBank != moDataBizPartnerBranchBankAccount.getFkBankId()) {
                validation.setMessage("El valor para el campo '" + jlAccountDebit.getText() + "', debe pertenecer al banco '" +
                        SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { mnLayoutBank }, SLibConstants.DESCRIPTION_CODE) + "'.");
                validation.setComponent(jcbAccountDebit);
            }
        }
        
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        moLayoutBank = (SDataLayoutBank) registry;
        
        moFieldDateLayout.setFieldValue(moLayoutBank.getDateLayout());
        moFieldDateDue.setFieldValue(moLayoutBank.getDateDue());
        moFieldConcept.setFieldValue(moLayoutBank.getConcept());
        moFieldConsecutiveDay.setFieldValue(moLayoutBank.getConsecutive());
        moFieldLayoutId.setFieldValue(new int[] { moLayoutBank.getFkBankLayoutId() });
        moFieldLayoutType.setFieldValue(new int[] { moLayoutBank.getFkBankLayoutTypeId() });
        moFieldAccountDebit.setFieldValue(new int[] { moLayoutBank.getFkBankCompanyBranchId(), moLayoutBank.getFkBankAccountCashId() });
        
        renderBankLayoutSettings();
        renderAccountSettings();
        renderBalancePayment();
        showDps();
        loadDocsXml();
        enableFields(false);
    }

    @Override
    public SDataRegistry getRegistry() {
        try {
            if (moLayoutBank == null) {
                moLayoutBank = new SDataLayoutBank();
                moLayoutBank.setFkUserInsertId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moLayoutBank.setFkUserUpdateId(miClient.getSession().getUser().getPkUserId());
            }
            createLayoutText();
            createLayoutXml();

            //moLayoutBank.setPkLayBankId();
            moLayoutBank.setDateLayout(moFieldDateLayout.getDate());
            moLayoutBank.setDateDue(moFieldDateDue.getDate());
            moLayoutBank.setConcept(moFieldConcept.getString());
            moLayoutBank.setConsecutive(moFieldConsecutiveDay.getInteger());
            moLayoutBank.setAmount(mdBalanceTot);
            moLayoutBank.setAmountPayed(mdBalancePayed);
            moLayoutBank.setDocs(mnNumberDocs);
            //moLayoutBank.setDocsPayed();
            moLayoutBank.setLayoutText(msLayoutText);
            moLayoutBank.setLayoutXml(msLayoutXml);
            moLayoutBank.setDeleted(false);
            moLayoutBank.setFkBankLayoutId(mnLayout);
            moLayoutBank.setFkBankLayoutTypeId(mnLayoutSubtype);
            moLayoutBank.setFkBankCompanyBranchId(moDataAccountCash.getPkCompanyBranchId());
            moLayoutBank.setFkBankAccountCashId(moDataAccountCash.getPkAccountCashId());
            /*
            moLayoutBank.setFkUserInsertId();
            moLayoutBank.setFkUserUpdateId();
            moLayoutBank.setTsUserInsert();
            moLayoutBank.setTsUserUpdate();
            */
            
            moLayoutBank.setAuxTitle(moFieldLayoutType.getString().toLowerCase());
            
            if (!maFinRecordLayout.isEmpty()) {
                moLayoutBank.getFinRecordLayout().addAll(maFinRecordLayout);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        return moLayoutBank;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JLabel getTimeoutLabel() {
        return null;
    }
    
    @Override
    public SLibMethod getPostSaveMethod(SDataRegistry registry) {
        SLibMethod method = null;

        try {
            method = new SLibMethod(registry, registry.getClass().getMethod("writeLayout", new Class[] { SClientInterface.class }), new Object[] { miClient });
        }
        catch (NoSuchMethodException | SecurityException e) {
            SLibUtils.showException(this, e);
        }

        return method;
    }
}