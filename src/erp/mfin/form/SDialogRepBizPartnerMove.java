/*
 * DFormCompany.java
 *
 * Created on 19 de agosto de 2008, 11:10 AM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartner;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author  Néstor Ávalos
 */
public class SDialogRepBizPartnerMove extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldFkEntityId;
    private erp.lib.form.SFormField moFieldFkSalesAgentId;
    private erp.lib.form.SFormField moFieldFkCobId;
    private erp.lib.form.SFormField moFieldDateCut;

    private erp.mbps.data.SDataBizPartner moBizPartner;

    private int mnParamPkYearId;
    private int mnParamPkDocId;
    private int mnParamFkBizPartnerId;
    private int mnParamReportType;
    private int mnParamTpSysMov;
    private int mnParamCtSysMov;

    /** Creates new form DFormCompany */
    public SDialogRepBizPartnerMove(erp.client.SClientInterface client, int nType) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();

        setModalityType(ModalityType.MODELESS);
        formReset();
        setValue(1, nType);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCurrency = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jpReg = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateCourt = new javax.swing.JLabel();
        jPanel38 = new javax.swing.JPanel();
        jtfDateCut = new javax.swing.JFormattedTextField();
        jpStartDate = new javax.swing.JPanel();
        jbDateCourt = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlFkCobId = new javax.swing.JLabel();
        jPanel99 = new javax.swing.JPanel();
        jcbFkCobId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel9 = new javax.swing.JPanel();
        jbFkCobId = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jrbBizPartner = new javax.swing.JRadioButton();
        jrbSalAgt = new javax.swing.JRadioButton();
        jPanel98 = new javax.swing.JPanel();
        jlFkEntityId = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jbFkEntityId = new javax.swing.JButton();
        jcbFkEntityId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel12 = new javax.swing.JPanel();
        jlFkSalAgtId = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jbFkSalAgtId = new javax.swing.JButton();
        jcbFkSalesAgentId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbReport = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relación de saldos de "); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setLayout(new java.awt.BorderLayout());

        jpReg.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jpReg.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel8.setLayout(new java.awt.GridLayout(1, 1, 5, 2));

        jPanel4.setLayout(new java.awt.BorderLayout(0, 2));

        jlDateCourt.setText("Fecha de corte: *");
        jlDateCourt.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel4.add(jlDateCourt, java.awt.BorderLayout.WEST);

        jPanel38.setLayout(new java.awt.BorderLayout(2, 0));

        jtfDateCut.setText("dd/mm/yyyy");
        jtfDateCut.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel38.add(jtfDateCut, java.awt.BorderLayout.WEST);

        jpStartDate.setLayout(new java.awt.BorderLayout(2, 0));

        jbDateCourt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateCourt.setToolTipText("Seleccionar fecha inicial vigencia");
        jbDateCourt.setPreferredSize(new java.awt.Dimension(23, 23));
        jpStartDate.add(jbDateCourt, java.awt.BorderLayout.WEST);

        jPanel38.add(jpStartDate, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel4);

        jpReg.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro:"));
        jPanel7.setLayout(new java.awt.BorderLayout(2, 0));

        jlFkCobId.setText("Sucursal:");
        jlFkCobId.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel7.add(jlFkCobId, java.awt.BorderLayout.WEST);

        jPanel99.setLayout(new java.awt.BorderLayout(2, 5));

        jcbFkCobId.setPreferredSize(new java.awt.Dimension(350, 23));
        jcbFkCobId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCobIdItemStateChanged(evt);
            }
        });
        jPanel99.add(jcbFkCobId, java.awt.BorderLayout.WEST);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 5));

        jbFkCobId.setText("...");
        jbFkCobId.setToolTipText("Seleccionar sucursal");
        jbFkCobId.setFocusable(false);
        jbFkCobId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbFkCobId, java.awt.BorderLayout.WEST);

        jPanel99.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel99, java.awt.BorderLayout.CENTER);

        jpReg.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Por tipo:"));
        jPanel3.setLayout(new java.awt.GridLayout(3, 1, 0, 2));

        jPanel11.setLayout(new java.awt.FlowLayout(0, 5, 0));

        buttonGroup1.add(jrbBizPartner);
        jrbBizPartner.setSelected(true);
        jrbBizPartner.setText("Proveedor");
        jrbBizPartner.setEnabled(false);
        jrbBizPartner.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbBizPartnerItemStateChanged(evt);
            }
        });
        jrbBizPartner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jrbBizPartnerFocusGained(evt);
            }
        });
        jPanel11.add(jrbBizPartner);

        buttonGroup1.add(jrbSalAgt);
        jrbSalAgt.setText("Agente de ventas");
        jrbSalAgt.setEnabled(false);
        jrbSalAgt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbSalAgtItemStateChanged(evt);
            }
        });
        jrbSalAgt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jrbSalAgtFocusGained(evt);
            }
        });
        jPanel11.add(jrbSalAgt);

        jPanel3.add(jPanel11);

        jPanel98.setLayout(new java.awt.BorderLayout(0, 5));

        jlFkEntityId.setText("[Asoc. de neg.:]");
        jlFkEntityId.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel98.add(jlFkEntityId, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout(2, 0));

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jbFkEntityId.setText("...");
        jbFkEntityId.setToolTipText("Seleccionar proveedor");
        jbFkEntityId.setFocusable(false);
        jbFkEntityId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkEntityId, java.awt.BorderLayout.WEST);

        jPanel10.add(jPanel6, java.awt.BorderLayout.CENTER);

        jcbFkEntityId.setPreferredSize(new java.awt.Dimension(350, 23));
        jcbFkEntityId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkEntityIdItemStateChanged(evt);
            }
        });
        jPanel10.add(jcbFkEntityId, java.awt.BorderLayout.WEST);

        jPanel98.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel98);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jlFkSalAgtId.setText("Agente de ventas:");
        jlFkSalAgtId.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel12.add(jlFkSalAgtId, java.awt.BorderLayout.WEST);

        jPanel13.setLayout(new java.awt.BorderLayout(2, 2));

        jPanel14.setLayout(new java.awt.BorderLayout(5, 5));

        jbFkSalAgtId.setText("...");
        jbFkSalAgtId.setToolTipText("Seleccionar agente de ventas");
        jbFkSalAgtId.setFocusable(false);
        jbFkSalAgtId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbFkSalAgtId, java.awt.BorderLayout.WEST);

        jPanel13.add(jPanel14, java.awt.BorderLayout.CENTER);

        jcbFkSalesAgentId.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel13.add(jcbFkSalesAgentId, java.awt.BorderLayout.WEST);

        jPanel12.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel12);

        jpReg.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jpData.add(jpReg, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.FlowLayout(0, 5, 0));
        jpData.add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(2));

        jbReport.setText("Imprimir");
        jbReport.setToolTipText("[Ctrl + Enter]");
        jbReport.setMaximumSize(new java.awt.Dimension(70, 23));
        jbReport.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbReport);

        jbCancel.setText("Cerrar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-522)/2, (screenSize.height-336)/2, 522, 336);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkEntityIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkEntityIdItemStateChanged
        itemStateChangedFkBizPartnerId();
}//GEN-LAST:event_jcbFkEntityIdItemStateChanged

    private void jrbBizPartnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jrbBizPartnerFocusGained

    }//GEN-LAST:event_jrbBizPartnerFocusGained

    private void jrbSalAgtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jrbSalAgtFocusGained

    }//GEN-LAST:event_jrbSalAgtFocusGained

    private void jcbFkCobIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCobIdItemStateChanged
        itemStateChangedFkCobId();
    }//GEN-LAST:event_jcbFkCobIdItemStateChanged

    private void jrbBizPartnerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbBizPartnerItemStateChanged
        itemStateChangedGainedBizPartner();
    }//GEN-LAST:event_jrbBizPartnerItemStateChanged

    private void jrbSalAgtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbSalAgtItemStateChanged
        itemStateChangedGainedSalAgt();
    }//GEN-LAST:event_jrbSalAgtItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkEntityId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkEntityId, jlFkEntityId);
        moFieldFkEntityId.setPickerButton(jbFkEntityId);
        moFieldFkSalesAgentId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkSalesAgentId, jlFkSalAgtId);
        moFieldFkSalesAgentId.setPickerButton(jbFkSalAgtId);
        moFieldFkCobId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkCobId, jlFkCobId);
        moFieldFkCobId.setPickerButton(jbFkCobId);
        moFieldDateCut = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDateCut, jlDateCourt);
        moFieldDateCut.setPickerButton(jbDateCourt);

        mvFields.add(moFieldFkEntityId);
        mvFields.add(moFieldFkSalesAgentId);
        mvFields.add(moFieldFkCobId);
        mvFields.add(moFieldDateCut);

        jbCancel.addActionListener(this);
        jbDateCourt.addActionListener(this);
        jbFkEntityId.addActionListener(this);
        jbFkSalAgtId.addActionListener(this);
        jbFkCobId.addActionListener(this);
        jbReport.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionReport(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfDateCut.requestFocus();
        }
    }

    private void itemStateChangedGainedBizPartner() {
        if (jrbBizPartner.isSelected()) {
            jcbFkEntityId.setEnabled(true);
            jbFkEntityId.setEnabled(true);
            jcbFkSalesAgentId.setEnabled(false);
            jbFkSalAgtId.setEnabled(false);
        }
    }

    private void itemStateChangedGainedSalAgt() {
        if (jrbSalAgt.isSelected()) {
            jcbFkEntityId.setEnabled(false);
            jbFkEntityId.setEnabled(false);
            jcbFkSalesAgentId.setEnabled(true);
            jbFkSalAgtId.setEnabled(true);
        }
    }

    private void itemStateChangedFkBizPartnerId() {
        if (jcbFkEntityId.getSelectedIndex() > 0) {
            switch (mnParamReportType) {
                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                    mnParamFkBizPartnerId = moFieldFkEntityId.getKeyAsIntArray()[0];
                    moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkEntityId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);
                    break;
            }
        }
    }

    private void itemStateChangedFkCobId() {
        if (jcbFkCobId.getSelectedIndex() > 0) {
            switch (mnParamReportType) {
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                    SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.FINX_ACC_CASH_CASH, new int[] { moFieldFkCobId.getKeyAsIntArray()[0] });
                    break;
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                    SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.FINX_ACC_CASH_BANK, new int[] { moFieldFkCobId.getKeyAsIntArray()[0] });
                    break;
                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                    populateComboBoxEntity();
                    break;
            }
        }
    }

    private void actionFkBizPartnerId() {
        SFormOptionPickerInterface picker = null;

        switch (mnParamReportType) {
            case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_SUP);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_DBR);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_CUS);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_CDR);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                miClient.pickOption(SDataConstants.CFGU_COB_ENT, moFieldFkEntityId, new int[] { moFieldFkCobId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_CASH, SDataConstantsSys.CFGS_TP_ENT_CASH_BANK[1] });
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                miClient.pickOption(SDataConstants.CFGU_COB_ENT, moFieldFkEntityId, new int[] { moFieldFkCobId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_CASH, SDataConstantsSys.CFGS_TP_ENT_CASH_CASH[1] });
                break;
        }

        if (picker != null) {
            picker.formRefreshOptionPane();
            picker.formReset();
            picker.setSelectedPrimaryKey(new int[] { mnParamFkBizPartnerId });
            picker.setFormVisible(true);

            if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                moFieldFkEntityId.setKey(picker.getSelectedPrimaryKey());
                mnParamFkBizPartnerId = ((int [])picker.getSelectedPrimaryKey())[0];

                if (moBizPartner != null) {
                    moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mnParamFkBizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);
                }

                jcbFkEntityId.requestFocus();
            }
        }
    }

    private void actionFkSalesAgentId() {
        miClient.pickOption(SDataConstants.BPSX_BP_ATT_SAL_AGT, moFieldFkSalesAgentId, null);
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCobId, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateCut.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateCut.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateCut.requestFocus();
        }
    }

    private void actionReport() {
        String sSqlCob = "";
        String sSql = "";
        String sCob = "";
        String sReportTitle = "RELACIÓN DE SALDOS DE ";
        String sEntity = "b.bp";
        String sTitleEntity = "ASOC. NEGOCIOS: ";
        String sTotalEntity = "TOTAL ASOC. NEGOCIOS";

        SFormValidation validation = new SFormValidation();

        validation = formValidate();

        if (!validation.getIsError()) {

            // By company branch (cob) or to all companies branches:

            if (jcbFkCobId.getSelectedIndex() > 0) {
                sSqlCob = " AND r.fid_cob = " + moFieldFkCobId.getKeyAsIntArray()[0] + " ";
                sCob = jcbFkCobId.getSelectedItem().toString();
            }
            else {
                sCob = "(TODAS)";
            }

            // Category and type of system move:

            sSql = "AND re.fid_ct_sys_mov_xxx = " + mnParamCtSysMov + " AND re.fid_tp_sys_mov_xxx =  " + mnParamTpSysMov + " ";

            // By bussines partner or sales agent:

            if (jrbBizPartner.isSelected()) {

                // Create query dependenig to type of biz Partner:

                switch (mnParamReportType) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                        sSql += "INNER JOIN erp.bpsu_bp AS b ON re.fid_bp_nr = b.id_bp ";

                        // By business partner or to all business partners:

                        if (jcbFkEntityId.getSelectedIndex() > 0) {
                            sSql += "AND re.fid_bp_nr = " + moFieldFkEntityId.getKeyAsIntArray()[0] + " ";
                            sTitleEntity += SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, moFieldFkEntityId.getKey());
                        }
                        else {
                            sTitleEntity += "(TODOS)";
                        }

                        sReportTitle += (mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_SUP ? "PROVEEDORES " : "CLIENTES ");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                        sSql += "INNER JOIN erp.bpsu_bp AS b ON re.fid_bp_nr = b.id_bp ";

                        // By business partner or to all business partners:

                        if (jcbFkEntityId.getSelectedIndex() > 0) {
                            sSql += "AND re.fid_bp_nr = " + moFieldFkEntityId.getKeyAsIntArray()[0] + " ";
                            sTitleEntity += SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, moFieldFkEntityId.getKey());
                        }
                        else {
                            sTitleEntity += "(TODOS)";
                        }

                        sReportTitle += (mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_DBR ? "DEUDORES DIVERSOS " : "ACREEDORES DIVERSOS ");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                        sSql += "INNER JOIN erp.cfgu_cob_ent AS e ON re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent ";
                        sTitleEntity = (mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK ? "CUENTA BANCARIA: " :
                            mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH ? "CAJA: " : "ALMACEN: " );

                        // By entity or to all entities:

                        if (jcbFkEntityId.getSelectedIndex() > 0) {
                            sSql += "AND re.fid_cob_n = " + moFieldFkEntityId.getKeyAsIntArray()[0] + " AND re.fid_ent_n = " + moFieldFkEntityId.getKeyAsIntArray()[1] + " ";
                            sTitleEntity += SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_COB_ENT, new int[] { moFieldFkEntityId.getKeyAsIntArray()[0], moFieldFkEntityId.getKeyAsIntArray()[1] });
                        }
                        else {
                            sTitleEntity += (mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_INV ? "(TODOS)" : "(TODAS)");
                        }
                        sSql += "INNER JOIN erp.bpsu_bpb AS bb ON e.id_cob = bb.id_bpb ";
                        sReportTitle += (mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK ? "BANCOS " :
                            mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH ? "CAJAS " : "INVENTARIOS " );
                        sEntity = "e.ent";
                        sTotalEntity = (mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK ? "TOTAL CUENTA BANCARIA" :
                            mnParamReportType == SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH ? "TOTAL CAJA" : "TOTAL ALMACEN " );
                        break;
                }
            }
            else {
                sSql += "INNER JOIN trn_dps AS d ON d.id_year = re.fid_dps_year_n AND d.id_doc = re.fid_dps_doc_n ";
                sTitleEntity = "AGENTE: ";

                // By sales agent or to all sales agents:

                if (jcbFkSalesAgentId.getSelectedIndex() > 0) {
                    sSql += " AND (d.fid_sal_agt_bp_n = " + moFieldFkSalesAgentId.getKeyAsIntArray()[0] + " OR d.fid_sal_agt_n = " + moFieldFkSalesAgentId.getKeyAsIntArray()[0] + ") ";
                    sTitleEntity += SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, moFieldFkSalesAgentId.getKey());
                }
                else {
                    sTitleEntity += "(TODOS)";
                }

                sSql += "LEFT OUTER JOIN erp.bpsu_bp AS b ON (b.id_bp = d.fid_sal_agt_bp_n OR b.id_bp = d.fid_sal_agt_n) ";

                sReportTitle += "AGENTE ";
            }

            renderReport(sReportTitle, sSqlCob + sSql, sCob, sTitleEntity, sEntity, sTotalEntity);
        }
        else {
            miClient.showMsgBoxWarning(validation.getMessage());
            validation.getComponent().requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void renderReport(java.lang.String sReportTitle, java.lang.String sSql, java.lang.String sCob, java.lang.String sTitleEntity, java.lang.String sEntity,
            java.lang.String sTotalEntity) {
        Cursor oCursor = getCursor();
        JasperPrint oPrint = null;
        JasperViewer oViewer = null;
        Map<String, Object> oMap = null;

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            // Report params:

            oMap = miClient.createReportParams();
            oMap.put("bShowDetailBackground", true);
            oMap.put("sReportTitle", sReportTitle);
            oMap.put("tDateCourt", moFieldDateCut.getDate());
            oMap.put("sCob", sCob);
            oMap.put("sCurrency", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency());
            oMap.put("sEntity", sEntity);
            oMap.put("sTitleEntity", sTitleEntity);
            oMap.put("sTotalEntity", sTotalEntity);
            oMap.put("nYearId", SLibTimeUtilities.digestYear(moFieldDateCut.getDate())[0]);
            oMap.put("sSql", sSql);

            // Report view:

            oPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_FIN_BPS_MOV, oMap);
            oViewer = new JasperViewer(oPrint, false);
            oViewer.setTitle("Reporte de " + this.getTitle().toLowerCase());
            oViewer.setVisible(true);
        }
        catch(Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(oCursor);
        }
    }

    private void getBizPartner(int nBizPartnerId) {
        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { nBizPartnerId }, SLibConstants.EXEC_MODE_SILENT);
    }

    private void populateComboBoxEntity() {
        int i = 0;
        int j = 0;

        if (moFieldFkCobId.getKeyAsIntArray()[0] > 0) {
            if (miClient.getSessionXXX().getUser().getIsUniversal()) {
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.CFGU_COB_ENT, new int[] { moFieldFkCobId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_WH });
            }
            else {
                for (i = 0; i < miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranches().size(); i++) {
                    if (miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranches().get(i).getPkCompanyBranchId() == moFieldFkCobId.getKeyAsIntArray()[0]) {
                        if (miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranches().get(i).getIsUniversal() || isUniversalAccessEntity()) {
                            SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.CFGU_COB_ENT, new int[] { moFieldFkCobId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_WH });
                        }
                        else {
                            jcbFkEntityId.removeAllItems();
                            jcbFkEntityId.addItem(new SFormComponentItem(new int[] { 0 }, "(Seleccionar almacen)"));
                            for (j = 0; j < miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntities().size(); j++) {
                                if (miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntities().get(j).getDbmsCompanyBranchEntity().getFkEntityCategoryId() == SDataConstantsSys.CFGS_CT_ENT_WH) {
                                    jcbFkEntityId.addItem(new SFormComponentItem(new int[] { miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntities().get(j).getPkCompanyBranchId(),
                                        miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntities().get(j).getPkEntityId() }, miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntities().get(j).getDbmsCompanyBranchEntity().getEntity()));
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private boolean isUniversalAccessEntity() {
        int i = 0;
        boolean isUniv = false;

        for (i = 0; i < miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntitiesUniversal().size(); i++) {
            if (miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntitiesUniversal().get(i).getPkCompanyBranchId() == moFieldFkCobId.getKeyAsIntArray()[0]) {
                if (miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranchEntitiesUniversal().get(i).getPkEntityCategoryId() == SDataConstantsSys.CFGS_CT_ENT_CASH ||
                        (miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranches().get(i).getPkCompanyBranchId() == moFieldFkCobId.getKeyAsIntArray()[0] && miClient.getSessionXXX().getUser().getDbmsAccessCompanyBranches().get(i).getIsUniversal())) {
                    isUniv = true;
                    break;
                }
            }
        }

        return isUniv;
    }

    private void actionEdit(boolean edit) {

    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel98;
    private javax.swing.JPanel jPanel99;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateCourt;
    private javax.swing.JButton jbFkCobId;
    private javax.swing.JButton jbFkEntityId;
    private javax.swing.JButton jbFkSalAgtId;
    private javax.swing.JButton jbReport;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCobId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkEntityId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkSalesAgentId;
    private javax.swing.JLabel jlDateCourt;
    private javax.swing.JLabel jlFkCobId;
    private javax.swing.JLabel jlFkEntityId;
    private javax.swing.JLabel jlFkSalAgtId;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpReg;
    private javax.swing.JPanel jpStartDate;
    private javax.swing.JRadioButton jrbBizPartner;
    private javax.swing.JRadioButton jrbSalAgt;
    private javax.swing.JFormattedTextField jtfDateCut;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateCut.setDate(miClient.getSessionXXX().getWorkingDate());
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCobId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });

        switch (mnParamReportType) {
            case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.BPSX_BP_SUP);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.BPSX_BP_DBR);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.BPSX_BP_CUS);
                SFormUtilities.populateComboBox(miClient, jcbFkSalesAgentId, SDataConstants.BPSX_BP_ATT_SAL_AGT);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.BPSX_BP_CDR);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.FINX_ACC_CASH_CASH, new int[] { moFieldFkCobId.getKeyAsIntArray()[0] });
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                SFormUtilities.populateComboBox(miClient, jcbFkEntityId, SDataConstants.FINX_ACC_CASH_BANK, new int[] { moFieldFkCobId.getKeyAsIntArray()[0] });
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                populateComboBoxEntity();
                break;
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {

    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {

        return null;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        mnParamTpSysMov = SDataConstantsSys.UNDEFINED;

        switch (type) {
            case 1:
                mnParamReportType = (Integer) value;
                switch (mnParamReportType) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                        jlFkEntityId.setText("Cliente:");
                        jrbBizPartner.setText("Cliente");
                        this.setTitle(this.getTitle() + "clientes");
                        jbFkEntityId.setToolTipText("Seleccionar cliente");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1];
                        jrbBizPartner.setEnabled(true);
                        jrbSalAgt.setEnabled(true);
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                        jlFkEntityId.setText("Proveedor:");
                        jrbBizPartner.setText("Proveedor");
                        this.setTitle(this.getTitle() + "proveedores");
                        jbFkEntityId.setToolTipText("Seleccionar proveedor");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1];
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                        jlFkEntityId.setText("Deudor diverso:");
                        jrbBizPartner.setText("Deudor diverso");
                        this.setTitle(this.getTitle() + "deudores diversos");
                        jbFkEntityId.setToolTipText("Seleccionar deudor diverso");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[1];
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                        jlFkEntityId.setText("Acreedor diverso:");
                        jrbBizPartner.setText("Acreedor diverso");
                        this.setTitle(this.getTitle() + "acreedores diversos");
                        jbFkEntityId.setToolTipText("Seleccionar acreedor diverso");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[1];
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                        jlFkEntityId.setText("Banco:");
                        jrbBizPartner.setText("Banco");
                        this.setTitle(this.getTitle() + "bancos");
                        jbFkEntityId.setToolTipText("Seleccionar cuenta bancaria");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1];
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                        jlFkEntityId.setText("Caja:");
                        jrbBizPartner.setText("Caja");
                        this.setTitle(this.getTitle() + "cajas");
                        jbFkEntityId.setToolTipText("Seleccionar caja");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1];
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                        jlFkEntityId.setText("Almacén:");
                        jrbBizPartner.setText("Almacén");
                        this.setTitle(this.getTitle() + "almacenes");
                        jbFkEntityId.setToolTipText("Seleccionar almacén");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK[1];
                        break;
                }
                jcbFkSalesAgentId.setEnabled(false);
                jbFkSalAgtId.setEnabled(false);
                formRefreshCatalogues();

                if (miClient.getSessionXXX().getCurrentCompanyBranch() != null)
                    moFieldFkCobId.setKey(miClient.getSessionXXX().getCurrentCompanyBranch().getPrimaryKey());
                break;
            case 2:
                mnParamPkYearId = ((int []) value)[0];
                mnParamPkDocId = ((int []) value)[1];
                break;
            case 3:
                mnParamFkBizPartnerId = (Integer) value;
                switch (mnParamReportType) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                        moFieldFkEntityId.setKey(new int[] { (Integer) value });
                        getBizPartner(mnParamFkBizPartnerId);
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                        break;
                }
                break;
            case 4:
                moFieldDateCut.setDate(SLibTimeUtilities.getBeginOfMonth((Date) value));
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDateCourt) {
                actionDateStart();
            }
            else if (button == jbReport) {
                actionReport();
            }
            else if (button == jbFkEntityId) {
                actionFkBizPartnerId();
            }
            else if (button == jbFkCobId) {
                actionFkCobId();
            }
            else if (button == jbFkSalAgtId) {
                actionFkSalesAgentId();
            }
        }
    }
}
