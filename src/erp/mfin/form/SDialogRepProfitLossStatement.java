/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepProfitLossStatement.java
 *
 * Created on 29/06/2010, 05:02:26 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.SGuiUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Map;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sergio Flores
 */
public class SDialogRepProfitLossStatement extends javax.swing.JDialog implements java.awt.event.ActionListener, java.awt.event.ItemListener {

    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateBegin;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldCurrencyId;
    private erp.lib.form.SFormField moFieldExchangeRate;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    /** Creates new form SDialogRepProfitLossStatement */
    public SDialogRepProfitLossStatement(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateBegin = new javax.swing.JLabel();
        jftDateBegin = new javax.swing.JFormattedTextField();
        jbDateBegin = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlCurrencyId = new javax.swing.JLabel();
        jcbCurrencyId = new javax.swing.JComboBox();
        jbCurrencyId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jckShowEbitda = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jckShowRecordAdjYearEnd = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jckShowRecordAdjAudit = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jpPrint = new javax.swing.JButton();
        jpClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estado de resultados");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del estado financiero:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateBegin.setText("Fecha inicial: *");
        jlDateBegin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDateBegin);

        jftDateBegin.setText("dd/mm/yyyy");
        jftDateBegin.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jftDateBegin);

        jbDateBegin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateBegin.setToolTipText("Seleccionar fecha");
        jbDateBegin.setFocusable(false);
        jbDateBegin.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateBeginActionPerformed(evt);
            }
        });
        jPanel3.add(jbDateBegin);

        jPanel6.add(jPanel3);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateEndActionPerformed(evt);
            }
        });
        jPanel8.add(jbDateEnd);

        jPanel6.add(jPanel8);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrencyId.setText("Moneda: *");
        jlCurrencyId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlCurrencyId);

        jcbCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbCurrencyId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jcbCurrencyId);

        jbCurrencyId.setText("...");
        jbCurrencyId.setToolTipText("Selecionar moneda");
        jbCurrencyId.setFocusable(false);
        jbCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbCurrencyId);

        jPanel6.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlExchangeRate.setText("Tipo de cambio:");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.0000");
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jtfExchangeRate);

        jbExchangeRate.setText("...");
        jbExchangeRate.setToolTipText("Seleccionar tipo de cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbExchangeRate);

        jPanel6.add(jPanel4);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel9.setLayout(new java.awt.GridLayout(4, 1));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowEbitda.setText("Mostrar EBITDA");
        jPanel12.add(jckShowEbitda);

        jPanel9.add(jPanel12);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowRecordAdjYearEnd.setText("Incluir ajustes de cierre");
        jPanel10.add(jckShowRecordAdjYearEnd);

        jPanel9.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowRecordAdjAudit.setText("Incluir ajustes de auditoría");
        jckShowRecordAdjAudit.setOpaque(false);
        jPanel11.add(jckShowRecordAdjAudit);

        jPanel9.add(jPanel11);

        jPanel2.add(jPanel9, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jpPrint.setText("Imprimir");
        jpPrint.setToolTipText("[Ctrl + Enter]");
        jpPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jpPrint);

        jpClose.setText("Cerrar");
        jpClose.setToolTipText("[Escape]");
        jpClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jpClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(400, 300));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jpPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jpPrintActionPerformed

    private void jpCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jpCloseActionPerformed

    private void jbDateBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateBeginActionPerformed

    }//GEN-LAST:event_jbDateBeginActionPerformed

    private void jbDateEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateEndActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbDateEndActionPerformed

    private void initComponentsExtra() {
        moFieldDateBegin = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateBegin, jlDateBegin);
        moFieldDateBegin.setPickerButton(jbDateBegin);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbCurrencyId, jlCurrencyId);
        moFieldCurrencyId.setPickerButton(jbCurrencyId);
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldExchangeRate.setPickerButton(jbExchangeRate);

        SFormUtilities.populateComboBox(miClient, jcbCurrencyId, SDataConstants.CFGU_CUR);

        moFieldDateBegin.setFieldValue(SLibTimeUtilities.getBeginOfYear(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldCurrencyId.setFieldValue(new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() });
        itemStateCurrencyId();

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldDateBegin);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldCurrencyId);
        mvFields.add(moFieldExchangeRate);

        jbDateBegin.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jbCurrencyId.addActionListener(this);
        jbExchangeRate.addActionListener(this);
        jcbCurrencyId.addItemListener(this);

        jckShowRecordAdjYearEnd.setSelected(true);
        jckShowRecordAdjAudit.setSelected(true);

        setModalityType(ModalityType.MODELESS);
        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    @SuppressWarnings("unchecked")
    private double readNetSales() {
        int[] year = SLibTimeUtilities.digestYear(moFieldDateBegin.getDate());
        double netSales = 0;
        String sql = "";
        String sqlWhere = "";
        ResultSet resulSet = null;
        String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(account);

        try {
            sqlWhere = (!jckShowRecordAdjYearEnd.isSelected() ? " AND r.b_adj_year = 0 " : "") +
                        (!jckShowRecordAdjAudit.isSelected() ? " AND r.b_adj_audit = 0 " : "");

            sql = "SELECT SUM(re.credit - re.debit) AS f_sal " +
                    "FROM fin_rec AS r " +
                    "INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.b_del = 0 AND re.b_del = 0 AND r.id_year = " + year[0] + " AND r.dt BETWEEN " +
                    "'" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateBegin.getDate()) + "' AND " +
                    "'" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate()) + "' " + sqlWhere +
                    "INNER JOIN fin_acc AS am ON " +
                    "CONCAT(LEFT(re.fid_acc, " + (levels.get(1) - 1) + "), '" + account.substring(levels.get(1) - 1) + "') = am.id_acc AND (" +
                    "(am.fid_tp_acc_r = " + SDataConstantsSys.FINS_CLS_ACC_SAL[0] + " AND " +
                    "am.fid_cl_acc_r = " + SDataConstantsSys.FINS_CLS_ACC_SAL[1] + " AND " +
                    "am.fid_cls_acc_r = " + SDataConstantsSys.FINS_CLS_ACC_SAL[2] + ") OR " +
                    "(am.fid_tp_acc_r = " + SDataConstantsSys.FINS_CLS_ACC_SAL_ADJ[0] + " AND " +
                    "am.fid_cl_acc_r = " + SDataConstantsSys.FINS_CLS_ACC_SAL_ADJ[1] + " AND " +
                    "am.fid_cls_acc_r = " + SDataConstantsSys.FINS_CLS_ACC_SAL_ADJ[2] + ")) ";

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                netSales = resulSet.getDouble("f_sal");
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        return netSales;
    }
    
    private void print() {
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        int[] year = SLibTimeUtilities.digestYear(moFieldDateBegin.getDate());
        String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(account);

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            map = miClient.createReportParams();
            map.put("nYear", year[0]);
            map.put("tDateStart", moFieldDateBegin.getDate());
            map.put("tDateEnd", moFieldDateEnd.getDate());
            map.put("nLenAccountMajor", levels.get(1) - 1);
            map.put("nLenAccount", levels.get(2) - 1);
            map.put("sCompAccountMajor", account.substring(levels.get(1) - 1));
            map.put("sCompAccount", account.substring(levels.get(2) - 1));
            map.put("dNetSales", readNetSales());
            map.put("sCurrency", ((SFormComponentItem) jcbCurrencyId.getSelectedItem()).getItem());
            map.put("dExchangeRate", moFieldExchangeRate.getDouble());
            map.put("sSqlWhere", (!jckShowRecordAdjYearEnd.isSelected() ? " AND b_adj_year = 0 " : "") + (!jckShowRecordAdjAudit.isSelected() ? " AND b_adj_audit = 0 " : ""));
            map.put("bEbitda", jckShowEbitda.isSelected());

            jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_FIN_STAT_PROF_LOSS, map);
            jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle(getTitle());
            jasperViewer.setVisible(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
    }

    private void itemStateCurrencyId() {
        if (jcbCurrencyId.getSelectedIndex() <= 0 ||
                ((int[]) ((SFormComponentItem) jcbCurrencyId.getSelectedItem()).getPrimaryKey())[0] == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
            moFieldExchangeRate.setFieldValue(1d);
            jtfExchangeRate.setEnabled(false);
        }
        else {
            jtfExchangeRate.setEnabled(true);
        }
    }

    private void actionDateBegin() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateBegin.getDate(), moFieldDateBegin);
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }

    private void actionCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldCurrencyId, null);
    }

    private void actionExchangeRate() {
        double rate = miClient.pickExchangeRate(moFieldCurrencyId.getKeyAsIntArray()[0], moFieldDateBegin.getDate());

        if (rate != 0d) {
            moFieldExchangeRate.setFieldValue(rate);
            jtfExchangeRate.requestFocus();
        }
    }

    public void actionPrint() {
        boolean error = false;
        JComponent component = null;
        SFormValidation validation = new SFormValidation();
        String msg = "";
        
        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            msg = SGuiUtilities.validateDateRange(moFieldDateBegin.getDate(), moFieldDateEnd.getDate());
            
            if (!msg.isEmpty()) {
                error = true;
                validation.setMessage(msg);
                validation.setComponent(jftDateEnd);
                miClient.showMsgBoxWarning(msg);
                validation.getComponent().requestFocus();
            }
        }
        
        if (!error) {
            print();
        }      
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCurrencyId;
    private javax.swing.JButton jbDateBegin;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JComboBox jcbCurrencyId;
    private javax.swing.JCheckBox jckShowEbitda;
    private javax.swing.JCheckBox jckShowRecordAdjAudit;
    private javax.swing.JCheckBox jckShowRecordAdjYearEnd;
    private javax.swing.JFormattedTextField jftDateBegin;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JLabel jlCurrencyId;
    private javax.swing.JLabel jlDateBegin;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JButton jpClose;
    private javax.swing.JButton jpPrint;
    private javax.swing.JTextField jtfExchangeRate;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDateBegin) {
                actionDateBegin();
            }
            if (button == jbDateEnd) {
                actionDateEnd();
            }
            else if (button == jbCurrencyId) {
                actionCurrencyId();
            }
            else if (button == jbExchangeRate) {
                actionExchangeRate();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == jcbCurrencyId) {
                itemStateCurrencyId();
            }
        }
    }
}
