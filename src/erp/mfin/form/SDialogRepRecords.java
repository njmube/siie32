/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepRecords.java
 *
 * Created on 9/04/2010, 01:26:58 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SDialogRepRecords extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldBookKeepingCenter;
    private erp.lib.form.SFormField moFieldRecordType;
    private erp.lib.form.SFormField moFieldAccountCash;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldFiscalYear;
    private erp.lib.form.SFormField moFieldPeriod;
    private erp.lib.form.SFormField moFieldNumberInitial;
    private erp.lib.form.SFormField moFieldNumberEnd;

    /** Creates new form SDialogRepRecords */
    public SDialogRepRecords(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;

        initComponents();
        initComponentsExtra();
        
        formRefreshCatalogues();
        formReset();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupRangeOptions = new javax.swing.ButtonGroup();
        buttonGroupCurrencyOptions = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlFiscalYear = new javax.swing.JLabel();
        jtfFiscalYear = new javax.swing.JTextField();
        Dummy04 = new javax.swing.JLabel();
        jlPeriod = new javax.swing.JLabel();
        jtfPeriod = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlNumberInitial = new javax.swing.JLabel();
        jtfNumberInitial = new javax.swing.JTextField();
        Dummy03 = new javax.swing.JLabel();
        jlNumberEnd = new javax.swing.JLabel();
        jtfNumberEnd = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlBookKeepingCenter = new javax.swing.JLabel();
        jcbBookKeepingCenter = new javax.swing.JComboBox();
        jbBookKeepingCenter = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlRecordType = new javax.swing.JLabel();
        jcbRecordType = new javax.swing.JComboBox();
        jbRecordType = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlAccountCash = new javax.swing.JLabel();
        jcbAccountCash = new javax.swing.JComboBox();
        jbAccountCash = new javax.swing.JButton();
        jrbByDateRange = new javax.swing.JRadioButton();
        jrbByNumberRange = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jrbByLocalCurrency = new javax.swing.JRadioButton();
        jrbByRecordCurrency = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Impresión de pólizas contables");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbPrint);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbExit);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel5.setLayout(new java.awt.GridLayout(2, 1, 0, 2));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha inicial");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbDateStart);

        jPanel5.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbDateEnd);

        jPanel5.add(jPanel14);

        jPanel6.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Rango:"));
        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 2));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalYear.setText("Ejercicio fiscal: *");
        jlFiscalYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlFiscalYear);

        jtfFiscalYear.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfFiscalYear.setText("FISCAL YEAR");
        jtfFiscalYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfFiscalYear);

        Dummy04.setPreferredSize(new java.awt.Dimension(105, 0));
        jPanel9.add(Dummy04);

        jlPeriod.setText("Periodo: *");
        jlPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlPeriod);

        jtfPeriod.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPeriod.setText("PERIOD");
        jtfPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfPeriod);

        jPanel7.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberInitial.setText("Folio inicial: *");
        jlNumberInitial.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlNumberInitial);

        jtfNumberInitial.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumberInitial.setText("NUM INITIAL");
        jtfNumberInitial.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfNumberInitial);

        Dummy03.setPreferredSize(new java.awt.Dimension(105, 0));
        jPanel10.add(Dummy03);

        jlNumberEnd.setText("Folio final: *");
        jlNumberEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlNumberEnd);

        jtfNumberEnd.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumberEnd.setText("NUM END");
        jtfNumberEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfNumberEnd);

        jPanel7.add(jPanel10);

        jPanel6.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros del reporte:"));
        jPanel11.setPreferredSize(new java.awt.Dimension(451, 155));
        jPanel11.setLayout(new java.awt.GridLayout(5, 1, 0, 2));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBookKeepingCenter.setText("Centro contable: *");
        jlBookKeepingCenter.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlBookKeepingCenter);

        jcbBookKeepingCenter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbBookKeepingCenter.setPreferredSize(new java.awt.Dimension(372, 23));
        jPanel12.add(jcbBookKeepingCenter);

        jbBookKeepingCenter.setText("jButton1");
        jbBookKeepingCenter.setToolTipText("Seleccionar centro contable");
        jbBookKeepingCenter.setFocusable(false);
        jbBookKeepingCenter.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbBookKeepingCenter);

        jPanel11.add(jPanel12);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecordType.setText("Tipo de póliza:");
        jlRecordType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlRecordType);

        jcbRecordType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbRecordType.setPreferredSize(new java.awt.Dimension(372, 23));
        jcbRecordType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbRecordTypeItemStateChanged(evt);
            }
        });
        jPanel4.add(jcbRecordType);

        jbRecordType.setText("jButton2");
        jbRecordType.setToolTipText("Seleccionar tipo de póliza");
        jbRecordType.setFocusable(false);
        jbRecordType.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbRecordType);

        jPanel11.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountCash.setText("Cuenta de efectivo:");
        jlAccountCash.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlAccountCash);

        jcbAccountCash.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbAccountCash.setPreferredSize(new java.awt.Dimension(372, 23));
        jPanel8.add(jcbAccountCash);

        jbAccountCash.setText("jButton1");
        jbAccountCash.setToolTipText("Seleccionar cuenta de efectivo");
        jbAccountCash.setFocusable(false);
        jbAccountCash.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbAccountCash);

        jPanel11.add(jPanel8);

        buttonGroupRangeOptions.add(jrbByDateRange);
        jrbByDateRange.setText("Por rango de fechas");
        jrbByDateRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbByDateRangeItemStateChanged(evt);
            }
        });
        jPanel11.add(jrbByDateRange);

        buttonGroupRangeOptions.add(jrbByNumberRange);
        jrbByNumberRange.setText("Por rango de folios");
        jrbByNumberRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbByNumberRangeItemStateChanged(evt);
            }
        });
        jPanel11.add(jrbByNumberRange);

        jPanel2.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Moneda del reporte:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(109, 80));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        buttonGroupCurrencyOptions.add(jrbByLocalCurrency);
        jrbByLocalCurrency.setText("Moneda local");
        jPanel3.add(jrbByLocalCurrency);

        buttonGroupCurrencyOptions.add(jrbByRecordCurrency);
        jrbByRecordCurrency.setText("Moneda de la póliza contable");
        jPanel3.add(jrbByRecordCurrency);

        jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-500)/2, 600, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jrbByDateRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbByDateRangeItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedByDateRange();
        }
    }//GEN-LAST:event_jrbByDateRangeItemStateChanged

    private void jrbByNumberRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbByNumberRangeItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedByNumberRange();
        }
    }//GEN-LAST:event_jrbByNumberRangeItemStateChanged

    private void jcbRecordTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbRecordTypeItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedRecordType();
        }
    }//GEN-LAST:event_jcbRecordTypeItemStateChanged

    public void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldBookKeepingCenter = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbBookKeepingCenter, jlBookKeepingCenter);
        moFieldBookKeepingCenter.setPickerButton(jbBookKeepingCenter);
        moFieldRecordType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbRecordType, jlRecordType);
        moFieldRecordType.setPickerButton(jbRecordType);
        moFieldAccountCash = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbAccountCash, jlAccountCash);
        moFieldAccountCash.setPickerButton(jbAccountCash);
        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldFiscalYear = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfFiscalYear, jlFiscalYear);
        moFieldFiscalYear.setIntegerMin(2000);
        moFieldFiscalYear.setIntegerMax(2100);
        moFieldFiscalYear.setMinInclusive(true);
        moFieldFiscalYear.setMaxInclusive(true);
        moFieldFiscalYear.setDecimalFormat(miClient.getSessionXXX().getFormatters().getYearFormat());
        moFieldPeriod = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfPeriod, jlPeriod);
        moFieldNumberInitial = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfNumberInitial, jlNumberInitial);
        moFieldNumberEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfNumberEnd, jlNumberEnd);

        mvFields.add(moFieldBookKeepingCenter);
        mvFields.add(moFieldRecordType);
        mvFields.add(moFieldAccountCash);
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldPeriod);
        mvFields.add(moFieldFiscalYear);
        mvFields.add(moFieldNumberInitial);
        mvFields.add(moFieldNumberEnd);

        jbPrint.addActionListener(this);
        jbExit.addActionListener(this);
        jbBookKeepingCenter.addActionListener(this);
        jbRecordType.addActionListener(this);
        jbAccountCash.addActionListener(this);
        jbDateStart.addActionListener(this);
        jbDateEnd.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionClose();
            }
            else {
                jcbBookKeepingCenter.requestFocus();
            }
        }
    }

    private void actionPrint() {
        Cursor cursor = getCursor();
        SFormValidation validation = formValidate();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        java.util.Date dt = new Date();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                map = miClient.createReportParams();
                map.put("nIdBkc", moFieldBookKeepingCenter.getKeyAsIntArray()[0]);
                map.put("sIdTpRec", jcbRecordType.getSelectedIndex() == 0 ? "" : (String) moFieldRecordType.getKeyAsObjectArray()[0]);
                map.put("tDtInitial", moFieldDateStart.getDate());
                map.put("tDtEnd", moFieldDateEnd.getDate());
                map.put("nNumInitial", moFieldNumberInitial.getInteger());
                map.put("nNumEnd", moFieldNumberEnd.getInteger());
                map.put("bIsByDate", jrbByDateRange.isSelected());
                map.put("sBkcDescrip", jcbBookKeepingCenter.getSelectedItem().toString());
                map.put("sDtInitialText", jftDateStart.getText());
                map.put("sDtEndText", jftDateEnd.getText());
                map.put("nIdPer", moFieldPeriod.getInteger());
                map.put("sTpRecDescrip", jcbRecordType.getSelectedIndex() == 0 ? "(TODAS)" : jcbRecordType.getSelectedItem().toString());
                map.put("sDateTime", miClient.getSessionXXX().getFormatters().getDatetimeFormat().format(dt));
                map.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
                map.put("nIdYear", moFieldFiscalYear.getInteger());
                map.put("sCurrency", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency());
                map.put("sCurrencyKeyErp", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
                map.put("sSqlAccountCash", jcbAccountCash.isEnabled() && moFieldAccountCash.getKeyAsIntArray()[0] > 0 ?
                    " AND r.fid_cob_n = " + moFieldAccountCash.getKeyAsIntArray()[0] + " AND r.fid_acc_cash_n = " + moFieldAccountCash.getKeyAsIntArray()[1] + " " : "");

                jasperPrint = SDataUtilities.fillReport(miClient, jrbByLocalCurrency.isSelected() ? SDataConstantsSys.REP_FIN_RECS : SDataConstantsSys.REP_FIN_RECS_CY, map);
                jasperViewer = new JasperViewer(jasperPrint, false);
                jasperViewer.setTitle("Listado de movimientos de pólizas contables");
                jasperViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionBookKeepingCenter() {
        miClient.pickOption(SDataConstants.FIN_BKC, moFieldBookKeepingCenter, null);
    }

    private void actionRecordType() {
        miClient.pickOption(SDataConstants.FINX_TP_REC_ALL, moFieldRecordType, null);
    }

    private void actionDateInitial() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateStart.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateStart.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateStart.requestFocus();
        }
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateEnd.requestFocus();
        }
    }

    private void actionAccountCash() {
        miClient.pickOption(SDataConstants.FIN_ACC_CASH, moFieldAccountCash, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
    }

    private void renderRangeOptions() {
        if (jrbByDateRange.isSelected()) {
            jlDateStart.setEnabled(true);
            jftDateStart.setEnabled(true);
            jbDateStart.setEnabled(true);
            jlDateEnd.setEnabled(true);
            jftDateEnd.setEnabled(true);
            jbDateEnd.setEnabled(true);
            jlFiscalYear.setEnabled(false);
            jtfFiscalYear.setEnabled(false);
            jlPeriod.setEnabled(false);
            jtfPeriod.setEnabled(false);
            jlNumberInitial.setEnabled(false);
            jtfNumberInitial.setEnabled(false);
            jlNumberEnd.setEnabled(false);
            jtfNumberEnd.setEnabled(false);
        }
        else {
            jlDateStart.setEnabled(false);
            jftDateStart.setEnabled(false);
            jbDateStart.setEnabled(false);
            jlDateEnd.setEnabled(false);
            jftDateEnd.setEnabled(false);
            jbDateEnd.setEnabled(false);
            jlFiscalYear.setEnabled(true);
            jtfFiscalYear.setEnabled(true);
            jlPeriod.setEnabled(true);
            jtfPeriod.setEnabled(true);
            jlNumberInitial.setEnabled(true);
            jtfNumberInitial.setEnabled(true);
            jlNumberEnd.setEnabled(true);
            jtfNumberEnd.setEnabled(true);
        }
    }

    private void itemStateChangedByDateRange() {
        renderRangeOptions();
    }

    private void itemStateChangedByNumberRange() {
        renderRangeOptions();
    }

    private void itemStateChangedRecordType() {
        boolean enable = false;

        if (jcbRecordType.getSelectedIndex() > 0) {
            if (((SFormComponentItem) jcbRecordType.getSelectedItem()).getComplement() != null) {
                enable = (Boolean) ((SFormComponentItem) jcbRecordType.getSelectedItem()).getComplement();
            }
        }

        jlAccountCash.setEnabled(enable);
        jcbAccountCash.setEnabled(enable);
        jbAccountCash.setEnabled(enable);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dummy03;
    private javax.swing.JLabel Dummy04;
    private javax.swing.ButtonGroup buttonGroupCurrencyOptions;
    private javax.swing.ButtonGroup buttonGroupRangeOptions;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAccountCash;
    private javax.swing.JButton jbBookKeepingCenter;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbPrint;
    private javax.swing.JButton jbRecordType;
    private javax.swing.JComboBox jcbAccountCash;
    private javax.swing.JComboBox jcbBookKeepingCenter;
    private javax.swing.JComboBox jcbRecordType;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlAccountCash;
    private javax.swing.JLabel jlBookKeepingCenter;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlFiscalYear;
    private javax.swing.JLabel jlNumberEnd;
    private javax.swing.JLabel jlNumberInitial;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlRecordType;
    private javax.swing.JRadioButton jrbByDateRange;
    private javax.swing.JRadioButton jrbByLocalCurrency;
    private javax.swing.JRadioButton jrbByNumberRange;
    private javax.swing.JRadioButton jrbByRecordCurrency;
    private javax.swing.JTextField jtfFiscalYear;
    private javax.swing.JTextField jtfNumberEnd;
    private javax.swing.JTextField jtfNumberInitial;
    private javax.swing.JTextField jtfPeriod;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jrbByDateRange.setSelected(true);
        jrbByLocalCurrency.setSelected(true);
        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldFiscalYear.setFieldValue(miClient.getSessionXXX().getWorkingYear());
        moFieldPeriod.setFieldValue(SLibTimeUtilities.digestYearMonth(miClient.getSessionXXX().getWorkingDate())[1]);
        moFieldNumberInitial.setFieldValue(1);
        renderRangeOptions();
        itemStateChangedRecordType();

        if (jcbBookKeepingCenter.getItemCount() == 2) {
            moFieldBookKeepingCenter.setKey(new int[] { 1 });
        }
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbBookKeepingCenter, SDataConstants.FIN_BKC);
        SFormUtilities.populateComboBox(miClient, jcbRecordType, SDataConstants.FINX_TP_REC_ALL);
        SFormUtilities.populateComboBox(miClient, jcbAccountCash, SDataConstants.FIN_ACC_CASH, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (jrbByDateRange.isSelected() && moFieldDateStart.getDate() == null) {
                validation.setMessage("La fecha inicial es invalida.");
                validation.setComponent(jftDateStart);
            }
            else if (jrbByDateRange.isSelected() && moFieldDateEnd.getDate() == null) {
                validation.setMessage("La fecha final es invalida.");
                validation.setComponent(jftDateEnd);
            }
            else if (jrbByDateRange.isSelected() && moFieldDateEnd.getDate().compareTo(moFieldDateStart.getDate()) < 0) {
                validation.setMessage("La fecha final debe ser mayor o igual a la fecha inicial.");
                validation.setComponent(jftDateEnd);
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]) {
                validation.setMessage("La fecha inicial y final deben pertenecer al mismo ejercicio.");
                validation.setComponent(jftDateStart);
            }
            else if (jrbByNumberRange.isSelected() && moFieldFiscalYear.getInteger() == 0) {
                validation.setMessage("El valor del campo '" + jlFiscalYear.getText() + "'. debe ser mayor a 0.");
                validation.setComponent(jtfFiscalYear);
            }
            else if (jrbByNumberRange.isSelected() && moFieldPeriod.getInteger() == 0) {
                validation.setMessage("El valor del campo '" + jlPeriod.getText() + "'. debe ser mayor a 0.");
                validation.setComponent(jtfPeriod);
            }
            else if (jrbByNumberRange.isSelected() && moFieldNumberInitial.getInteger() == 0) {
                validation.setMessage("El valor del campo " + jlNumberInitial.getText() + " debe ser mayor a 0.");
                validation.setComponent(jtfNumberInitial);
            }
            else if (jrbByNumberRange.isSelected() && moFieldNumberEnd.getInteger() == 0) {
                validation.setMessage("El valor del campo " + jlNumberEnd.getText() + " debe ser mayor a 0.");
                validation.setComponent(jtfNumberEnd);
            }
            else if (jrbByNumberRange.isSelected() && moFieldNumberEnd.getInteger() < moFieldNumberInitial.getInteger()) {
                validation.setMessage("El valor del folio final debe ser mayor o igual que el valor del folio inicial.");
                validation.setComponent(jtfNumberEnd);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbExit) {
                actionClose();
            }
            else if (button == jbBookKeepingCenter) {
                actionBookKeepingCenter();
            }
            else if (button == jbRecordType) {
                actionRecordType();
            }
            else if (button == jbAccountCash) {
                actionAccountCash();
            }
            else if (button == jbDateStart) {
                actionDateInitial();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
        }
    }
}
