/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.log.form;

import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.log.db.SDbShipmentDestiny;
import erp.mod.log.db.SDbShipmentDestinyEntry;
import erp.mod.log.db.SDbSpot;
import erp.mod.log.db.SDbSpotCompanyBranch;
import erp.mod.log.db.SDbSpotCompanyBranchEntity;
import erp.mod.log.db.SParamsShipment;
import erp.mod.log.db.SRowShipmentDiogSupply;
import erp.mod.log.db.SRowShipmentDpsSupply;
import erp.mtrn.data.SDataDiog;
import erp.mtrn.data.SDataDps;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormShipmentDestiny extends SBeanForm implements ActionListener, ItemListener {

    private SDbShipmentDestiny moRegistry;

    private SFormDialogShipmentDps moFormDialogShipmentDps;
    private SFormDialogShipmentDiog moFormDialogShipmentDiog;

    private SGridPaneForm moGridEntries;
    private SGuiFieldKeyGroup moFieldKeySpotGroup;
    private SGuiFieldKeyGroup moFieldKeyCustomerGroup;
    private SGuiFieldKeyGroup moFieldKeyEntityGroup;

    private SDataDiog moDiogSource;
    private SDataDiog moDiogDestiny;

    private int mnFkShipmentCobId;
    private int mnShipmentType;
    //private String msSpotTypeMsg;
    private int[] manPrimaryKeyDps;
    private int[] manPrimaryKeySourceDiog;
    private int[] manPrimaryKeyDestinyDiog;
    private Date mtShipmentDate;

    private ArrayList<SDbShipmentDestinyEntry> maShipmentDestinyEntry;

    /**
     * Creates new form SFormShipmentDestiny
     */
    public SFormShipmentDestiny(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.LOG_SHIP_DEST, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlDocShipmentType = new javax.swing.JLabel();
        moKeyDocShipmentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlSpotType = new javax.swing.JLabel();
        moKeySpotType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlSpot = new javax.swing.JLabel();
        moKeySpot = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel22 = new javax.swing.JPanel();
        jlDateDelivery = new javax.swing.JLabel();
        moDateDelivery = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel24 = new javax.swing.JPanel();
        jlDateDeliveryReal = new javax.swing.JLabel();
        moDateDeliveryReal = new sa.lib.gui.bean.SBeanFieldDate();
        jckDelivery = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jlCustomer = new javax.swing.JLabel();
        moKeyCustomer = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel28 = new javax.swing.JPanel();
        jlCustomerBranch = new javax.swing.JLabel();
        moKeyCustomerBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel29 = new javax.swing.JPanel();
        jlCustomerBranchAddress = new javax.swing.JLabel();
        moKeyCustomerBranchAddress = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jlWarehouseCompanyBranch = new javax.swing.JLabel();
        moKeyWarehouseCompanyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel31 = new javax.swing.JPanel();
        jlWarehouseEntity = new javax.swing.JLabel();
        moKeyWarehouseEntity = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jlAppointmentNumber = new javax.swing.JLabel();
        moTextAppointmentNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel33 = new javax.swing.JPanel();
        jlAppointmentTime = new javax.swing.JLabel();
        moDateAppointmentTime = new sa.lib.gui.bean.SBeanFieldDatetime();
        jPanel34 = new javax.swing.JPanel();
        jlAppointmentPerson = new javax.swing.JLabel();
        moTextAppointmentPerson = new sa.lib.gui.bean.SBeanFieldText();
        jpPanel10 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jbAddDocument = new javax.swing.JButton();
        jbShipmentAll = new javax.swing.JButton();
        jbShipmentClear = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del destino:"));
        jPanel23.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocShipmentType.setText("Tipo documento:*");
        jlDocShipmentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlDocShipmentType);

        moKeyDocShipmentType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel21.add(moKeyDocShipmentType);

        jPanel23.add(jPanel21);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSpotType.setText("Tipo lugar:*");
        jlSpotType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlSpotType);

        moKeySpotType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(moKeySpotType);

        jPanel23.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSpot.setText("Lugar:*");
        jlSpot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlSpot);

        moKeySpot.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moKeySpot);

        jPanel23.add(jPanel26);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDelivery.setText("Fecha entrega:*");
        jlDateDelivery.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlDateDelivery);
        jPanel22.add(moDateDelivery);

        jPanel23.add(jPanel22);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDeliveryReal.setText("Fecha ent. real:*");
        jlDateDeliveryReal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlDateDeliveryReal);
        jPanel24.add(moDateDeliveryReal);

        jPanel23.add(jPanel24);

        jckDelivery.setText("Entregado");
        jPanel23.add(jckDelivery);

        jPanel1.add(jPanel23, java.awt.BorderLayout.WEST);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del cliente:"));
        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCustomer.setText("Cliente:*");
        jlCustomer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlCustomer);

        moKeyCustomer.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel27.add(moKeyCustomer);

        jPanel2.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCustomerBranch.setText("Sucursal:*");
        jlCustomerBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlCustomerBranch);

        moKeyCustomerBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel28.add(moKeyCustomerBranch);

        jPanel2.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCustomerBranchAddress.setText("Domicilio entrega:*");
        jlCustomerBranchAddress.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlCustomerBranchAddress);

        moKeyCustomerBranchAddress.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel29.add(moKeyCustomerBranchAddress);

        jPanel2.add(jPanel29);

        jPanel5.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento inventario:"));
        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseCompanyBranch.setText("Sucursal:*");
        jlWarehouseCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlWarehouseCompanyBranch);

        moKeyWarehouseCompanyBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel30.add(moKeyWarehouseCompanyBranch);

        jPanel6.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseEntity.setText("Almacén:*");
        jlWarehouseEntity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel31.add(jlWarehouseEntity);

        moKeyWarehouseEntity.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel31.add(moKeyWarehouseEntity);

        jPanel6.add(jPanel31);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la cita:"));
        jPanel4.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAppointmentNumber.setText("Folio:");
        jlAppointmentNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel32.add(jlAppointmentNumber);
        jPanel32.add(moTextAppointmentNumber);

        jPanel4.add(jPanel32);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAppointmentTime.setText("Fecha-hora:");
        jlAppointmentTime.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel33.add(jlAppointmentTime);
        jPanel33.add(moDateAppointmentTime);

        jPanel4.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAppointmentPerson.setText("Contacto:");
        jlAppointmentPerson.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlAppointmentPerson);
        jPanel34.add(moTextAppointmentPerson);

        jPanel4.add(jPanel34);

        jPanel1.add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jpPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas:"));
        jpPanel10.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbAddDocument.setText("Agregar doc.");
        jbAddDocument.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jbAddDocument);

        jbShipmentAll.setText("Emb. todo");
        jbShipmentAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jbShipmentAll);

        jbShipmentClear.setText("Limpiar");
        jbShipmentClear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jbShipmentClear);

        jpPanel10.add(jPanel7, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpPanel10, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbAddDocument;
    private javax.swing.JButton jbShipmentAll;
    private javax.swing.JButton jbShipmentClear;
    private javax.swing.JCheckBox jckDelivery;
    private javax.swing.JLabel jlAppointmentNumber;
    private javax.swing.JLabel jlAppointmentPerson;
    private javax.swing.JLabel jlAppointmentTime;
    private javax.swing.JLabel jlCustomer;
    private javax.swing.JLabel jlCustomerBranch;
    private javax.swing.JLabel jlCustomerBranchAddress;
    private javax.swing.JLabel jlDateDelivery;
    private javax.swing.JLabel jlDateDeliveryReal;
    private javax.swing.JLabel jlDocShipmentType;
    private javax.swing.JLabel jlSpot;
    private javax.swing.JLabel jlSpotType;
    private javax.swing.JLabel jlWarehouseCompanyBranch;
    private javax.swing.JLabel jlWarehouseEntity;
    private javax.swing.JPanel jpPanel10;
    private sa.lib.gui.bean.SBeanFieldDatetime moDateAppointmentTime;
    private sa.lib.gui.bean.SBeanFieldDate moDateDelivery;
    private sa.lib.gui.bean.SBeanFieldDate moDateDeliveryReal;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCustomer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCustomerBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCustomerBranchAddress;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDocShipmentType;
    private sa.lib.gui.bean.SBeanFieldKey moKeySpot;
    private sa.lib.gui.bean.SBeanFieldKey moKeySpotType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseCompanyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseEntity;
    private sa.lib.gui.bean.SBeanFieldText moTextAppointmentNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextAppointmentPerson;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        mnShipmentType = SLibConsts.UNDEFINED;
        mnFkShipmentCobId = SLibConsts.UNDEFINED;
        mtShipmentDate = null;

        moDiogSource = null;
        moDiogDestiny = null;
        maShipmentDestinyEntry = null;

        //msSpotTypeMsg = "";

        moFormDialogShipmentDps = new SFormDialogShipmentDps(miClient, "Documentos de venta");
        moFormDialogShipmentDiog = new SFormDialogShipmentDiog(miClient, "Traspasos de inventario");

        moFieldKeySpotGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyCustomerGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyEntityGroup = new SGuiFieldKeyGroup(miClient);

        moKeyDocShipmentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlDocShipmentType), true);
        moKeySpotType.setKeySettings(miClient, SGuiUtils.getLabelName(jlSpotType), true);
        moKeySpot.setKeySettings(miClient, SGuiUtils.getLabelName(jlSpot), true);
        moDateDelivery.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateDelivery), true);
        moDateDeliveryReal.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateDeliveryReal), true);
        moKeyCustomer.setKeySettings(miClient, SGuiUtils.getLabelName(jlCustomer), false);
        moKeyCustomerBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlCustomerBranch), false);
        moKeyCustomerBranchAddress.setKeySettings(miClient, SGuiUtils.getLabelName(jlCustomerBranchAddress), false);
        moKeyWarehouseCompanyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseCompanyBranch), false);
        moKeyWarehouseEntity.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseEntity), false);
        moTextAppointmentNumber.setTextSettings(SGuiUtils.getLabelName(jlAppointmentNumber), 15, 0);
        moDateAppointmentTime.setDateSettings(miClient, SGuiUtils.getLabelName(jlAppointmentTime), true);
        moTextAppointmentPerson.setTextSettings(SGuiUtils.getLabelName(jlAppointmentPerson), 50, 0);

        moFields.addField(moKeyDocShipmentType);
        moFields.addField(moKeySpotType);
        moFields.addField(moKeySpot);
        moFields.addField(moDateDelivery);
        moFields.addField(moDateDeliveryReal);
        moFields.addField(moKeyCustomer);
        moFields.addField(moKeyCustomerBranch);
        moFields.addField(moKeyCustomerBranchAddress);
        moFields.addField(moKeyWarehouseCompanyBranch);
        moFields.addField(moKeyWarehouseEntity);
        moFields.addField(moTextAppointmentNumber);
        moFields.addField(moDateAppointmentTime);
        moFields.addField(moTextAppointmentPerson);

        moFields.setFormButton(jbSave);

        moGridEntries = new SGridPaneForm(miClient, SModConsts.LOG_SHIP_DEST_ETY, SLibConsts.UNDEFINED, "Partidas") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                int col = 0;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm[] columns = new SGridColumnForm[16];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo doc");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio doc");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha doc");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Ítem código");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant original");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant ajustada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant embarcada");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant pendiente");
                columns[col] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant actual");
                columns[col++].setEditable(true);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Volumen m3");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Masa kg");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso bruto");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Peso flete");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");

                gridColumnsForm.addAll(Arrays.asList((SGridColumnForm[]) columns));

                return gridColumnsForm;
            }

            @Override
            public void actionRowDelete() {

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    SGridRow gridRow = moGridEntries.getSelectedGridRow(); //getGridRows().get(moGridStockDays.getTable().getSelectedRow());

                    if (gridRow.isRowSystem()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                    }
                    else if (!gridRow.isRowDeletable()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                    }
                    else {
                        super.actionRowDelete();
                        removeFromArrayListDestinies((SDbShipmentDestinyEntry) gridRow);
                        actionGridChanged();
                    }
                }
            }
        };

        //mvFormGrids.add(moGridEntries);
        //moFormDialogShipmentDps = new SFormDialogShipmentDps(miClient, "Partida");
        moGridEntries.setForm(null);
        moGridEntries.setPaneFormOwner(null);

        jpPanel10.add(moGridEntries, BorderLayout.CENTER);
    }

    /*
     * Private methods:
     */

    private void computeDps() {
        SDataDps dps = null;

        try {
            moRegistry.computeDps(miClient.getSession(), manPrimaryKeyDps);
            populateEntries();

            dps = new SDataDps();
            dps.read(manPrimaryKeyDps, miClient.getSession().getDatabase().getConnection().createStatement());
            mnFkShipmentCobId = dps.getFkCompanyBranchId();

            moKeyCustomer.setValue(new int[] { dps.getFkBizPartnerId_r() } );
            moKeyCustomerBranch.setValue(new int[] { dps.getFkBizPartnerBranchId() } );
            moKeyCustomerBranchAddress.setValue(new int[] { dps.getFkBizPartnerBranchId(), dps.getFkBizPartnerBranchAddressId() } );

            if (moKeyCustomer.getSelectedIndex() <= 0) {

                miClient.showMsgBoxInformation("El cliente está eliminado.");
            }
            else if (moKeyCustomerBranch.getSelectedIndex() <= 0) {

                miClient.showMsgBoxInformation("La sucursal del cliente está eliminada.");
            }
            else if (moKeyCustomerBranchAddress.getSelectedIndex() <= 0) {

                miClient.showMsgBoxInformation("La domicilio de entrega del cliente está eliminado.");
            }

            actionGridChanged();
        } catch (SQLException e) {
            SLibUtils.showException(this, e);
        } catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void computeDiog() {
        SDataDiog diog = null;

        try {
            moRegistry.computeDiog(miClient.getSession(), manPrimaryKeySourceDiog);
            populateEntries();

            diog = new SDataDiog();
            diog.read(manPrimaryKeyDestinyDiog, miClient.getSession().getDatabase().getConnection().createStatement());
            mnFkShipmentCobId = diog.getFkCompanyBranchId();

            moKeyWarehouseCompanyBranch.setValue(new int[] { diog.getFkCompanyBranchId() } );
            moKeyWarehouseEntity.setValue(new int[] { diog.getFkCompanyBranchId(), diog.getFkWarehouseId() } );

            if (moKeyWarehouseCompanyBranch.getSelectedIndex() <= 0) {

                miClient.showMsgBoxInformation("La sucursal del almacén está eliminada.");
            }
            else if (moKeyWarehouseEntity.getSelectedIndex() <= 0) {

                miClient.showMsgBoxInformation("El almacén está eliminado.");
            }

            actionGridChanged();
        } catch (SQLException e) {
            SLibUtils.showException(this, e);
        } catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

     private void populateEntries() throws SQLException {
        try {
            Vector<SGridRow> vRows = new Vector<>();
            ArrayList<SDbShipmentDestinyEntry> aRows = new ArrayList<>();

            aRows =  moRegistry.getShipmentDestinyEntries();
            for (SDbShipmentDestinyEntry row : aRows) {

                vRows.add(row);
            }

            moGridEntries.populateGrid(vRows);
            moGridEntries.clearSortKeys();
            moGridEntries.setSelectedGridRow(0);

            actionGridChanged();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void removeFromArrayListDestinies(SDbShipmentDestinyEntry row) {
        int i = 0;
        SDbShipmentDestinyEntry entry = null;

        for (i = 0; i < moRegistry.getShipmentDestinyEntries().size(); i++) {
            entry = moRegistry.getShipmentDestinyEntries().get(i);
            if (SLibUtils.compareKeys(
                    new int[] { row.getFkDpsYearId_n(), row.getFkDpsDocId_n(), row.getFkDpsEntryId_n(),
                        row.getFkDiogYearId_n(), row.getFkDiogDocId_n(), row.getFkDiogEntryId_n() },
                    new int[] { entry.getFkDpsYearId_n(), entry.getFkDpsDocId_n(), entry.getFkDpsEntryId_n(),
                        entry.getFkDiogYearId_n(), entry.getFkDiogDocId_n(), entry.getFkDiogEntryId_n()})) {

                moRegistry.getShipmentDestinyEntries().remove(i);
                break;
            }
        }


    }

    private boolean validateDpsRows() {
        boolean result = false;
        SGridRow row = null;

        for (int i = 0; i < moGridEntries.getTable().getRowCount(); i++) {
            row = moGridEntries.getGridRow(i);

            if (((SDbShipmentDestinyEntry) row).getFkDpsYearId_n() == manPrimaryKeyDps[0] &&
                    ((SDbShipmentDestinyEntry) row).getFkDpsDocId_n() == manPrimaryKeyDps[1]) {
                result = true;
                break;
            }
        }

        return result;
    }

    private void actionSupplyDpsEntries() {
        SRowShipmentDpsSupply shipmentDpsSupply = null;

        /*
        if (moKeyCustomer.getSelectedIndex() > 0 && ) {
            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlCustomer) + "'.");
            moKeyCustomer.requestFocus();
        }
        else
        */
        if (moKeyCustomer.getSelectedIndex() > 0 && moKeyCustomerBranch.getSelectedIndex() <= 0) {
            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlCustomerBranch) + "'.");
            moKeyCustomerBranch.requestFocus();
        }
        else if (moKeyCustomer.getSelectedIndex() > 0 && moKeyCustomerBranchAddress.getSelectedIndex() <= 0) {
            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlCustomerBranchAddress) + "'.");
            moKeyCustomerBranchAddress.requestFocus();
        }
        else {
            try {
                shipmentDpsSupply = new SRowShipmentDpsSupply();

                moFormDialogShipmentDps.setValue(SModConsts.BPSU_BPB, mnFkShipmentCobId);
                moFormDialogShipmentDps.setValue(SModConsts.BPSU_BP, moKeyCustomer.getSelectedIndex() > 0 ?
                    moKeyCustomer.getValue()[0] : SLibConsts.UNDEFINED);
                moFormDialogShipmentDps.setValue(SModConsts.BPSU_BPB_ADD, moKeyCustomerBranchAddress.getSelectedIndex() > 0 ?
                    moKeyCustomerBranchAddress.getValue() : null);
                moFormDialogShipmentDps.setValue(SModConsts.LOGS_TP_SHIP,
                     mnShipmentType == SModSysConsts.LOGS_TP_SHIP_SHI ?
                     SModSysConsts.TRNU_TP_DPS_SAL_INV : SModSysConsts.TRNU_TP_DPS_SAL_CN);
                moFormDialogShipmentDps.setRegistry(shipmentDpsSupply);
                moFormDialogShipmentDps.setVisible(true);

                if (moFormDialogShipmentDps.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                    manPrimaryKeyDps = (int[]) moFormDialogShipmentDps.getValue(SModConsts.TRN_DPS);
                    if (manPrimaryKeyDps != null) {
                        if (!validateDpsRows()) {

                            computeDps();
                        }
                        else {

                            miClient.showMsgBoxInformation("El documento que desea agregar ya existe.");
                        }
                    }
                }
            } catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private boolean validateDiogRows() {
        boolean result = false;
        SGridRow row = null;

        for (int i = 0; i < moGridEntries.getTable().getRowCount(); i++) {
            row = moGridEntries.getGridRow(i);

            if (((SDbShipmentDestinyEntry) row).getFkDiogYearId_n() == manPrimaryKeySourceDiog[0] &&
                    ((SDbShipmentDestinyEntry) row).getFkDiogDocId_n() == manPrimaryKeySourceDiog[1]) {
                result = true;
                break;
            }
        }

        return result;
    }

    private void actionSupplyDiogEntries() {
        SRowShipmentDiogSupply shipmentDiogSupply = null;

        /*
        if (moKeyWarehouseCompanyBranch.getSelectedIndex() <= 0) {

            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlWarehouseCompanyBranch) + "'.");
            moKeyWarehouseCompanyBranch.requestFocus();
        }
        else
        */
        if (moKeyWarehouseCompanyBranch.getSelectedIndex() > 0 && moKeyWarehouseEntity.getSelectedIndex() <= 0) {

            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlWarehouseEntity) + "'.");
            moKeyWarehouseEntity.requestFocus();
        }
        else {

            try {
                shipmentDiogSupply = new SRowShipmentDiogSupply();

                moFormDialogShipmentDiog.setValue(SModConsts.BPSU_BPB, mnFkShipmentCobId);
                moFormDialogShipmentDiog.setValue(SModConsts.CFGU_COB_ENT, moDiogSource != null ?
                        (new int[] { moDiogSource.getFkCompanyBranchId(), moDiogSource.getFkWarehouseId() } ) : null);
                moFormDialogShipmentDiog.setRegistry(shipmentDiogSupply);
                moFormDialogShipmentDiog.setVisible(true);

                if (moFormDialogShipmentDiog.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                    manPrimaryKeySourceDiog = (int[]) moFormDialogShipmentDiog.getValue(SModConsts.TRN_DIOG);
                    if (manPrimaryKeySourceDiog != null) {

                        validateSpotCobEntityDiog(manPrimaryKeySourceDiog);
                        if (mbCanShowForm) {
                            if (!validateDiogRows()) {
                                computeDiog();
                            }
                            else {
                                miClient.showMsgBoxInformation("El documento que desea agregar ya existe.");
                            }
                        }
                        else {
                            miClient.showMsgBoxInformation(msCanShowFormMessage);
                        }
                    }
                }
            } catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    /*
    private void enabledButtonsFieldsByDelivery() {

        moKeyDocShipmentType.setEnabled(false);
        if (mnShipmentType == SModSysConsts.LOGS_TP_SHIP_REC) {

            jbDiog.setEnabled(false);
            moKeyWarehouseCompanyBranch.setEnabled(false);
            moKeyWarehouseEntity.setEnabled(false);

            jbDps.setEnabled(true);
            moKeyCustomer.setEnabled(true);
            moKeyCustomerBranch.setEnabled(true);
            moKeyCustomerBranchAddress.setEnabled(true);
        }
        else if (mnShipmentType == SModSysConsts.LOGS_TP_SHIP_SHI) {

            jbDiog.setEnabled(true);
            moKeyWarehouseCompanyBranch.setEnabled(true);
            moKeyWarehouseEntity.setEnabled(true);

            jbDps.setEnabled(true);
            moKeyCustomer.setEnabled(true);
            moKeyCustomerBranch.setEnabled(true);
            moKeyCustomerBranchAddress.setEnabled(true);
        }
    }
    */

    /*
    private void enabledButtonsFields() {

        if (manPrimaryKeyDps != null) {

            jbDps.setEnabled(true);
            moKeyCustomer.setEnabled(false);
            moKeyCustomerBranch.setEnabled(true);
            moKeyCustomerBranchAddress.setEnabled(true);

            jbDiog.setEnabled(false);
            moKeyWarehouseCompanyBranch.setEnabled(false);
            moKeyWarehouseEntity.setEnabled(false);
        }
        else {
            enabledButtonsFieldsByDelivery();
        }

        if (manPrimaryKeyDiog != null) {

            jbDiog.setEnabled(true);
            moKeyWarehouseCompanyBranch.setEnabled(false);
            moKeyWarehouseEntity.setEnabled(false);

            jbDps.setEnabled(false);
            moKeyCustomer.setEnabled(false);
            moKeyCustomerBranch.setEnabled(false);
            moKeyCustomerBranchAddress.setEnabled(false);
        }
        else {
            enabledButtonsFieldsByDelivery();
        }
    }
    */

    private void actionItemStateChangedDocShipmentType() {

        switch(mnShipmentType) {
            case SModSysConsts.LOGS_TP_SHIP_SHI:
                if (moKeyDocShipmentType.getSelectedIndex() > 0) {
                    switch (moKeyDocShipmentType.getValue()[0]) {

                        case SModSysConsts.LOGS_TP_DOC_SHIP_DPS:
                            moKeyCustomer.setEnabled(true);
                            moKeyCustomerBranch.setEnabled(true);
                            moKeyCustomerBranchAddress.setEnabled(true);

                            moKeyWarehouseCompanyBranch.setEnabled(false);
                            moKeyWarehouseEntity.setEnabled(false);
                            break;

                        case SModSysConsts.LOGS_TP_DOC_SHIP_IOG:
                            moKeyCustomer.setEnabled(false);
                            moKeyCustomerBranch.setEnabled(false);
                            moKeyCustomerBranchAddress.setEnabled(false);

                            moKeyWarehouseCompanyBranch.setEnabled(false);
                            moKeyWarehouseEntity.setEnabled(false);
                            break;

                        default:
                    }
                }
                else {

                    moKeyCustomer.setEnabled(false);
                    moKeyCustomerBranch.setEnabled(false);
                    moKeyCustomerBranchAddress.setEnabled(false);

                    moKeyWarehouseCompanyBranch.setEnabled(false);
                    moKeyWarehouseEntity.setEnabled(false);
                }
                break;

            case SModSysConsts.LOGS_TP_SHIP_REC:
                if (moKeyDocShipmentType.getSelectedIndex() > 0) {

                    moKeyDocShipmentType.setValue(new int[] { SModSysConsts.LOGS_TP_DOC_SHIP_DPS });
                    moKeyCustomer.setEnabled(true);
                    moKeyCustomerBranch.setEnabled(true);
                    moKeyCustomerBranchAddress.setEnabled(true);

                    moKeyWarehouseCompanyBranch.setEnabled(false);
                    moKeyWarehouseEntity.setEnabled(false);

                    moKeyDocShipmentType.setEnabled(false);
                }
                break;

            default:
        }

        if (!moKeyCustomer.isEnabled()) {

            if (moKeyCustomer.getSelectedIndex() > 0) {
                moKeyCustomer.setSelectedIndex(0);
            }
        }

        if (!moKeyWarehouseCompanyBranch.isEnabled()) {

            if (moKeyWarehouseCompanyBranch.getSelectedIndex() > 0) {
                moKeyWarehouseCompanyBranch.setSelectedIndex(0);
            }
        }
    }

    private void actionGridChanged() {
        if (moGridEntries.getTable().getRowCount() > 0) {

            moKeyDocShipmentType.setEnabled(false);

            moKeyCustomer.setEnabled(false);
            moKeyCustomerBranch.setEnabled(false);
            moKeyCustomerBranchAddress.setEnabled(false);

            moKeyWarehouseCompanyBranch.setEnabled(false);
            moKeyWarehouseEntity.setEnabled(false);
        }
        else {
            moDiogSource = null;

            moKeyDocShipmentType.setEnabled(true);
            actionItemStateChangedDocShipmentType();
        }
    }

    private boolean assignSpotCob(int nPkCobId) {
        boolean result = true;
        int nFkSpotId = 0;
        int nFkTypeSpotId = 0;

        SDbSpot spot = null;
        SDbSpotCompanyBranch spotCob = new SDbSpotCompanyBranch();

        try {
            nFkSpotId = (Integer) spotCob.readField(miClient.getSession().getStatement(), new int[] { nPkCobId }, spotCob.FIELD_FK_SPOT);
            if (nFkSpotId > 0) {

                spot = new SDbSpot();
                nFkTypeSpotId = (Integer) spot.readField(miClient.getSession().getStatement(), new int[] { nFkSpotId }, spot.FIELD_FK_TP_SPOT);
                if (nFkTypeSpotId > 0) {

                    //moKeySpotType.setValue(new int[] { nFkTypeSpotId });
                    //moKeySpot.setValue(new int[] { nFkSpotId } );
                }
                else {
                    result = false;
                }
            }
            else {
                result = false;
            }
        }
        catch (Exception e) {
            result = false;
        }

        return result;
    }

    private boolean assignSpotCobEntity(int nPkCobId, int nPkEntityId) {
        boolean result = true;
        int nFkSpotId = 0;
        int nFkTypeSpotId = 0;

        SDbSpot spot = null;
        SDbSpotCompanyBranchEntity spotCobEntity = new SDbSpotCompanyBranchEntity();

        try {
            nFkSpotId = (Integer) spotCobEntity.readField(miClient.getSession().getStatement(), new int[] { nPkCobId, nPkEntityId }, spotCobEntity.FIELD_FK_SPOT);
            if (nFkSpotId > 0) {

                spot = new SDbSpot();
                nFkTypeSpotId = (Integer) spot.readField(miClient.getSession().getStatement(), new int[] { nFkSpotId }, spot.FIELD_FK_TP_SPOT);
                if (nFkTypeSpotId > 0) {

                    //moKeySpotType.setValue(new int[] { nFkTypeSpotId });
                    //moKeySpot.setValue(new int[] { nFkSpotId } );
                }
                else {
                    result = false;
                }
            }
            else {
                result = false;
            }
        } catch (SQLException e) {
            result = false;
        } catch (Exception e) {
            result = false;
        }

        return result;
    }

    private void validateSpotCobEntityDiog(int[] pkDiog) {
        SDataDiog[] diogTransfer = null;

        diogTransfer = moRegistry.readDiogSourceDestiny(miClient.getSession(), (int[]) pkDiog);
        moDiogSource = diogTransfer[0];
        if (moDiogSource != null) {

            manPrimaryKeySourceDiog = new int[] { moDiogSource.getPkYearId(), moDiogSource.getPkDocId() };
            if (!assignSpotCobEntity(moDiogSource.getFkCompanyBranchId(), moDiogSource.getFkWarehouseId())) {
                msCanShowFormMessage = "No se encontró la configuración del lugar de la sucursal del mov. inv. de salida.";
                mbCanShowForm = false;
            }
        }
        else {
            msCanShowFormMessage = "No se encontró el documento de traspaso de inv. de salida.";
            mbCanShowForm = false;
        }

        if (mbCanShowForm) {

            moDiogDestiny = diogTransfer[1];
            if (moDiogDestiny != null) {

                manPrimaryKeyDestinyDiog = new int[] { moDiogDestiny.getPkYearId(), moDiogDestiny.getPkDocId() };
                if (!assignSpotCobEntity(moDiogDestiny.getFkCompanyBranchId(), moDiogDestiny.getFkWarehouseId())) {
                    msCanShowFormMessage = "No se encontró la configuración del lugar de la sucursal del mov. inv. de entrada.";
                    mbCanShowForm = false;
                }
            }
            else {
                msCanShowFormMessage = "No se encontró el documento de traspaso de inv. de entrada.";
                mbCanShowForm = false;
            }
        }
    }

    private void validateSpotCobDps(int[] pkDps) {
        SDataDps dps = new SDataDps();

        dps.read(pkDps, miClient.getSession().getStatement());
        if (dps != null) {

            manPrimaryKeyDps = new int[] { dps.getPkYearId(), dps.getPkDocId() };
            if (!assignSpotCob(dps.getFkCompanyBranchId())) {
                msCanShowFormMessage = "No se encontró la configuración del lugar de la sucursal del doc. de ventas.";
                mbCanShowForm = false;
            }
        }
        else {
            msCanShowFormMessage = "No se encontró el documento de doc. de ventas.";
            mbCanShowForm = false;
        }
    }

    private void actionAddDocument() {
        if (moKeyDocShipmentType.getSelectedIndex() <= 0) {
            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDocShipmentType) + "'.");
            moKeyDocShipmentType.requestFocus();
        }
        else if (jbAddDocument.isEnabled()) {
            switch (moKeyDocShipmentType.getValue()[0]) {
                case SModSysConsts.LOGS_TP_DOC_SHIP_DPS:
                    actionSupplyDpsEntries();
                    break;
                case SModSysConsts.LOGS_TP_DOC_SHIP_IOG:
                    actionSupplyDiogEntries();
                    break;
                default:
            }
        }
    }

    private void actionShipmentAll(boolean assignAll) {
        SDbShipmentDestinyEntry entry = null;

        if (moGridEntries.getTable().getRowCount() > 0) {
            for (int i = 0; i < moGridEntries.getTable().getRowCount(); i++) {

                entry = (SDbShipmentDestinyEntry) moGridEntries.getGridRow(i);
                entry.setQuantity(assignAll ? (entry.getXtaShipmentQuantity() + entry.getXtaShipmentQuantityPending()) : 0);
                moGridEntries.setGridRow(entry, i);
            }

            moGridEntries.renderGridRows();
            moGridEntries.clearSortKeys();
            moGridEntries.setSelectedGridRow(0);
        }
    }

    private void computeShipmentDestiny(SParamsShipment paramsShipment) {

        if (mbCanShowForm) {

            mnShipmentType = paramsShipment.getFkShipmentTypeId();

            if (moKeyDocShipmentType.getSelectedIndex() <= 0) {
                moKeyDocShipmentType.setValue(new int[] { paramsShipment.getFkDocShipmentTypeId() });
            }

            moFieldKeySpotGroup.initGroup();
            moFieldKeySpotGroup.addFieldKey(moKeySpotType, SModConsts.LOGS_TP_SPOT, SLibConsts.UNDEFINED, null);
            moFieldKeySpotGroup.addFieldKey(moKeySpot, SModConsts.LOGU_SPOT, paramsShipment.getFkDeliveryTypeId(), null);
            moFieldKeySpotGroup.populateCatalogues();

            if (moKeySpotType.getSelectedIndex() <= 0) {
                moKeySpotType.setValue(new int[] { paramsShipment.getFkSpotTypeId() });

                if (moKeySpot.getSelectedIndex() <= 0) {
                    moKeySpot.setValue(new int[] { paramsShipment.getFkSpotId() });
                }
            }

            if (paramsShipment.getFkDpsYearId() > 0 && paramsShipment.getFkDpsDocId() > 0) {
                validateSpotCobDps(new int[] { paramsShipment.getFkDpsYearId(), paramsShipment.getFkDpsDocId() });
            }
            else if (paramsShipment.getFkDiogYearId() > 0 && paramsShipment.getFkDiogDocId() > 0) {
                validateSpotCobEntityDiog(new int[] { paramsShipment.getFkDiogYearId(), paramsShipment.getFkDiogDocId() });
            }
            else {
                mnFkShipmentCobId = paramsShipment.getFkShipmentCobId();
            }

            if (manPrimaryKeyDps != null) {
                computeDps();
            }
            else if (manPrimaryKeySourceDiog != null) {
                computeDiog();
            }

            actionItemStateChangedDocShipmentType();
            //moKeySpotType.requestFocus();
            actionGridChanged();

            mtShipmentDate = paramsShipment.getDate();

            jbSave.setEnabled(paramsShipment.getSave());
        }

        /*
        if (!msSpotTypeMsg.isEmpty()) {
            miClient.showMsgBoxInformation(msSpotTypeMsg);
            actionCancel();
        }
        else {
            //enabledButtonsFields();

        }
        */
    }

    private void actionItemStateChangeKeyCustomer() {
        if (moKeyCustomer.getSelectedIndex() <= 0 && moKeyCustomer.getItemCount() == 1) {
            moKeyCustomer.setSelectedIndex(1);
        }
    }

    private void actionItemStateChangeKeyCustomerBranch() {
        if (moKeyCustomerBranch.getSelectedIndex() <= 0 && moKeyCustomerBranch.getItemCount() == 1) {
            moKeyCustomerBranch.setSelectedIndex(1);
        }
    }

    private void actionItemStateChangeKeyCustomerBranchAddress() {
        if (moKeyCustomerBranchAddress.getSelectedIndex() <= 0 && moKeyCustomerBranchAddress.getItemCount() == 1) {
            moKeyCustomerBranchAddress.setSelectedIndex(1);
        }
    }

    private void actionItemStateChangeKeyWarehouseCompanyBranch() {
        if (moKeyWarehouseCompanyBranch.getSelectedIndex() <= 0 && moKeyWarehouseCompanyBranch.getItemCount() == 1) {
            moKeyWarehouseCompanyBranch.setSelectedIndex(1);
        }
    }

    private void actionItemStateChangeKeyWarehouseEntity() {
        if (moKeyWarehouseEntity.getSelectedIndex() <= 0 && moKeyWarehouseEntity.getItemCount() == 1) {
            moKeyWarehouseEntity.setSelectedIndex(1);
        }
    }

     /*
     * Public methods:
     */

/*
    @Override
    protected void windowActivated() {
        //super.windowActivated();

        if (mbFirstActivation) {

            if (!msSpotTypeMsg.isEmpty()) {
                miClient.showMsgBoxInformation(msSpotTypeMsg);
                actionCancel();
            }
            else {
                //enabledButtonsFields();
                if (manPrimaryKeyDps != null) {
                    computeDps();
                }
                else if (manPrimaryKeyDestinyDiog != null) {
                    computeDiog();
                }
            }

            actionItemStateChangedDocShipmentType();
            moKeySpotType.requestFocus();
            actionGridChanged();

            mbFirstActivation = false;
        }
    }
*/

    @Override
    public void addAllListeners() {
        moKeyDocShipmentType.addItemListener(this);
        moKeySpotType.addItemListener(this);
        moKeySpot.addItemListener(this);
        moKeyCustomer.addItemListener(this);
        moKeyCustomerBranch.addItemListener(this);
        moKeyCustomerBranchAddress.addItemListener(this);
        moKeyWarehouseCompanyBranch.addItemListener(this);
        moKeyWarehouseEntity.addItemListener(this);
        jbAddDocument.addActionListener(this);
        jbShipmentAll.addActionListener(this);
        jbShipmentClear.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyDocShipmentType.removeItemListener(this);
        moKeySpotType.removeItemListener(this);
        moKeySpot.removeItemListener(this);
        moKeyCustomer.removeItemListener(this);
        moKeyCustomerBranch.removeItemListener(this);
        moKeyCustomerBranchAddress.removeItemListener(this);
        moKeyWarehouseCompanyBranch.removeItemListener(this);
        moKeyWarehouseEntity.removeItemListener(this);
        jbAddDocument.removeActionListener(this);
        jbShipmentAll.removeActionListener(this);
        jbShipmentClear.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            miClient.getSession().populateCatalogue(moKeyDocShipmentType, SModConsts.LOGS_TP_DOC_SHIP, SLibConsts.UNDEFINED, null);

            moFieldKeySpotGroup.initGroup();
            moFieldKeySpotGroup.addFieldKey(moKeySpotType, SModConsts.LOGS_TP_SPOT, SLibConsts.UNDEFINED, null);
            moFieldKeySpotGroup.addFieldKey(moKeySpot, SModConsts.LOGU_SPOT, SLibConsts.UNDEFINED, null);
            moFieldKeySpotGroup.populateCatalogues();

            moFieldKeyCustomerGroup.initGroup();
            moFieldKeyCustomerGroup.addFieldKey(moKeyCustomer, SModConsts.BPSU_BP, SLibConsts.UNDEFINED, new SGuiParams(new int[] { SModSysConsts.BPSS_CT_BP_CUS }));
            moFieldKeyCustomerGroup.addFieldKey(moKeyCustomerBranch, SModConsts.BPSU_BPB, SLibConsts.UNDEFINED, null);
            moFieldKeyCustomerGroup.addFieldKey(moKeyCustomerBranchAddress, SModConsts.BPSU_BPB_ADD, SLibConsts.UNDEFINED, null);
            moFieldKeyCustomerGroup.populateCatalogues();

            moFieldKeyEntityGroup.initGroup();
            moFieldKeyEntityGroup.addFieldKey(moKeyWarehouseCompanyBranch, SModConsts.BPSU_BPB, SLibConsts.UNDEFINED, new SGuiParams(new int[] { miClient.getSession().getConfigCompany().getCompanyId() }));
            moFieldKeyEntityGroup.addFieldKey(moKeyWarehouseEntity, SModConsts.CFGU_COB_ENT, SLibConsts.UNDEFINED,
                    new SGuiParams(new int[] { ((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey()[0],
                        SModSysConsts.CFGS_CT_ENT_WH }));
            moFieldKeyEntityGroup.populateCatalogues();

            populateEntries();
        } catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        SDbShipmentDestinyEntry destinyEntry = null;
        moRegistry = (SDbShipmentDestiny) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mnFkShipmentCobId = SLibConsts.UNDEFINED;
        mnShipmentType = SLibConsts.UNDEFINED;

        moDiogSource = null;
        moDiogDestiny = null;
        maShipmentDestinyEntry = new ArrayList<SDbShipmentDestinyEntry>();

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyDocShipmentType.setValue(new int[] { moRegistry.getFkDocShipmentTypeId() });
        moKeySpotType.setValue(new int[] { moRegistry.getFkSpotTypeId() });
        moKeySpot.setValue(new int[] { moRegistry.getFkSpotId() });
        moDateDelivery.setValue(moRegistry.getDateDelivery());
        moDateDeliveryReal.setValue(moRegistry.getDateDeliveryReal());
        moKeyCustomer.setValue(new int[] { moRegistry.getFkCustomerId_n() });
        moKeyCustomerBranch.setValue(new int[] { moRegistry.getFkCustomerBranchId_n() });
        moKeyCustomerBranchAddress.setValue(new int[] { moRegistry.getFkCustomerBranchId_n(), moRegistry.getFkCustomerBranchAddressId_n() });
        moKeyWarehouseCompanyBranch.setValue(new int[] { moRegistry.getFkWarehouseCompanyBranchId_n() });
        moKeyWarehouseEntity.setValue(new int[] { moRegistry.getFkWarehouseCompanyBranchId_n(), moRegistry.getFkWarehouseEntityId_n() });
        moTextAppointmentNumber.setValue(moRegistry.getAppointmentNumber());
        moDateAppointmentTime.setValue(moRegistry.getAppointmentTime() != null ? moRegistry.getAppointmentTime() : miClient.getSession().getCurrentDate());
        moTextAppointmentPerson.setValue(moRegistry.getAppointmentPerson());

        setFormEditable(true);
        if (moRegistry.isRegistryNew()) {

            if (moRegistry.getFkSpotTypeId() == SLibConsts.UNDEFINED) {
                moFieldKeySpotGroup.resetGroup();
            }

            if (moRegistry.getFkCustomerId_n() == SLibConsts.UNDEFINED) {
                moFieldKeyCustomerGroup.resetGroup();
            }

            if (moRegistry.getFkWarehouseCompanyBranchId_n() == SLibConsts.UNDEFINED) {
                moFieldKeyEntityGroup.resetGroup();
            }

            if (moRegistry.getFkDocShipmentTypeId() == SLibConsts.UNDEFINED) {

                moDateDelivery.setValue(miClient.getSession().getCurrentDate());
                moDateDeliveryReal.setValue(miClient.getSession().getCurrentDate());
            }
        }

        jckDelivery.setEnabled(false);
        jbAddDocument.setEnabled(true);

        manPrimaryKeySourceDiog = null;
        manPrimaryKeyDestinyDiog = null;
        manPrimaryKeyDps = null;

        for (SDbShipmentDestinyEntry entry : moRegistry.getShipmentDestinyEntries()) {
            destinyEntry = entry.clone();
            maShipmentDestinyEntry.add(destinyEntry);
        }

        actionItemStateChangedDocShipmentType();
        actionGridChanged();
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbShipmentDestiny registry = moRegistry.clone();
        SDbShipmentDestinyEntry entry = null;

        if (registry.isRegistryNew()) {}

        registry.setFkDocShipmentTypeId(moKeyDocShipmentType.getValue()[0]);
        registry.setFkSpotTypeId(moKeySpotType.getValue()[0]);
        registry.setFkSpotId(moKeySpot.getValue()[0]);
        registry.setDateDelivery(moDateDelivery.getValue());
        registry.setDateDeliveryReal(moDateDeliveryReal.getValue());
        registry.setFkCustomerId_n(moKeyCustomer.getSelectedIndex() > 0 ? moKeyCustomer.getValue()[0] : 0);
        registry.setFkCustomerBranchId_n(moKeyCustomerBranch.getSelectedIndex() > 0 ? moKeyCustomerBranch.getValue()[0] : 0);
        registry.setFkCustomerBranchAddressId_n(moKeyCustomerBranchAddress.getSelectedIndex() > 0 ? moKeyCustomerBranchAddress.getValue()[1] : 0);
        registry.setFkWarehouseCompanyBranchId_n(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getValue()[0] : 0);
        registry.setFkWarehouseEntityId_n(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getValue()[1] : 0);
        registry.setAppointmentNumber(moTextAppointmentNumber.getValue());
        registry.setAppointmentTime(moDateAppointmentTime.getValue());
        registry.setAppointmentPerson(moTextAppointmentPerson.getValue());
        registry.setXtaDocShipmentType(moKeyDocShipmentType.getSelectedItem().getCode());
        registry.setXtaSpotType(moKeySpotType.getSelectedItem().getCode());
        registry.setXtaSpot(moKeySpot.getSelectedItem().getCode());
        registry.setXtaCustomer(moKeyCustomer.getSelectedIndex() > 0 ? moKeyCustomer.getSelectedItem().getItem() : "");
        registry.setXtaCustomerKey(moKeyCustomer.getSelectedIndex() > 0 ? moKeyCustomer.getSelectedItem().getComplement().toString() : "");
        registry.setXtaCustomerBranch(moKeyCustomerBranch.getSelectedIndex() > 0 ? moKeyCustomerBranch.getSelectedItem().getItem() : "");
        registry.setXtaCustomerBranchAddress(moKeyCustomerBranchAddress.getSelectedIndex() > 0 ? moKeyCustomerBranchAddress.getSelectedItem().getItem() : "");
        registry.setXtaWarehouseCompanyBranch(moKeyWarehouseCompanyBranch.getSelectedIndex() > 0 ? moKeyWarehouseCompanyBranch.getSelectedItem().getItem() : "");
        registry.setXtaWarehouseEntity(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getSelectedItem().getItem() : "");

        registry.getShipmentDestinyEntries().clear();
        for (SGridRow row : moGridEntries.getModel().getGridRows()) {

            if (((SDbShipmentDestinyEntry) row).getQuantity() > 0) {
                entry = (SDbShipmentDestinyEntry) row;

                if (entry.getItem() != null) {

                    entry.setMass(entry.getQuantity() * entry.getItem().getMass());
                    entry.setWeightGross(entry.getQuantity() * entry.getItem().getWeightGross());
                    entry.setWeightDelivery(entry.getQuantity() * entry.getItem().getWeightDelivery());
                }
                registry.getShipmentDestinyEntries().add(entry);
            }
        }

        return registry;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {

        switch (type) {
            case SModConsts.LOGX_SHIP_DPS:
            case SModConsts.LOGX_SHIP_DIOG:
                computeShipmentDestiny((SParamsShipment) value);
                break;

            default:
        }
    }

    @Override
    public Object getValue(int type) {
        Object value = null;
        switch (type) {
            case SModConsts.BPSU_BPB:
                value = mnFkShipmentCobId;
                break;

            default:
        }

        return value;
    }

    @Override
    public SGuiValidation validateForm() {
        boolean rowsZero = true;
        SDbShipmentDestinyEntry destinyEntry = null;

        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridEntries.getTable().getRowCount() <= 0) {
                validation.setMessage("Se debe capturar al menos una partida.");
                validation.setComponent(moKeySpotType.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moKeyCustomer.getSelectedIndex() > 0 && moKeyWarehouseCompanyBranch.getSelectedIndex() > 0) {
                validation.setMessage("Sólo se puede guardar información para documento de ventas o traspaso de inventarios.");
                validation.setComponent(moKeyCustomer.getComponent());
            }
        }

        if (validation.isValid()) {
            for (int i = 0; i < moGridEntries.getTable().getRowCount(); i++) {

                destinyEntry = (SDbShipmentDestinyEntry) moGridEntries.getGridRow(i);
                if (destinyEntry.getQuantity() < 0) {

                    validation.setMessage("No se pueden embarcar cantidades menores a cero: " +  "Partida doc.: '" +
                            destinyEntry.getXtaItem() + " (" + destinyEntry.getXtaItemCode() + ") Cantidad: " +
                            SLibUtils.DecimalFormatValue2D.format(destinyEntry.getQuantity()) + " " + destinyEntry.getXtaItemUnit() + "'.");
                    break;
                }
                else if (destinyEntry.getQuantity() > 0) {
                    rowsZero = false;
                }

                if (destinyEntry.getQuantity() > (destinyEntry.getXtaShipmentQuantity() + destinyEntry.getXtaShipmentQuantityPending())) {

                    validation.setMessage("No se puede embarcar una cantidad mayor a la cantidad original (" +
                            SLibUtils.DecimalFormatValue2D.format(destinyEntry.getXtaDoctoQuantity()) + " " + destinyEntry.getXtaItemUnit() + "): \n" +
                            "Partida doc.: '" + destinyEntry.getXtaItem() + " (" + destinyEntry.getXtaItemCode() + ") Cant actual: " +
                            SLibUtils.DecimalFormatValue2D.format(destinyEntry.getQuantity()) + " " +
                            destinyEntry.getXtaItemUnit() + "'.");
                    break;
                }
            }

            if (rowsZero) {

                validation.setMessage("No se pueden embarcar partidas con cantidades en cero.");
                validation.setComponent(moKeySpotType.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moDateDelivery.getValue().before(mtShipmentDate)) {

                validation.setMessage("La '" + SGuiUtils.getLabelName(jlDateDelivery) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + " la 'Fecha del embarque'.");
                validation.setComponent(moDateDelivery.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moDateDeliveryReal.getValue().before(mtShipmentDate)) {

                validation.setMessage("La '" + SGuiUtils.getLabelName(jlDateDeliveryReal) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + " la 'Fecha del embarque'.");
                validation.setComponent(moDateDeliveryReal.getComponent());
            }
        }

        if (validation.isValid()) {
            if (moDateAppointmentTime.getValue().before(mtShipmentDate)) {

                validation.setMessage("La '" + SGuiUtils.getLabelName(jlAppointmentTime) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + " la 'Fecha del embarque'.");
                validation.setComponent(((JSpinner.DefaultEditor) moDateAppointmentTime.getComponent().getEditor()).getTextField());
            }
        }

        if (validation.isValid()) {
            if (moDateAppointmentTime.getValue().before(moDateDelivery.getValue())) {

                validation.setMessage("La '" + SGuiUtils.getLabelName(jlAppointmentTime) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + " la '" + SGuiUtils.getLabelName(jlDateDelivery) + "'.");
                validation.setComponent(((JSpinner.DefaultEditor) moDateAppointmentTime.getComponent().getEditor()).getTextField());
            }
        }

        if (validation.isValid()) {
            if (moDateDeliveryReal.getValue().before(moDateDelivery.getValue())) {

                validation.setMessage("La '" + SGuiUtils.getLabelName(jlDateDeliveryReal) + "' " + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + " la '" + SGuiUtils.getLabelName(jlDateDelivery) + "'.");
                validation.setComponent(moDateDeliveryReal.getComponent());
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbAddDocument) {
                actionAddDocument();
            }
            else if (button == jbShipmentAll) {
                actionShipmentAll(true);
            }
            else if (button == jbShipmentClear) {
                actionShipmentAll(false);
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
       if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyDocShipmentType) {
                actionItemStateChangedDocShipmentType();
            }
            else if(comboBox == moKeyCustomer) {
                //actionItemStateChangeKeyCustomer();
            }
            else if(comboBox == moKeyCustomerBranch) {
                //actionItemStateChangeKeyCustomerBranch();
            }
            else if(comboBox == moKeyCustomerBranchAddress) {
                //actionItemStateChangeKeyCustomerBranchAddress();
            }
            else if(comboBox == moKeyWarehouseCompanyBranch) {
                //actionItemStateChangeKeyWarehouseCompanyBranch();
            }
            else if(comboBox == moKeyWarehouseEntity) {
                //actionItemStateChangeKeyWarehouseEntity();
            }

            if (comboBox == moKeyCustomer ||
                    comboBox == moKeyCustomerBranch ||
                    comboBox == moKeyCustomerBranchAddress ||
                    comboBox == moKeyWarehouseCompanyBranch ||
                    comboBox == moKeyWarehouseEntity) {
                actionGridChanged();
            }
         }
    }

    @Override
    public void actionCancel() {
        if (jbCancel.isEnabled()) {

            moRegistry.getShipmentDestinyEntries().clear();
            moRegistry.setShipmentDestinyEntries(maShipmentDestinyEntry);
            mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
            dispose();
        }
    }
}
