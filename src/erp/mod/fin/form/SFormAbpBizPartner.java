/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.mcfg.data.SDataParamsCompany;
import erp.mod.SModConsts;
import erp.mod.fin.db.SAbpRegistry;
import erp.mod.fin.db.SDbAbpBizPartner;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Juan Barajas
 */
public class SFormAbpBizPartner extends sa.lib.gui.bean.SBeanForm implements ActionListener {

    private SDbAbpBizPartner moRegistry;
    private SDialogAbpEntry moDialogAbpEntry;
    private SGridPaneForm moGridAbpSettings;

    /**
     * Creates new form SFormAbpBizPartner
     */
    public SFormAbpBizPartner(SGuiClient client, int formSubtype, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_ABP_BP, formSubtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel21 = new javax.swing.JPanel();
        jlCategory = new javax.swing.JLabel();
        moKeyCategory = new sa.lib.gui.bean.SBeanFieldKey();
        jbSelection = new javax.swing.JButton();
        jbSelectionClean = new javax.swing.JButton();
        jpSettings = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel23.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre: *");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setText("ACCOUNT");
        moTextName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(moTextName);

        jPanel23.add(jPanel4);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCategory.setForeground(new java.awt.Color(0, 0, 255));
        jlCategory.setText("Categoría: *");
        jlCategory.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlCategory);

        moKeyCategory.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel21.add(moKeyCategory);

        jbSelection.setText("Seleccionar");
        jbSelection.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelection.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jbSelection);

        jbSelectionClean.setText("Limpiar");
        jbSelectionClean.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelectionClean.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jbSelectionClean);

        jPanel23.add(jPanel21);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        jpSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de cuentas contables:"));
        jpSettings.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpSettings, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbSelection;
    private javax.swing.JButton jbSelectionClean;
    private javax.swing.JLabel jlCategory;
    private javax.swing.JLabel jlName;
    private javax.swing.JPanel jpSettings;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCategory;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);

        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moKeyCategory.setKeySettings(miClient, SGuiUtils.getLabelName(jlCategory.getText()), true);

        moFields.addField(moTextName);
        moFields.addField(moKeyCategory);

        moFields.setFormButton(jbSave);

        moGridAbpSettings = new SGridPaneForm(miClient, SModConsts.FIN_ABP_BP, SLibConsts.UNDEFINED, "Configuraciones de contabilización") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, true, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                int col = 0;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();
                SGridColumnForm[] columns = new SGridColumnForm[7];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Tipo de cuenta");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "No. de cuenta");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Cuenta contable");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "No. de centro costos");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Centro costos");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Clave ítem");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem");

                gridColumnsForm.addAll(Arrays.asList((SGridColumnForm[]) columns));

                return gridColumnsForm;
            }
        };

        moDialogAbpEntry = new SDialogAbpEntry(miClient, "Configuración cuenta contable");
        moGridAbpSettings.setForm(moDialogAbpEntry);
        mvFormGrids.add(moGridAbpSettings);

        jpSettings.add(moGridAbpSettings, BorderLayout.CENTER);
    }

    private void populateAbpSettings() {
        try {
            Vector<SGridRow> rows = new Vector<SGridRow>();
            HashMap<Integer, SAbpRegistry> rowsMap = moRegistry.getAbpRows(miClient.getSession(), mnFormSubtype);

            if (moKeyCategory.getSelectedIndex() > 0 && !jbSelection.isEnabled()) {
                rowsMap =  moRegistry.getAbpRows(miClient.getSession(), moKeyCategory.getValue()[0]);
            }

            for (SAbpRegistry row : rowsMap.values()) {
                row.setMaskAccount(((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount());
                row.setMaskCostCenter(((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskCostCenter());
                rows.add(row);
            }

            moGridAbpSettings.populateGrid(rows);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionSelection() {
        if (moKeyCategory.getSelectedIndex() == 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlCategory.getText()) + "'");
        }
        else {
            jbSelection.setEnabled(false);
            moKeyCategory.setEnabled(false);
            jbSelectionClean.setEnabled(true);

            populateAbpSettings();
        }
    }

    private void actionSelectionClean() {
        moGridAbpSettings.clearGridRows();

        jbSelection.setEnabled(true);
        moKeyCategory.setEnabled(true);
        jbSelectionClean.setEnabled(false);
    }

    @Override
    public void addAllListeners() {
        jbSelection.addActionListener(this);
        jbSelectionClean.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSelection.removeActionListener(this);
        jbSelectionClean.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyCategory, SModConsts.BPSS_CT_BP, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbAbpBizPartner) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        moTextName.setValue(moRegistry.getName());
        moKeyCategory.setValue(new int[] {  moRegistry.getFkBizPartnerCategoryId() });

        populateAbpSettings();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            jbSelection.setEnabled(true);
            moKeyCategory.setEnabled(true);
        }
        else {
            jbSelection.setEnabled(false);
            moKeyCategory.setEnabled(false);
        }

        jbSelectionClean.setEnabled(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAbpBizPartner registry = moRegistry.clone();
        HashMap<Integer, SAbpRegistry> rowsMap = new HashMap<Integer, SAbpRegistry>();

        if (registry.isRegistryNew()) {}

        registry.setName(moTextName.getValue());
        registry.setFkBizPartnerCategoryId(moKeyCategory.getValue()[0]);

        for (SGridRow row : moGridAbpSettings.getModel().getGridRows()) {
            rowsMap.put(((SAbpRegistry) row).getAccountTypeId(), (SAbpRegistry) row);
        }

        registry.setAbpRows(moKeyCategory.getValue()[0], rowsMap);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridAbpSettings.getModel().getRowCount() == 0) {
                validation.setMessage("Debe al menos tener configurada una cuenta contable.");
                validation.setComponent(moGridAbpSettings);
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbSelection) {
                actionSelection();
            }
            else if (button == jbSelectionClean) {
                actionSelectionClean();
            }
        }
    }
}
