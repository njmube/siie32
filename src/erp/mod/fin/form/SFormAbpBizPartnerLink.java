/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.fin.db.SDbAbpBizPartnerLink;
import java.awt.event.ItemEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Juan Barajas
 */
public class SFormAbpBizPartnerLink extends sa.lib.gui.bean.SBeanForm {

    private SDbAbpBizPartnerLink moRegistry;

    /**
     * Creates new form SFormAbpBizPartnerLink
     */
    public SFormAbpBizPartnerLink(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_ABP_BP_LINK, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jlCategory = new javax.swing.JLabel();
        moKeyCategory = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlAbp = new javax.swing.JLabel();
        moKeyAbp = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel22 = new javax.swing.JPanel();
        jlLink = new javax.swing.JLabel();
        moKeyLink = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel24 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moKeyReference = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel23.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCategory.setForeground(new java.awt.Color(0, 0, 255));
        jlCategory.setText("Categor√≠a: *");
        jlCategory.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlCategory);

        moKeyCategory.setPreferredSize(new java.awt.Dimension(300, 23));
        moKeyCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moKeyCategoryItemStateChanged(evt);
            }
        });
        jPanel25.add(moKeyCategory);

        jPanel23.add(jPanel25);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbp.setForeground(new java.awt.Color(0, 0, 255));
        jlAbp.setText("Paquete contable: *");
        jlAbp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlAbp);

        moKeyAbp.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel21.add(moKeyAbp);

        jPanel23.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLink.setForeground(new java.awt.Color(0, 0, 255));
        jlLink.setText("Tipo referencia: *");
        jlLink.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlLink);

        moKeyLink.setPreferredSize(new java.awt.Dimension(300, 23));
        moKeyLink.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moKeyLinkItemStateChanged(evt);
            }
        });
        jPanel22.add(moKeyLink);

        jPanel23.add(jPanel22);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setForeground(new java.awt.Color(0, 0, 255));
        jlReference.setText("Referencia: *");
        jlReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlReference);

        moKeyReference.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel24.add(moKeyReference);

        jPanel23.add(jPanel24);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moKeyLinkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moKeyLinkItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedLinkType();
        }
    }//GEN-LAST:event_moKeyLinkItemStateChanged

    private void moKeyCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moKeyCategoryItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedCategory();
        }
    }//GEN-LAST:event_moKeyCategoryItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jlAbp;
    private javax.swing.JLabel jlCategory;
    private javax.swing.JLabel jlLink;
    private javax.swing.JLabel jlReference;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbp;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCategory;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLink;
    private sa.lib.gui.bean.SBeanFieldKey moKeyReference;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moKeyCategory.setKeySettings(miClient, SGuiUtils.getLabelName(jlCategory.getText()), true);
        moKeyAbp.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbp.getText()), true);
        moKeyLink.setKeySettings(miClient, SGuiUtils.getLabelName(jlLink.getText()), true);
        moKeyReference.setKeySettings(miClient, SGuiUtils.getLabelName(jlReference.getText()), true);

        moFields.addField(moKeyCategory);
        moFields.addField(moKeyAbp);
        moFields.addField(moKeyLink);
        moFields.addField(moKeyReference);

        moFields.setFormButton(jbSave);
    }

    private void itemStateChangedLinkType() {
        SGuiParams params = null;
        boolean enable = true;

        moKeyReference.removeAllItems();
        moKeyReference.setEnabled(false);
        moKeyReference.setEnabled(false);

        try {
            if (moKeyLink.getSelectedIndex() > 0) {
                params = new SGuiParams(new int[] { moKeyCategory.getValue()[0] });
                switch (moKeyLink.getValue()[0]) {
                    case SModSysConsts.BPSS_LINK_ALL:
                        enable = false;
                        break;
                    case SModSysConsts.BPSS_LINK_BP_TP:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.BPSU_TP_BP, SLibConsts.UNDEFINED, params);
                        break;
                    case SModSysConsts.BPSS_LINK_BP:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.BPSU_BP, SLibConsts.UNDEFINED, params);
                        break;
                    default:
                        enable = false;
                        throw new Exception(SLibConstants.MSG_ERR_UTIL_UNKNOWN_FORM_PICK);
                }

                if (enable) {
                    moKeyReference.setSelectedIndex(0);
                    moKeyReference.setEnabled(true);
                }
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void itemStateChangedCategory() {
        boolean enable = false;

        if (moKeyCategory.getSelectedIndex() > 0) {
            enable = true;

            miClient.getSession().populateCatalogue(moKeyAbp, SModConsts.FIN_ABP_BP, moKeyCategory.getValue()[0], null);
            moKeyLink.setSelectedIndex(0);
        }

        if (enable) {
            moKeyAbp.setSelectedIndex(0);
            moKeyAbp.setEnabled(true);
            moKeyLink.setEnabled(true);
        }
        else {
            moKeyAbp.setSelectedIndex(0);
            moKeyAbp.setEnabled(false);
            moKeyLink.setSelectedIndex(0);
            moKeyLink.setEnabled(false);
        }
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyCategory, SModConsts.BPSS_CT_BP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyLink, SModConsts.BPSS_LINK, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int[] key = null;
        moRegistry = (SDbAbpBizPartnerLink) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        key = moRegistry.getPrimaryKey();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyCategory.setValue(new int[] { moRegistry.getAuxBizPartnerCatId() });
        moKeyAbp.setValue(new int[] { key[0] });
        moKeyLink.setValue(new int[] { key[1] });
        moKeyReference.setValue(new int[] { key[2] });

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moKeyCategory.setEnabled(true);
            moKeyAbp.setEnabled(false);
            moKeyLink.setEnabled(false);
            moKeyReference.setEnabled(false);
        }
        else {
            moKeyCategory.setEnabled(false);
            moKeyAbp.setEnabled(false);
            moKeyLink.setEnabled(false);
            moKeyReference.setEnabled(false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAbpBizPartnerLink registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        moRegistry.setPkAbpBizPartnerId(moKeyAbp.getValue()[0]);
        moRegistry.setPkLinkId(moKeyLink.getValue()[0]);

        switch (moKeyLink.getValue()[0]) {
            case SModSysConsts.BPSS_LINK_ALL:
                moRegistry.setPkReferenceId(SLibConstants.UNDEFINED);
                break;
            default:
                moRegistry.setPkReferenceId(moKeyReference.getValue()[0]);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }
}
