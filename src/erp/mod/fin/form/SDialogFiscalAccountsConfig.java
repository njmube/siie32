/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.fin.db.SFiscalAccount;
import erp.mod.fin.db.SFiscalAccounts;
import erp.mod.fin.db.SFiscalUtils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogFiscalAccountsConfig extends SBeanFormDialog implements ActionListener {

    private SFiscalAccounts moRegistry;
    private SGridPaneForm moGridAccounts;

    /**
     * Creates new form SDialogFiscalAccountsConfig
     */
    public SDialogFiscalAccountsConfig(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FINS_FISCAL_ACC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpAccounts = new javax.swing.JPanel();
        jlAccount = new javax.swing.JLabel();
        jpFiscalAccounts = new javax.swing.JPanel();
        jspFiscalAccount = new javax.swing.JScrollPane();
        jlstFiscalAccount = new javax.swing.JList();
        jlFiscalAccount = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jbAttachFiscalAccount = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jbDetachFiscalAccount = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de código agrupador de cuentas del SAT:"));
        jPanel1.setLayout(new java.awt.BorderLayout(5, 0));

        jpAccounts.setLayout(new java.awt.BorderLayout());

        jlAccount.setText("Catálogo de cuentas contables:");
        jlAccount.setPreferredSize(new java.awt.Dimension(400, 23));
        jpAccounts.add(jlAccount, java.awt.BorderLayout.NORTH);

        jPanel1.add(jpAccounts, java.awt.BorderLayout.LINE_START);

        jpFiscalAccounts.setLayout(new java.awt.BorderLayout(0, 5));

        jspFiscalAccount.setPreferredSize(new java.awt.Dimension(350, 100));

        jlstFiscalAccount.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlstFiscalAccount.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstFiscalAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlstFiscalAccountMouseClicked(evt);
            }
        });
        jspFiscalAccount.setViewportView(jlstFiscalAccount);

        jpFiscalAccounts.add(jspFiscalAccount, java.awt.BorderLayout.CENTER);

        jlFiscalAccount.setText("Código agrupador de cuentas del SAT:");
        jlFiscalAccount.setPreferredSize(new java.awt.Dimension(300, 23));
        jpFiscalAccounts.add(jlFiscalAccount, java.awt.BorderLayout.NORTH);

        jPanel1.add(jpFiscalAccounts, java.awt.BorderLayout.LINE_END);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(1, 5, 0));
        jPanel5.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(1, 5, 0));

        jbAttachFiscalAccount.setText("Asignar código");
        jbAttachFiscalAccount.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbAttachFiscalAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jbAttachFiscalAccount);

        jPanel5.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(1, 5, 0));

        jbDetachFiscalAccount.setText("Quitar código");
        jbDetachFiscalAccount.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbDetachFiscalAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jbDetachFiscalAccount);

        jPanel5.add(jPanel8);

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Tips:");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jLabel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 150));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("1) Se pueden seleccionar varias cuentas contables simultáneamente.\n2) Se puede asignar el código agrupador mediante doble click.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1016)/2, (screenSize.height-588)/2, 1016, 588);
    }// </editor-fold>//GEN-END:initComponents

    private void jlstFiscalAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlstFiscalAccountMouseClicked
        mouseClickedFiscalAccount(evt);
    }//GEN-LAST:event_jlstFiscalAccountMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton jbAttachFiscalAccount;
    private javax.swing.JButton jbDetachFiscalAccount;
    private javax.swing.JLabel jlAccount;
    private javax.swing.JLabel jlFiscalAccount;
    private javax.swing.JList jlstFiscalAccount;
    private javax.swing.JPanel jpAccounts;
    private javax.swing.JPanel jpFiscalAccounts;
    private javax.swing.JScrollPane jspFiscalAccount;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1000, 600);

        moGridAccounts = new SGridPaneForm(miClient, SModConsts.FIN_ACC, SModConsts.FINS_FISCAL_ACC, "Cuentas contables") {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
                removePanelCommands();
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. cuenta contable"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Cuenta contable", 175));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Código agrupador SAT", 175));

                return columns;
            }
        };

        jpAccounts.add(moGridAccounts, BorderLayout.CENTER);
    }

    private void mouseClickedFiscalAccount(MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            actionAttachFiscalAccount();
        }
    }

    private void actionAttachFiscalAccount() {
        int index = 0;
        SGridRow[] rows = null;
        SGuiItem item = null;
        SFiscalAccount fiscalAccount = null;

        if (jlstFiscalAccount.getSelectedValue() == null) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlFiscalAccount) + "'.");
        }
        else if (!(Boolean) ((SGuiItem) jlstFiscalAccount.getSelectedValue()).getComplement()) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlFiscalAccount) + "'.");
        }
        else if (moGridAccounts.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlAccount) + "'.");
        }
        else {
            rows = moGridAccounts.getSelectedGridRows();
            item = (SGuiItem) jlstFiscalAccount.getSelectedValue();

            for (SGridRow row : rows) {
                fiscalAccount = (SFiscalAccount) row;
                fiscalAccount.setFkFiscalAccountId(item.getPrimaryKey()[0]);
                fiscalAccount.setFiscalAccountName(item.getItem());
                fiscalAccount.setRowEdited(true);
            }

            index = moGridAccounts.getTable().getSelectedRow();
            moGridAccounts.renderGridRows();
            moGridAccounts.getTable().setRowSelectionInterval(index, index);
        }
    }

    private void actionDetachFiscalAccount() {
        int index = 0;
        SGridRow[] rows = null;
        SFiscalAccount fiscalAccount = null;

        if (moGridAccounts.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlAccount) + "'.");
        }
        else {
            rows = moGridAccounts.getSelectedGridRows();

            for (SGridRow row : rows) {
                fiscalAccount = (SFiscalAccount) row;
                fiscalAccount.setFkFiscalAccountId(SModSysConsts.FINS_FISCAL_ACC_NA);
                fiscalAccount.setFiscalAccountName(SFiscalUtils.createFiscalAccountNameNotApplicable());
                fiscalAccount.setRowEdited(true);
            }

            index = moGridAccounts.getTable().getSelectedRow();
            moGridAccounts.renderGridRows();
            moGridAccounts.getTable().setRowSelectionInterval(index, index);
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbAttachFiscalAccount.addActionListener(this);
        jbDetachFiscalAccount.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbAttachFiscalAccount.removeActionListener(this);
        jbDetachFiscalAccount.removeActionListener(this);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void reloadCatalogues() {
        Vector<SGuiItem> items = null;
        ArrayList<SFiscalAccount> fiscalAccounts = null;

        try {
            items = miClient.getSession().readItems(SModConsts.FINS_FISCAL_ACC, SLibConsts.UNDEFINED, null);
            items.remove(0);    // remove introductory item
            items.remove(0);    // remove non applicable item
            jlstFiscalAccount.setListData(items);

            fiscalAccounts = SFiscalUtils.readAccounts(miClient.getSession());
            moGridAccounts.populateGrid(new Vector<SGridRow>(fiscalAccounts));
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = null;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        addAllListeners();
    }

    @Override
    public SFiscalAccounts getRegistry() throws Exception {
        SFiscalAccounts registry = new SFiscalAccounts();

        for (SGridRow row : moGridAccounts.getModel().getGridRows()) {
            if (row.isRowEdited()) {
                registry.getFiscalAccounts().add((SFiscalAccount) row);
            }
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        boolean edited = false;
        SGuiValidation validation = new SGuiValidation();

        for (SGridRow row : moGridAccounts.getModel().getGridRows()) {
            if (row.isRowEdited()) {
                edited = true;
                break;
            }
        }

        if (!edited) {
            validation.setMessage("Se debe modificar al menos una cuenta contable.");
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbAttachFiscalAccount) {
                actionAttachFiscalAccount();
            }
            else if (button == jbDetachFiscalAccount) {
                actionDetachFiscalAccount();
            }
        }
    }
}
