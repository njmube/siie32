/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbItemRequiredDpsConfig;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Juan Barajas
 */
public class SFormItemRequiredDpsConfig extends SBeanForm {

    private SDbItemRequiredDpsConfig moRegistry;

    /**
     * Creates new form SFormItemRequiredDpsConfig
     * @param client
     * @param title
     */
    public SFormItemRequiredDpsConfig(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNU_TP_DPS_SRC_ITEM, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlTpDps = new javax.swing.JLabel();
        moKeyTpDps = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlLink = new javax.swing.JLabel();
        moKeyLink = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moKeyReference = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTpDps.setForeground(new java.awt.Color(0, 0, 255));
        jlTpDps.setText("Tipo de documento: *");
        jlTpDps.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlTpDps);

        moKeyTpDps.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(moKeyTpDps);

        jPanel2.add(jPanel8);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLink.setText("Tipo referencia: *");
        jlLink.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlLink);

        moKeyLink.setPreferredSize(new java.awt.Dimension(300, 23));
        moKeyLink.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moKeyLinkItemStateChanged(evt);
            }
        });
        jPanel6.add(moKeyLink);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Referencia:*");
        jlReference.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlReference);

        moKeyReference.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moKeyReference);

        jPanel2.add(jPanel7);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moKeyLinkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moKeyLinkItemStateChanged
        itemStateChangedLinkType();
    }//GEN-LAST:event_moKeyLinkItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jlLink;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlTpDps;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLink;
    private sa.lib.gui.bean.SBeanFieldKey moKeyReference;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTpDps;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moKeyTpDps.setKeySettings(miClient, SGuiUtils.getLabelName(jlTpDps.getText()), true);
        moKeyLink.setKeySettings(miClient, SGuiUtils.getLabelName(jlLink.getText()), true);
        moKeyReference.setKeySettings(miClient, SGuiUtils.getLabelName(jlReference.getText()), true);
        
        moFields.addField(moKeyTpDps);
        moFields.addField(moKeyLink);
        moFields.addField(moKeyReference);

        moFields.setFormButton(jbSave);
    }
    
    private void itemStateChangedLinkType() {
        boolean enable = true;

        moKeyReference.removeAllItems();
        moKeyReference.setEnabled(false);

        try {
            if (moKeyLink.getSelectedIndex() > 0) {
                switch (moKeyLink.getValue()[0]) {
                    case SModSysConsts.ITMS_LINK_ALL:
                        enable = false;
                        break;
                    case SModSysConsts.ITMS_LINK_CT_ITEM:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMS_CT_ITEM, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_CL_ITEM:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMS_CL_ITEM, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_TP_ITEM:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMS_TP_ITEM, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_IFAM:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_IFAM, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_IGRP:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_IGRP, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_IGEN:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_IGEN, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_LINE:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_LINE, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_BRD:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_BRD, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_MFR:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_MFR, SLibConsts.UNDEFINED, null);
                        break;
                    case SModSysConsts.ITMS_LINK_ITEM:
                        miClient.getSession().populateCatalogue(moKeyReference, SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
                        break;
                    default:
                        enable = false;
                        throw new Exception(SLibConstants.MSG_ERR_UTIL_UNKNOWN_FORM_PICK);
                }
                    
                if (enable) {
                    moKeyReference.setSelectedIndex(0);
                    moKeyReference.setEnabled(true);
                    moKeyReference.setEnabled(true);
                }
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyTpDps, SModConsts.TRNU_TP_DPS, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyLink, SModConsts.ITMS_LINK, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbItemRequiredDpsConfig) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        moKeyTpDps.setValue(new int[] { moRegistry.getPkDpsCategoryId(), moRegistry.getPkDpsClassId(), moRegistry.getPkDpsTypeId() });
        moKeyLink.setValue(new int[] { moRegistry.getFkLinkTypeId() });
        
        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            moKeyTpDps.setEnabled(true);
            itemStateChangedLinkType();     
        }
        else {
            moKeyTpDps.setEnabled(false);
            //moKeyLink.setEnabled(false);
            //moKeyReference.setEnabled(false);
        }
        moKeyReference.setValue(new int[] { moRegistry.getFkReferenceId() });
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbItemRequiredDpsConfig registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) {}
        
        moRegistry.setPkDpsCategoryId(moKeyTpDps.getValue()[0]);
        moRegistry.setPkDpsClassId(moKeyTpDps.getValue()[1]);
        moRegistry.setPkDpsTypeId(moKeyTpDps.getValue()[2]);
        moRegistry.setFkLinkTypeId(moKeyLink.getValue()[0]);

        switch (moKeyLink.getValue()[0]) {
            case SModSysConsts.ITMS_LINK_ALL:
                moRegistry.setFkReferenceId(SLibConstants.UNDEFINED);
                break;
            default:
                moRegistry.setFkReferenceId(moKeyReference.getValue()[0]);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }
}
