/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbDelivery;
import erp.mod.trn.db.SDbDeliveryEntry;
import erp.mod.trn.db.SRowDeliveryInvoiceEntry;
import erp.mod.trn.db.SRowDeliveryOrderEntry;
import erp.mtrn.data.SDataDps;
import erp.mtrn.form.SPanelDps;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormDelivery extends SBeanForm implements SGridPaneFormOwner, ActionListener, ListSelectionListener {
    
    private static final String TXT_INV_ETY = "Partidas factura";
    private static final String TXT_ORD_ETY = "Partidas pedido";
    private static final String TXT_DVY_ETY = "Partidas entrega";
    
    private SDbDelivery moRegistry;
    
    private SPanelDps moPanelDps;
    private SGridPaneForm moGridInvoiceEntries;
    private SGridPaneForm moGridOrderEntries;
    private SGridPaneForm moGridDeliveryEntries;
    
    private ArrayList<SDbDeliveryEntry> maEntriesAdded;
    private ArrayList<SDbDeliveryEntry> maEntriesDeleted;

    /**
     * Creates new form SFormDelivery
     */
    public SFormDelivery(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_DVY, SLibConsts.UNDEFINED, title);
        
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDelivery = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jpEntries = new javax.swing.JPanel();
        jpSources = new javax.swing.JPanel();
        jlGridInvoice = new javax.swing.JLabel();
        jlGridOrder = new javax.swing.JLabel();
        jpDestiny = new javax.swing.JPanel();
        jlGridDelivery = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moCompQuantity = new sa.lib.gui.bean.SBeanCompoundField();
        jbEntryAdd = new javax.swing.JButton();

        jpDelivery.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDelivery.setLayout(new java.awt.BorderLayout(5, 0));

        jlPanelDps.setBackground(java.awt.Color.lightGray);
        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jlPanelDps.setText("Panel DPS");
        jlPanelDps.setOpaque(true);
        jlPanelDps.setPreferredSize(new java.awt.Dimension(800, 200));
        jpDelivery.add(jlPanelDps, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la entrega:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumber.setText("0");
        jtfNumber.setToolTipText("");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jtfNumber);

        jPanel5.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlDate);
        jPanel7.add(moDate);

        jPanel5.add(jPanel7);

        jPanel3.add(jPanel5, java.awt.BorderLayout.NORTH);

        jpDelivery.add(jPanel3, java.awt.BorderLayout.WEST);

        getContentPane().add(jpDelivery, java.awt.BorderLayout.NORTH);

        jpEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del registro:"));
        jpEntries.setLayout(new java.awt.BorderLayout(5, 0));

        jpSources.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jlGridInvoice.setBackground(java.awt.Color.lightGray);
        jlGridInvoice.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jlGridInvoice.setText("Grid Invoice Entries");
        jlGridInvoice.setOpaque(true);
        jlGridInvoice.setPreferredSize(new java.awt.Dimension(700, 200));
        jpSources.add(jlGridInvoice);

        jlGridOrder.setBackground(java.awt.Color.lightGray);
        jlGridOrder.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jlGridOrder.setText("Grid Order Entries");
        jlGridOrder.setOpaque(true);
        jlGridOrder.setPreferredSize(new java.awt.Dimension(700, 200));
        jpSources.add(jlGridOrder);

        jpEntries.add(jpSources, java.awt.BorderLayout.WEST);

        jpDestiny.setLayout(new java.awt.BorderLayout(0, 5));

        jlGridDelivery.setBackground(java.awt.Color.lightGray);
        jlGridDelivery.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jlGridDelivery.setText("Grid Delivery Entries");
        jlGridDelivery.setOpaque(true);
        jlGridDelivery.setPreferredSize(new java.awt.Dimension(350, 200));
        jpDestiny.add(jlGridDelivery, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 1));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Entregar:");
        jlQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlQuantity);
        jPanel2.add(moCompQuantity);

        jbEntryAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_add.gif"))); // NOI18N
        jbEntryAdd.setToolTipText("Agregar");
        jbEntryAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbEntryAdd);

        jPanel1.add(jPanel2);

        jpDestiny.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jpEntries.add(jpDestiny, java.awt.BorderLayout.EAST);

        getContentPane().add(jpEntries, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbEntryAdd;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlGridDelivery;
    private javax.swing.JLabel jlGridInvoice;
    private javax.swing.JLabel jlGridOrder;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JPanel jpDelivery;
    private javax.swing.JPanel jpDestiny;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JPanel jpSources;
    private javax.swing.JTextField jtfNumber;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantity;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1120, 700);
        
        moDate.setDateSettings(miClient, msTitle, true);
        moCompQuantity.setCompoundFieldSettings(miClient);
        moCompQuantity.getField().setDecimalSettings(SGuiUtils.getLabelName(jlQuantity), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moFields.addField(moDate);
        moFields.addField(moCompQuantity.getField());
        moFields.setFormButton(jbEntryAdd);
        
        moPanelDps = new SPanelDps((SClientInterface) miClient);
        jpDelivery.remove(jlPanelDps);
        jpDelivery.add(moPanelDps, BorderLayout.CENTER);
        
        moGridInvoiceEntries = new SGridPaneForm(miClient, mnFormType, SModSysConsts.TRNS_CL_DPS_SAL_DOC[1], TXT_INV_ETY) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> rows = new ArrayList<>();
                
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "# renglón fac"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, SGridConsts.COL_TITLE_CODE + " ítem"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, SGridConsts.COL_TITLE_NAME + " ítem"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant neta"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant enviada"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant x enviar"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Total neto $"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Val enviado $"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Val x enviar $"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                
                return rows;
            }
        };
        
        moGridOrderEntries = new SGridPaneForm(miClient, mnFormType, SModSysConsts.TRNS_CL_DPS_SAL_ORD[1], TXT_ORD_ETY) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> rows = new ArrayList<>();
                
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Referencia ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE + " ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "# renglón ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant procesada"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant x procesar"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Total $"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Val procesado $"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Val x procesar $"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                
                return rows;
            }
        };
        
        moGridDeliveryEntries = new SGridPaneForm(miClient, mnFormType, SModConsts.TRN_DVY_ETY, TXT_DVY_ETY) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> rows = new ArrayList<>();
                
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "# renglón"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, SGridConsts.COL_TITLE_CODE + " ítem"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, SGridConsts.COL_TITLE_NAME + " ítem"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Folio ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Referencia ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE + " ped"));
                rows.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "# renglón ped"));
                
                return rows;
            }
        };
        
        moGridInvoiceEntries.setPreferredSize(new Dimension(625, 200));
        moGridOrderEntries.setPreferredSize(new Dimension(625, 200));
        
        jpSources.remove(jlGridInvoice);
        jpSources.add(moGridInvoiceEntries);
        
        jpSources.remove(jlGridOrder);
        jpSources.add(moGridOrderEntries);
        
        jpDestiny.remove(jlGridDelivery);
        jpDestiny.add(moGridDeliveryEntries, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridInvoiceEntries);
        mvFormGrids.add(moGridOrderEntries);
        mvFormGrids.add(moGridDeliveryEntries);
        
        moGridInvoiceEntries.setPaneFormOwner(this); // not needed really, just for consistence
        moGridOrderEntries.setPaneFormOwner(this); // not needed really, just for consistence
        moGridDeliveryEntries.setPaneFormOwner(this);
        
        maEntriesAdded = new ArrayList<>();
        maEntriesDeleted = new ArrayList<>();
    }
    
    private ArrayList<SRowDeliveryInvoiceEntry> createInvoiceEntries() throws Exception {
        String sql = "";
        Statement statement = null;
        ResultSet resultSet = null;
        ArrayList<SRowDeliveryInvoiceEntry> entries = new ArrayList<>();
        
        sql = "SELECT de.id_year, de.id_doc, de.id_ety, de.sort_pos, " +
                "de.fid_item, de.fid_unit, de.fid_orig_unit, de.concept_key, de.concept, de.qty, de.orig_qty, de.tot_r, de.tot_cur_r, " +
                "t2._qty, t2._orig_qty, t2._amt, t2._amt_cur, " +
                "u.symbol, ou.symbol, c.cur_key, " +
                "COALESCE(SUM(dds.qty), 0.0) AS _prc_qty, COALESCE(SUM(dds.orig_qty), 0.0) AS _prc_orig_qty " +
                "FROM " + SModConsts.TablesMap.get(SModConsts.TRN_DPS) + " AS d " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_ETY) + " AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "INNER JOIN (" +
                "  SELECT _id_year, _id_doc, _id_ety, " +
                "  SUM(_qty) AS _qty, SUM(_orig_qty) AS _orig_qty, " +
                "  SUM(_amt) AS _amt, SUM(_amt_cur) AS _amt_cur " +
                "  FROM (" +
                "    SELECT de.id_year AS _id_year, de.id_doc AS _id_doc, de.id_ety AS _id_ety, " + // i.e., current DPS entries
                "    de.qty AS _qty, de.orig_qty AS _orig_qty, " +
                "    de.tot_r AS _amt, de.tot_cur_r AS _amt_cur " +
                "    FROM " + SModConsts.TablesMap.get(SModConsts.TRN_DPS) + " AS d " +
                "    INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_ETY) + " AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "    WHERE d.id_year = " + moRegistry.getFkDpsYearId() + " AND d.id_doc = " + moRegistry.getFkDpsDocId() + " AND d.b_del = 0 AND de.b_del = 0 " +
                "    UNION " +
                "    SELECT de.id_year AS _id_year, de.id_doc AS _id_doc, de.id_ety AS _id_ety, " + // i.e., current DPS entries adjustments (credit notes)
                "    dda.qty * -1 AS _qty, dda.orig_qty * -1 AS _orig_qty, " +
                "    dda.val * -1 AS _amt, dda.val_cur * -1 AS _amt_cur " +
                "    FROM " + SModConsts.TablesMap.get(SModConsts.TRN_DPS) + " AS d " +
                "    INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_ETY) + " AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "    INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_DPS_ADJ) + " AS dda ON de.id_year = dda.id_dps_year AND de.id_doc = dda.id_dps_doc AND de.id_ety = dda.id_dps_ety " +
                "    WHERE d.id_year = " + moRegistry.getFkDpsYearId() + " AND d.id_doc = " + moRegistry.getFkDpsDocId() + " AND d.b_del = 0 AND de.b_del = 0) AS t1 " +
                "  GROUP BY _id_year, _id_doc, _id_ety " +
                "  ORDER BY _id_year, _id_doc, _id_ety) AS t2 ON de.id_year = t2._id_year AND de.id_doc = t2._id_doc AND de.id_ety = t2._id_ety " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.ITMU_UNIT) + " AS u ON de.fid_unit = u.id_unit " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.ITMU_UNIT) + " AS ou ON de.fid_orig_unit = ou.id_unit " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CFGU_CUR) + " AS c ON d.fid_cur = c.id_cur " +
                "LEFT OUTER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_DPS_SUPPLY) + " AS dds ON de.id_year = dds.id_des_year AND de.id_doc = dds.id_des_doc AND de.id_ety = dds.id_des_ety " +
                "WHERE d.id_year = " + moRegistry.getFkDpsYearId() + " AND d.id_doc = " + moRegistry.getFkDpsDocId() + " AND d.b_del = 0 AND de.b_del = 0 " +
                "GROUP BY de.id_year, de.id_doc, de.id_ety, de.sort_pos, " +
                "de.fid_item, de.fid_unit, de.fid_orig_unit, de.concept_key, de.concept, de.qty, de.orig_qty, de.tot_r, de.tot_cur_r, " +
                "t2._qty, t2._orig_qty, t2._amt, t2._amt_cur, " +
                "u.symbol, ou.symbol, c.cur_key " +
                "ORDER BY de.sort_pos, de.id_year, de.id_doc, de.id_ety ";
        
        statement = miClient.getSession().getStatement().getConnection().createStatement();
        resultSet = statement.executeQuery(sql);
        while (resultSet.next()) {
            // Create entry:
            
            SRowDeliveryInvoiceEntry invoiceEntry = new SRowDeliveryInvoiceEntry();
            
            invoiceEntry.EntryKey = new int[] { resultSet.getInt("de.id_year"), resultSet.getInt("de.id_doc"), resultSet.getInt("de.id_ety") };
            invoiceEntry.ItemId = resultSet.getInt("de.fid_item");
            invoiceEntry.UnitId = resultSet.getInt("de.fid_orig_unit");
            invoiceEntry.SortingPosition = resultSet.getInt("de.sort_pos");
            invoiceEntry.EntryCode = resultSet.getString("de.concept_key");
            invoiceEntry.EntryName = resultSet.getString("de.concept");
            invoiceEntry.SystemQuantity = resultSet.getDouble("t2._qty");
            invoiceEntry.Quantity = resultSet.getDouble("t2._orig_qty");
            invoiceEntry.QuantityDelivered = resultSet.getDouble("_prc_orig_qty");
            invoiceEntry.UnitCode = resultSet.getString("ou.symbol");
            invoiceEntry.Total = SLibUtils.round(resultSet.getDouble("t2._amt_cur"), SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());
            invoiceEntry.CurrencyCode = resultSet.getString("c.cur_key");
            
            // Add entry:
            
            invoiceEntry.computeTotalDelivered();
            entries.add(invoiceEntry);
        }
        
        return entries;
    }
    
    private ArrayList<SRowDeliveryOrderEntry> createOrderEntries(final int idItem, final int idUnit) throws Exception {
        String sql = "";
        Statement statement = null;
        ResultSet resultSet = null;
        ArrayList<SRowDeliveryOrderEntry> entries = new ArrayList<>();
        
        sql = "SELECT de.id_year, de.id_doc, de.id_ety, de.sort_pos, " +
                "d.num_ser, d.num, d.num_ref, d.dt, d.b_link, " +
                "de.qty, de.orig_qty, de.tot_r, de.tot_cur_r, " +
                "u.symbol, ou.symbol, c.cur_key, " +
                "COALESCE(SUM(dds.qty), 0.0) AS _prc_qty, COALESCE(SUM(dds.orig_qty), 0.0) AS _prc_orig_qty, " +
                "de.qty - COALESCE(SUM(dds.qty), 0.0) AS _prc_qty_rem, de.orig_qty - COALESCE(SUM(dds.orig_qty), 0.0) AS _prc_orig_qty_rem " +
                "FROM " + SModConsts.TablesMap.get(SModConsts.TRN_DPS) + " AS d " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_ETY) + " AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.ITMU_UNIT) + " AS u ON de.fid_unit = u.id_unit " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.ITMU_UNIT) + " AS ou ON de.fid_orig_unit = ou.id_unit " +
                "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.CFGU_CUR) + " AS c ON d.fid_cur = c.id_cur " +
                "LEFT OUTER JOIN trn_dps_dps_supply AS dds ON de.id_year = dds.id_src_year AND de.id_doc = dds.id_src_doc AND de.id_ety = dds.id_src_ety " +
                "WHERE d.fid_ct_dps = " + SModSysConsts.TRNS_CL_DPS_SAL_ORD[0] + " AND d.fid_cl_dps = " + SModSysConsts.TRNS_CL_DPS_SAL_ORD[1] + " AND d.b_del = 0 AND de.b_del = 0 AND " +
                "d.fid_bp_r = (" +
                "  SELECT fid_bp_r " +
                "  FROM " + SModConsts.TablesMap.get(SModConsts.TRN_DPS) + " " +
                "  WHERE id_year = " + moRegistry.getFkDpsYearId() + " AND id_doc = " + moRegistry.getFkDpsDocId() + ") " +
                "AND de.fid_item = " + idItem + " AND de.fid_orig_unit = " + idUnit + " " +
                "GROUP BY de.id_year, de.id_doc, de.id_ety, de.sort_pos, " +
                "d.num_ser, d.num, d.num_ref, d.dt, " +
                "de.qty, de.orig_qty, de.tot_r, de.tot_cur_r, " +
                "u.symbol, ou.symbol, c.cur_key " +
                "HAVING (de.qty - COALESCE(SUM(dds.qty), 0.0) <> 0 OR de.orig_qty - COALESCE(SUM(dds.orig_qty), 0.0) <> 0) AND d.b_link = 0 " +
                "ORDER BY d.num_ser, d.num, d.num_ref, d.dt, " +
                "de.sort_pos, de.id_year, de.id_doc, de.id_ety ";
        
        statement = miClient.getSession().getStatement().getConnection().createStatement();
        resultSet = statement.executeQuery(sql);
        while (resultSet.next()) {
            // Create entry:
            
            SRowDeliveryOrderEntry orderEntry = new SRowDeliveryOrderEntry();
            
            orderEntry.EntryKey = new int[] { resultSet.getInt("de.id_year"), resultSet.getInt("de.id_doc"), resultSet.getInt("de.id_ety") };
            orderEntry.NumberSeries = resultSet.getString("d.num_ser");
            orderEntry.Number = resultSet.getString("d.num");
            orderEntry.NumberReference = resultSet.getString("d.num_ref");
            orderEntry.Date = resultSet.getDate("d.dt");
            orderEntry.SortingPosition = resultSet.getInt("de.sort_pos");
            orderEntry.SystemQuantity = resultSet.getDouble("de.qty");
            orderEntry.Quantity = resultSet.getDouble("de.orig_qty");
            orderEntry.QuantityProcessed = resultSet.getDouble("_prc_orig_qty");
            orderEntry.UnitCode = resultSet.getString("ou.symbol");
            orderEntry.Total = SLibUtils.round(resultSet.getDouble("de.tot_cur_r"), SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());
            orderEntry.CurrencyCode = resultSet.getString("c.cur_key");
            
            // Updtate current deliveries (net yet saved):
            
            for (SDbDeliveryEntry entry : maEntriesAdded) {
                if (SLibUtils.compareKeys(orderEntry.EntryKey, entry.getKeyOrderEntry())) {
                    orderEntry.QuantityProcessed += entry.getOriginalQuantity();
                }
            }
            
            for (SDbDeliveryEntry entry : maEntriesDeleted) {
                if (SLibUtils.compareKeys(orderEntry.EntryKey, entry.getKeyOrderEntry())) {
                    orderEntry.QuantityProcessed -= entry.getOriginalQuantity();
                }
            }
            
            // Add entry:
            
            orderEntry.computeTotalProcessed();
            entries.add(orderEntry);
        }
        
        return entries;
    }
    
    private void updateGridInvoiceEntry(final SRowDeliveryInvoiceEntry invoiceEntry, final double quantity) {
        int index = moGridInvoiceEntries.getTable().getSelectedRow();
        
        invoiceEntry.QuantityDelivered += quantity;
        invoiceEntry.computeTotalDelivered();
        moGridInvoiceEntries.renderGridRows();
        moGridInvoiceEntries.setSelectedGridRow(index);
    }
    
    private void updateGridOrderEntry(final SRowDeliveryOrderEntry OrderEntry, final double quantity) {
        int index = moGridOrderEntries.getTable().getSelectedRow();
        
        OrderEntry.QuantityProcessed += quantity;
        OrderEntry.computeTotalProcessed();
        moGridOrderEntries.renderGridRows();
        moGridOrderEntries.setSelectedGridRow(index);
    }
    
    private void updateGridDeliveryEntries() {
        int entry = 0;
        
        for (SGridRow row : moGridDeliveryEntries.getModel().getGridRows()) {
            ((SDbDeliveryEntry) row).setPkEntryId(++entry);
        }
    }
    
    private void computeGridDeliveryEntryDeleted(final SDbDeliveryEntry deliveryEntry) {
        if (!maEntriesAdded.remove(deliveryEntry)) {
            maEntriesDeleted.add(deliveryEntry);
        }
        
        for (SGridRow row : moGridInvoiceEntries.getModel().getGridRows()) {
            SRowDeliveryInvoiceEntry invoiceEntry = (SRowDeliveryInvoiceEntry) row;
            
            if (SLibUtils.compareKeys(invoiceEntry.EntryKey, deliveryEntry.getKeyDpsEntry())) {
                updateGridInvoiceEntry(invoiceEntry, -deliveryEntry.getOriginalQuantity()); // negative to subtract!
            }
        }
        
        // Grid Order Entries updated on valueChanged method launched by Grid Invoice rows refreshment!
        
        updateGridDeliveryEntries();
    }
    
    private void actionPerformedEntryAdd() {
        SGuiValidation validation = new SGuiValidation();
        SRowDeliveryInvoiceEntry invoiceEntry = (SRowDeliveryInvoiceEntry) moGridInvoiceEntries.getSelectedGridRow();
        SRowDeliveryOrderEntry orderEntry = (SRowDeliveryOrderEntry) moGridOrderEntries.getSelectedGridRow();
        
        if (invoiceEntry == null) {
            validation.setMessage(SGridConsts.MSG_SELECT_ROW + "\n(" + TXT_INV_ETY + ")");
            validation.setComponent(moGridInvoiceEntries.getTable());
        }
        else if (orderEntry == null) {
            validation.setMessage(SGridConsts.MSG_SELECT_ROW + "\n(" + TXT_ORD_ETY + ")");
            validation.setComponent(moGridOrderEntries.getTable());
        }
        else if (moCompQuantity.getField().getValue() == 0) {
            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlQuantity) + "'.");
            validation.setComponent(moCompQuantity.getField().getComponent());
        }
        else if (moCompQuantity.getField().getValue() > invoiceEntry.getQuantityRemaining()) {
            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlQuantity) + "' " + 
                    SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + " " + SLibUtils.getDecimalFormatQuantity().format(invoiceEntry.getQuantityRemaining()) + " " + invoiceEntry.UnitCode + ".\n(" + TXT_INV_ETY + ")");
            validation.setComponent(moCompQuantity.getField().getComponent());
        }
        else if (moCompQuantity.getField().getValue() > orderEntry.getQuantityRemaining()) {
            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlQuantity) + "' " + 
                    SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + " " + SLibUtils.getDecimalFormatQuantity().format(orderEntry.getQuantityRemaining()) + " " + orderEntry.UnitCode + ".\n(" + TXT_ORD_ETY + ")");
            validation.setComponent(moCompQuantity.getField().getComponent());
        }
        else {
            // Add new delivery entry:
            
            double quantity = moCompQuantity.getField().getValue();
            SDbDeliveryEntry deliveryEntry = new SDbDeliveryEntry();
            
            //deliveryEntry.setPkDeliveryId(...);
            //deliveryEntry.setPkEntryId(...);
            deliveryEntry.setQuantity(orderEntry.calculateSystemQuantity(quantity));
            deliveryEntry.setOriginalQuantity(quantity);
            deliveryEntry.setFkDpsYearId(invoiceEntry.EntryKey[0]);
            deliveryEntry.setFkDpsDocId(invoiceEntry.EntryKey[1]);
            deliveryEntry.setFkDpsEntryId(invoiceEntry.EntryKey[2]);
            deliveryEntry.setFkOrderYearId(orderEntry.EntryKey[0]);
            deliveryEntry.setFkOrderDocId(orderEntry.EntryKey[1]);
            deliveryEntry.setFkOrderEntryId(orderEntry.EntryKey[2]);
            
            deliveryEntry.compute(miClient.getSession());
            
            maEntriesAdded.add(deliveryEntry);
            moGridDeliveryEntries.addGridRow(deliveryEntry);
            updateGridDeliveryEntries();
            moGridDeliveryEntries.renderGridRows();
            moGridDeliveryEntries.setSelectedGridRow(moGridDeliveryEntries.getTable().getRowCount() - 1);
            
            // Update aswell current invoice entry:
            
            updateGridInvoiceEntry(invoiceEntry, quantity);
            
            // Update aswell current order entry:
            
            updateGridOrderEntry(orderEntry, quantity);
            
            // Allow more additions:
            
            moCompQuantity.getField().getComponent().requestFocus();
        }
        
        if (!validation.isValid()) {
            SGuiUtils.computeValidation(miClient, validation);
        }
    }
    
    private void valueChangedGridInvoice() {
        SRowDeliveryInvoiceEntry entry = (SRowDeliveryInvoiceEntry) moGridInvoiceEntries.getSelectedGridRow();
        
        if (moGridInvoiceEntries.getSelectedGridRow() == null) {
            moGridOrderEntries.clearGridRows();
        }
        else {
            try {
                moGridOrderEntries.populateGrid(new Vector<SGridRow>(createOrderEntries(entry.ItemId, entry.UnitId)), this);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }
    
    private void valueChangedGridOrder() {
        moCompQuantity.getField().resetField();
        
        if (moGridOrderEntries.getSelectedGridRow() == null) {
            moCompQuantity.setCompoundText("");
        }
        else {
            moCompQuantity.setCompoundText(((SRowDeliveryOrderEntry) moGridOrderEntries.getSelectedGridRow()).UnitCode);
        }
    }
    
    /*
     * Public methods
     */
    
    @Override
    public void addAllListeners() {
        jbEntryAdd.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbEntryAdd.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        SDataDps dps = null;
        
        moRegistry = (SDbDelivery) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            moRegistry.setDate(miClient.getSession().getCurrentDate());
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        jtfNumber.setText("" + moRegistry.getNumber());
        moDate.setValue(moRegistry.getDate());
        
        dps = (SDataDps) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.TRN_DPS, moRegistry.getKeyDps(), SLibConstants.EXEC_MODE_STEALTH);
        moPanelDps.setDps(dps, miClient.getSession().getCurrentDate());

        maEntriesAdded.clear();
        maEntriesDeleted.clear();
        
        moGridInvoiceEntries.populateGrid(new Vector<SGridRow>(createInvoiceEntries()), this);
        moGridDeliveryEntries.populateGrid(new Vector<SGridRow>(moRegistry.getChildEntries()));
        
        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            
        }
        else {
            
        }

        addAllListeners();
    }

    @Override
    public SDbDelivery getRegistry() throws Exception {
        SDbDelivery registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            //registry.setPkDeliveryId(...);
        }

        //registry.setNumber(...); // will be set on save
        registry.setDate(moDate.getValue());
        //registry.setDeleted(...);
        //registry.setFkDpsYearId(...); // already set, actually before invoking setRegistry() method
        //registry.setFkDpsDocId(...); // already set, actually before invoking setRegistry() method
        
        registry.getChildEntries().clear();
        
        for (SGridRow row : moGridDeliveryEntries.getModel().getGridRows()) {
            registry.getChildEntries().add((SDbDeliveryEntry) row);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moGridDeliveryEntries.getModel().getGridRows().isEmpty()) {
                validation.setMessage("El documento debe tener al menos una partida.");
            }
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        // Overriden to bypass SGuiModule invokation because of that paremeters passed to SDbDelivery registry object on its instantiation.
        // By default method setValue on super class throws UnsupportedOperationException.
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        switch (gridSubtype) {
            case SModConsts.TRN_DVY_ETY:
                computeGridDeliveryEntryDeleted((SDbDeliveryEntry) gridRow);
                break;
            default:
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbEntryAdd) {
                actionPerformedEntryAdd();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() instanceof ListSelectionModel) {
            if (!e.getValueIsAdjusting()) {
                ListSelectionModel model = (ListSelectionModel) e.getSource();

                if (model == moGridInvoiceEntries.getTable().getSelectionModel()) {
                    valueChangedGridInvoice();
                }
                else if (model == moGridOrderEntries.getTable().getSelectionModel()) {
                    valueChangedGridOrder();
                }
            }
        }
    }
}
