/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.mod.SModConsts;
import erp.mod.bps.db.SDbBizPartner;
import erp.mod.itm.db.SDbUnit;
import erp.mod.trn.db.SDbDps;
import erp.mod.trn.db.SDbDpsEntry;
import erp.mod.trn.db.SDbDpsEntryPrice;
import erp.mod.trn.db.SRowConsumeEntryPriceCardex;
import erp.mtrn.data.STrnUtilities;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas
 */
public class SDialogContractPriceCardex extends SBeanFormDialog implements ListSelectionListener{
    
    protected SDbDps moDps;
    protected SDbDpsEntry moEntry;
    protected SGridPaneForm moGridPriceMonth;
    protected SGridPaneForm moGridConsumeMonth;

    /**
     * Creates new form SDialogContractPriceCardex
     * @param client
     * @param title
     */
    public SDialogContractPriceCardex(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_DPS_ETY_PRC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpBenefit = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moTextBizPartner = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItemKey = new sa.lib.gui.bean.SBeanFieldText();
        moTextItem = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlTotalQuantityContract = new javax.swing.JLabel();
        moCompQuantityContract = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel13 = new javax.swing.JPanel();
        jlTotalQuantityProcessedContract = new javax.swing.JLabel();
        moCompQuantityProcessedContract = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel14 = new javax.swing.JPanel();
        jlTotalQuantityToProcessContract = new javax.swing.JLabel();
        moCompQuantityToProcessContract = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel7 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlTotalQuantity = new javax.swing.JLabel();
        moCompQuantity = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel16 = new javax.swing.JPanel();
        jlTotalQuantityProcessed = new javax.swing.JLabel();
        moCompQuantityProcessed = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel17 = new javax.swing.JPanel();
        jlTotalQuantityToProcess = new javax.swing.JLabel();
        moCompQuantityToProcess = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel3 = new javax.swing.JPanel();
        jpPricesMonth = new javax.swing.JPanel();
        jpBenefitDetail = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Entregas mensuales del contrato");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpBenefit.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida apreciada:"));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlNumber);

        moTextNumber.setText("sBeanFieldText2");
        moTextNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(moTextNumber);

        jPanel4.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlBizPartner.setText("Cliente:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlBizPartner);

        moTextBizPartner.setText("sBeanFieldText2");
        moTextBizPartner.setPreferredSize(new java.awt.Dimension(340, 23));
        jPanel12.add(moTextBizPartner);

        jPanel4.add(jPanel12);

        jPanel8.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItem.setText("√çtem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlItem);

        moTextItemKey.setText("sBeanFieldText2");
        moTextItemKey.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel8.add(moTextItemKey);

        moTextItem.setText("sBeanFieldText2");
        moTextItem.setPreferredSize(new java.awt.Dimension(244, 23));
        jPanel8.add(moTextItem);

        jPanel4.add(jPanel8);

        jpBenefit.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Total partida contrato:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlTotalQuantityContract.setText("Cantidad:");
        jlTotalQuantityContract.setPreferredSize(new java.awt.Dimension(90, 23));
        jlTotalQuantityContract.setRequestFocusEnabled(false);
        jPanel11.add(jlTotalQuantityContract);
        jPanel11.add(moCompQuantityContract);

        jPanel6.add(jPanel11);

        jPanel13.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlTotalQuantityProcessedContract.setText("Cant. procesada:");
        jlTotalQuantityProcessedContract.setPreferredSize(new java.awt.Dimension(90, 23));
        jlTotalQuantityProcessedContract.setRequestFocusEnabled(false);
        jPanel13.add(jlTotalQuantityProcessedContract);
        jPanel13.add(moCompQuantityProcessedContract);

        jPanel6.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlTotalQuantityToProcessContract.setText("Cant. pendiente:");
        jlTotalQuantityToProcessContract.setPreferredSize(new java.awt.Dimension(90, 23));
        jlTotalQuantityToProcessContract.setRequestFocusEnabled(false);
        jPanel14.add(jlTotalQuantityToProcessContract);
        jPanel14.add(moCompQuantityToProcessContract);

        jPanel6.add(jPanel14);

        jpBenefit.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Total precios:"));
        jPanel7.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlTotalQuantity.setText("Cantidad:");
        jlTotalQuantity.setPreferredSize(new java.awt.Dimension(90, 23));
        jlTotalQuantity.setRequestFocusEnabled(false);
        jPanel15.add(jlTotalQuantity);
        jPanel15.add(moCompQuantity);

        jPanel7.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlTotalQuantityProcessed.setText("Cant. procesada:");
        jlTotalQuantityProcessed.setPreferredSize(new java.awt.Dimension(90, 23));
        jlTotalQuantityProcessed.setRequestFocusEnabled(false);
        jPanel16.add(jlTotalQuantityProcessed);
        jPanel16.add(moCompQuantityProcessed);

        jPanel7.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlTotalQuantityToProcess.setText("Cant. pendiente:");
        jlTotalQuantityToProcess.setPreferredSize(new java.awt.Dimension(90, 23));
        jlTotalQuantityToProcess.setRequestFocusEnabled(false);
        jPanel17.add(jlTotalQuantityToProcess);
        jPanel17.add(moCompQuantityToProcess);

        jPanel7.add(jPanel17);

        jpBenefit.add(jPanel7, java.awt.BorderLayout.EAST);

        jPanel1.add(jpBenefit, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpPricesMonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Entregas mensuales:"));
        jpPricesMonth.setPreferredSize(new java.awt.Dimension(100, 200));
        jpPricesMonth.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpPricesMonth, java.awt.BorderLayout.NORTH);

        jpBenefitDetail.setBorder(javax.swing.BorderFactory.createTitledBorder("Entregas mensuales a detalle:"));
        jpBenefitDetail.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpBenefitDetail, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlTotalQuantity;
    private javax.swing.JLabel jlTotalQuantityContract;
    private javax.swing.JLabel jlTotalQuantityProcessed;
    private javax.swing.JLabel jlTotalQuantityProcessedContract;
    private javax.swing.JLabel jlTotalQuantityToProcess;
    private javax.swing.JLabel jlTotalQuantityToProcessContract;
    private javax.swing.JPanel jpBenefit;
    private javax.swing.JPanel jpBenefitDetail;
    private javax.swing.JPanel jpPricesMonth;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantity;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantityContract;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantityProcessed;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantityProcessedContract;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantityToProcess;
    private sa.lib.gui.bean.SBeanCompoundField moCompQuantityToProcessContract;
    private sa.lib.gui.bean.SBeanFieldText moTextBizPartner;
    private sa.lib.gui.bean.SBeanFieldText moTextItem;
    private sa.lib.gui.bean.SBeanFieldText moTextItemKey;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);

        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber), 150);
        moTextBizPartner.setTextSettings(SGuiUtils.getLabelName(jlBizPartner), 150);
        moTextItemKey.setTextSettings(SGuiUtils.getLabelName(jlItem), 150);
        moTextItem.setTextSettings(SGuiUtils.getLabelName(jlItem), 150);
        moCompQuantityContract.setCompoundFieldSettings(miClient);
        moCompQuantityContract.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalQuantityContract), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompQuantityProcessedContract.setCompoundFieldSettings(miClient);
        moCompQuantityProcessedContract.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalQuantityProcessedContract), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompQuantityToProcessContract.setCompoundFieldSettings(miClient);
        moCompQuantityToProcessContract.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalQuantityToProcessContract), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompQuantity.setCompoundFieldSettings(miClient);
        moCompQuantity.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalQuantity), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompQuantityProcessed.setCompoundFieldSettings(miClient);
        moCompQuantityProcessed.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalQuantityProcessed), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompQuantityToProcess.setCompoundFieldSettings(miClient);
        moCompQuantityToProcess.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalQuantityToProcess), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        /*
        */

        moGridPriceMonth = new SGridPaneForm(miClient, SModConsts.TRN_DPS_ETY_PRC, SLibConsts.UNDEFINED, "Entregas mensuales") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "No. √ìrd", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_YEAR, "A√±o", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_MONTH, "Mes", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Precio variable", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT_UNIT, "Precio u $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT_UNIT, "Precio u sis $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Base", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Futuro", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Factor ajuste", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Cantidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Cant procesada"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Cant pendiente"));

                return gridColumnsForm;
            }
        };
        jpPricesMonth.add(moGridPriceMonth, BorderLayout.CENTER);
        
        moGridConsumeMonth = new SGridPaneForm(miClient, SModConsts.TRN_DPS_ETY_PRC, SModConsts.TRN_DPS_ETY, "Entregas mensuales a detalle") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo doc", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Folio doc", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Referencia", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Sucursal empresa"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Cantidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT_UNIT, "Precio u $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr nvo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Usr TS nvo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr mod"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Usr TS mod"));

                return gridColumnsForm;
            }
        };
        jpBenefitDetail.add(moGridConsumeMonth, BorderLayout.CENTER);
        
        moTextNumber.setEditable(false);
        moTextBizPartner.setEditable(false);
        moTextItemKey.setEditable(false);
        moTextItem.setEditable(false);
        moCompQuantityContract.getField().setEditable(false);
        moCompQuantityProcessedContract.getField().setEditable(false);
        moCompQuantityToProcessContract.getField().setEditable(false);
        moCompQuantity.getField().setEditable(false);
        moCompQuantityProcessed.getField().setEditable(false);
        moCompQuantityToProcess.getField().setEditable(false);
        
        reloadCatalogues();
        addAllListeners();
    }
    
    private void loadEntryPriceSelected() {
        SDbDpsEntryPrice entryPrice = null;
        
        entryPrice = (SDbDpsEntryPrice) moGridPriceMonth.getSelectedGridRow();

        if (entryPrice != null) {
            showEntryPriceDetail(entryPrice);
        }
    }

    @SuppressWarnings("unchecked")
    private void showEntryPrices() {
        double quantityTotal = 0;
        double quantityProcessed = 0;
        double quantityToProcess = 0;
        double quantityProcessedTotal = 0;
        double quantityToProcessTotal = 0;
        Vector<SGridRow> rows = new Vector<>();

        try {
            for (SDbDpsEntryPrice entryPrice : moEntry.getChildEntryPrices()) {
                quantityProcessed = STrnUtilities.getQuantityProcessForDpsEntryPrice((SClientInterface) miClient, entryPrice.getPrimaryKey(), null);
                quantityToProcess = entryPrice.getOriginalQuantity() - quantityProcessed;
                
                entryPrice.setOriginalQuantityProcessed(quantityProcessed);
                entryPrice.setOriginalQuantityToProcess(quantityToProcess);
                
                quantityTotal += entryPrice.getOriginalQuantity();
                quantityProcessedTotal += entryPrice.getOriginalQuantityProcessed();
                quantityToProcessTotal += entryPrice.getOriginalQuantityToProcess();
                rows.add(entryPrice);
            }
            moCompQuantity.getField().setValue(quantityTotal);
            moCompQuantityProcessed.getField().setValue(quantityProcessedTotal);
            moCompQuantityToProcess.getField().setValue(quantityToProcessTotal);
            
            moCompQuantityContract.getField().setValue(moEntry.getOriginalQuantity());
            moCompQuantityProcessedContract.getField().setValue(quantityProcessedTotal);
            moCompQuantityToProcessContract.getField().setValue(moEntry.getOriginalQuantity() - quantityProcessedTotal);

            moGridPriceMonth.populateGrid(rows, this);
            moGridPriceMonth.clearSortKeys();
            moGridPriceMonth.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void showEntryPriceDetail(SDbDpsEntryPrice entryPrice) {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "";
        ResultSet resultSet = null;

        try {
            sql = "SELECT d.dt, d.num_ref, d.ts_new AS ts_usr_ins, d.ts_edit AS ts_usr_upd, "
                    + "CONCAT(d.num_ser, IF(length(d.num_ser) = 0, '', '-'), d.num) AS f_num, dt.code, "
                    + "(SELECT cob.code FROM erp.bpsu_bpb AS cob WHERE d.fid_cob = cob.id_bpb) AS f_cob_code, un.usr AS f_usr_ins, ue.usr AS f_usr_upd, "
                    + "(SELECT c.cur_key FROM erp.cfgu_cur AS c WHERE d.fid_cur = c.id_cur) AS f_cur_key, 'MXN' AS f_cur_key_local, "
                    + "de.concept_key, it.item, de.orig_qty, u.symbol, de.price_u_cur, de.stot_cur_r, de.tax_charged_cur_r, de.tax_retained_cur_r, de.tot_cur_r, "
                    + "de.price_u, de.stot_r, de.tax_charged_r, de.tax_retained_r, de.tot_r "
                    + "FROM trn_dps_ety_prc AS dep "
                    + "INNER JOIN trn_dps_dps_supply AS dps_sup ON dps_sup.id_src_year = dep.id_year AND dps_sup.id_src_doc = dep.id_doc AND dps_sup.id_src_ety = dep.id_ety "
                    + "INNER JOIN trn_dps AS d ON d.id_year = dps_sup.id_des_year AND d.id_doc = dps_sup.id_des_doc "
                    + "INNER JOIN trn_dps_ety AS de ON de.id_year = d.id_year AND de.id_doc = d.id_doc AND de.id_ety = dps_sup.id_des_ety "
                    + "AND dep.con_prc_year = de.con_prc_year AND dep.con_prc_mon = de.con_prc_mon "
                    + "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND d.fid_tp_dps = dt.id_tp_dps "
                    + "INNER JOIN erp.itmu_item AS it ON de.fid_item = it.id_item "
                    + "INNER JOIN erp.itmu_unit AS u ON u.id_unit = de.fid_unit "
                    + "INNER JOIN erp.usru_usr AS un ON d.fid_usr_new = un.id_usr "
                    + "INNER JOIN erp.usru_usr AS ue ON d.fid_usr_edit = ue.id_usr "
                    + "WHERE dep.id_year = " + entryPrice.getPkYearId() + " AND dep.id_doc = " + entryPrice.getPkDocId() + " AND dep.id_ety = " + entryPrice.getPkEntryId() +  " AND dep.id_prc = " + entryPrice.getPkPriceId() +  " "
                    + "GROUP BY de.id_year, de.id_doc, de.id_ety "
                    + "ORDER BY de.id_year, de.id_doc, de.id_ety ";

            resultSet = miClient.getSession().getStatement().executeQuery(sql);

            while (resultSet.next()) {
                SRowConsumeEntryPriceCardex row = new SRowConsumeEntryPriceCardex();
                
                row.setTypeDoc(resultSet.getString("dt.code"));
                row.setNumber(resultSet.getString("f_num"));
                row.setReference(resultSet.getString("d.num_ref"));
                row.setDateDoc(resultSet.getDate("d.dt"));
                row.setCompanyBranch(resultSet.getString("f_cob_code"));
                row.setItem(resultSet.getString("it.item"));
                row.setItemKey(resultSet.getString("de.concept_key"));
                row.setQuantity(resultSet.getDouble("de.orig_qty"));
                row.setPriceUnitary(resultSet.getDouble("de.price_u_cur"));
                row.setAmount(resultSet.getDouble("de.tot_cur_r"));
                row.setCurrency(resultSet.getString("f_cur_key"));
                row.setUserInsert(resultSet.getString("f_usr_ins"));
                row.setDateUserInsert(resultSet.getTimestamp("ts_usr_ins"));
                row.setUserUpdate(resultSet.getString("f_usr_upd"));
                row.setDateUserUpdate(resultSet.getTimestamp("ts_usr_upd"));

                rows.add(row);
            }

            moGridConsumeMonth.populateGrid(rows);
            moGridConsumeMonth.clearSortKeys();
            moGridConsumeMonth.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void initContract() {
        SDbBizPartner bizPartner = new SDbBizPartner();
        SDbUnit unit = new SDbUnit();
        
        try {
            moTextNumber.setValue(moDps.getNumberSeries() + moDps.getNumber());
            /*
            moTextDateStart.setValue(SLibUtils.DateFormatDate.format(moDps.getDateDelivery_n()));
            moTextDateEnd.setValue(SLibUtils.DateFormatDate.format(moDps.getDateDocLapsing_n()));
            */
            moTextBizPartner.setValue((String) bizPartner.readField(miClient.getSession().getStatement(), new int[] { moDps.getFkBizPartnerId_r() }, SDbBizPartner.FIELD_NAME));
            moTextItemKey.setValue(moEntry.getConceptKey());
            moTextItemKey.setValue(moEntry.getConceptKey());
            moTextItem.setValue(moEntry.getConcept());
            moCompQuantityContract.setCompoundText((String) unit.readField(miClient.getSession().getStatement(), new int[] { moEntry.getFkUnitId() }, SDbBizPartner.FIELD_CODE));
            moCompQuantityProcessedContract.setCompoundText((String) unit.readField(miClient.getSession().getStatement(), new int[] { moEntry.getFkUnitId() }, SDbBizPartner.FIELD_CODE));
            moCompQuantityToProcessContract.setCompoundText((String) unit.readField(miClient.getSession().getStatement(), new int[] { moEntry.getFkUnitId() }, SDbBizPartner.FIELD_CODE));
            moCompQuantity.setCompoundText((String) unit.readField(miClient.getSession().getStatement(), new int[] { moEntry.getFkUnitId() }, SDbBizPartner.FIELD_CODE));
            moCompQuantityProcessed.setCompoundText((String) unit.readField(miClient.getSession().getStatement(), new int[] { moEntry.getFkUnitId() }, SDbBizPartner.FIELD_CODE));
            moCompQuantityToProcess.setCompoundText((String) unit.readField(miClient.getSession().getStatement(), new int[] { moEntry.getFkUnitId() }, SDbBizPartner.FIELD_CODE));

            showEntryPrices();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    public void setFormParams(final int[] pk, String bizPartnerLabel) {
        moEntry = (SDbDpsEntry) miClient.getSession().readRegistry(SModConsts.TRN_DPS_ETY, new int[] { pk[0], pk[1], pk[2] });
        moDps = (SDbDps) miClient.getSession().readRegistry(SModConsts.TRN_DPS, new int[] { pk[0], pk[1] });
        jlBizPartner.setText(bizPartnerLabel);
        initContract();
    }
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridPriceMonth.getTable().getSelectedRowCount() != -1) {
                loadEntryPriceSelected();
            }
        }
    }
}
