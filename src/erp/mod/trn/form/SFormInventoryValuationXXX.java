/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbInventoryValuationXXX;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormInventoryValuationXXX extends SBeanForm implements ActionListener, FocusListener {

    SDbInventoryValuationXXX moRegistry;

    /**
     * Creates new form SFormInventoryValuation
     */
    public SFormInventoryValuationXXX(SGuiClient client, int formSubtype, String title) {
        super();
        miClient = client;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlStockValuation = new javax.swing.JLabel();
        moTextStockValuation = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlStockValuation3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moKeyYear = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jbJan = new javax.swing.JButton();
        jbFeb = new javax.swing.JButton();
        jbMar = new javax.swing.JButton();
        jbApr = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jbMay = new javax.swing.JButton();
        jbJun = new javax.swing.JButton();
        jbJul = new javax.swing.JButton();
        jbAug = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jbSep = new javax.swing.JButton();
        jbOct = new javax.swing.JButton();
        jbNov = new javax.swing.JButton();
        jbDec = new javax.swing.JButton();

        setTitle("Valuación de inventarios");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 2, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStockValuation.setText("Método valuación:");
        jlStockValuation.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlStockValuation);

        moTextStockValuation.setText("PROMEDIOS");
        jPanel13.add(moTextStockValuation);

        jPanel2.add(jPanel13);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStockValuation3.setText("Período contable:");
        jlStockValuation3.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlStockValuation3);

        jPanel2.add(jPanel7);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setForeground(new java.awt.Color(0, 0, 255));
        jlYear.setText("Año contable:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlYear);
        jPanel5.add(moKeyYear);

        jPanel2.add(jPanel5);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbJan.setText("Ene");
        jbJan.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jbJan);

        jbFeb.setText("Feb");
        jbFeb.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jbFeb);

        jbMar.setText("Mar");
        jbMar.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jbMar);

        jbApr.setText("Abr");
        jbApr.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jbApr);

        jPanel2.add(jPanel3);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setForeground(new java.awt.Color(0, 0, 255));
        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateStart);

        jPanel2.add(jPanel11);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbMay.setText("May");
        jbMay.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel4.add(jbMay);

        jbJun.setText("Jun");
        jbJun.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel4.add(jbJun);

        jbJul.setText("Jul");
        jbJul.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel4.add(jbJul);

        jbAug.setText("Ago");
        jbAug.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel4.add(jbAug);

        jPanel2.add(jPanel4);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setForeground(new java.awt.Color(0, 0, 255));
        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateEnd);
        jPanel12.add(moDateEnd);

        jPanel2.add(jPanel12);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbSep.setText("Sep");
        jbSep.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel6.add(jbSep);

        jbOct.setText("Oct");
        jbOct.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel6.add(jbOct);

        jbNov.setText("Nov");
        jbNov.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel6.add(jbNov);

        jbDec.setText("Dic");
        jbDec.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel6.add(jbDec);

        jPanel2.add(jPanel6);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbApr;
    private javax.swing.JButton jbAug;
    private javax.swing.JButton jbDec;
    private javax.swing.JButton jbFeb;
    private javax.swing.JButton jbJan;
    private javax.swing.JButton jbJul;
    private javax.swing.JButton jbJun;
    private javax.swing.JButton jbMar;
    private javax.swing.JButton jbMay;
    private javax.swing.JButton jbNov;
    private javax.swing.JButton jbOct;
    private javax.swing.JButton jbSep;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlStockValuation;
    private javax.swing.JLabel jlStockValuation3;
    private javax.swing.JLabel jlYear;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldKey moKeyYear;
    private sa.lib.gui.bean.SBeanFieldText moTextStockValuation;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        jbReadInfo.setEnabled(false);
        jbSave.setText("Valuar");

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moKeyYear.setKeySettings(miClient, SGuiUtils.getLabelName(jlYear.getText()), true);

        moFields.addField(moKeyYear);
        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);

        moFields.setFormButton(jbSave);

        reloadCatalogues();
    }

    /*
     * Private methods
     */

    private void assignDates(final int month) {
        if (moKeyYear.getSelectedIndex() > 0) {
            moDateStart.setValue(SLibTimeUtils.createDate(moKeyYear.getValue()[0], month, 1));
            moDateEnd.setValue(SLibTimeUtils.createDate(moKeyYear.getValue()[0], month, SLibTimeUtils.getMaxDayOfMonth(moDateStart.getValue())));
        }
        else {
            miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlYear.getText()) + "'");
        }
    }

    private void actionKeyYearFocusLost() {
        if (moKeyYear.getValue()[0] != SLibTimeUtils.digestYear(moDateStart.getValue())[0]) {
            assignDates(SLibTimeUtils.digestMonth(moDateStart.getValue())[0]);
        }
    }

    private void editableFields(boolean editable) {
        moKeyYear.setEditable(editable);
        jbJan.setEnabled(editable);
        jbFeb.setEnabled(editable);
        jbMar.setEnabled(editable);
        jbApr.setEnabled(editable);
        jbMay.setEnabled(editable);
        jbJun.setEnabled(editable);
        jbJul.setEnabled(editable);
        jbAug.setEnabled(editable);
        jbSep.setEnabled(editable);
        jbOct.setEnabled(editable);
        jbNov.setEnabled(editable);
        jbDec.setEnabled(editable);
    }

    private boolean queryForDocuments(final int mnFkDpsCategoryId, final int mnFkDpsClassId, final String sqlFkCategoryBizPartnerId, final String sqlDiogPeriod, final String sqlFilter) throws SQLException {
        String sql = "";

        Statement statement = miClient.getSession().getStatement();
        ResultSet resultSet = null;

        sql = "SELECT id_year, id_doc, " +
            "dt, num_ser, num, num_ref, tot_r, tot_cur_r, b_close, ts_close, usr, cur_key, f_num, " +
            "f_dt_code, f_cb_code, id_bp, bp, bp_key, bpb, " +
            "SUM(f_qty) AS f_qty, " +
            "SUM(f_orig_qty) AS f_orig_qty, " +
            "COALESCE(SUM(f_adj_qty), 0) AS f_adj_qty, " +
            "COALESCE(SUM(f_adj_orig_qty), 0) AS f_adj_orig_qty, " +
            "COALESCE(SUM(f_sup_qty), 0) AS f_sup_qty, " +
            "COALESCE(SUM(f_sup_orig_qty), 0) AS f_sup_orig_qty " +
            "FROM (";

        sql += "SELECT de.id_year, de.id_doc, de.id_ety, " +
            "d.dt, d.num_ser, d.num, d.num_ref, d.tot_r, d.tot_cur_r, d.b_close, d.ts_close, uc.usr, c.cur_key, " +
            "CONCAT(d.num_ser, IF(length(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
            "dt.code AS f_dt_code, cb.code AS f_cb_code, b.id_bp, b.bp, bc.bp_key, bb.bpb, " +
            "de.fid_item, de.fid_unit, de.fid_orig_unit, i.item_key, i.item, u.symbol AS f_unit, uo.symbol AS f_orig_unit, " +
            "de.qty AS f_qty, " +
            "de.orig_qty AS f_orig_qty, " +
            "COALESCE((SELECT SUM(ddd.qty) FROM trn_dps_dps_adj AS ddd, trn_dps_ety AS dae, trn_dps AS da WHERE " +
            "ddd.id_dps_year = de.id_year AND ddd.id_dps_doc = de.id_doc AND ddd.id_dps_ety = de.id_ety AND " +
            "ddd.id_adj_year = dae.id_year AND ddd.id_adj_doc = dae.id_doc AND ddd.id_adj_ety = dae.id_ety AND " +
            "dae.id_year = da.id_year AND dae.id_doc = da.id_doc AND " +
            "dae.b_del = 0 AND dae.fid_tp_dps_adj = " + SDataConstantsSys.TRNS_TP_DPS_ADJ_RET + " AND " +
            "da.b_del = 0 AND da.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + "), 0) AS f_adj_qty, " +
            "COALESCE((SELECT SUM(ddd.orig_qty) FROM trn_dps_dps_adj AS ddd, trn_dps_ety AS dae, trn_dps AS da WHERE " +
            "ddd.id_dps_year = de.id_year AND ddd.id_dps_doc = de.id_doc AND ddd.id_dps_ety = de.id_ety AND " +
            "ddd.id_adj_year = dae.id_year AND ddd.id_adj_doc = dae.id_doc AND ddd.id_adj_ety = dae.id_ety AND " +
            "dae.id_year = da.id_year AND dae.id_doc = da.id_doc AND " +
            "dae.b_del = 0 AND dae.fid_tp_dps_adj = " + SDataConstantsSys.TRNS_TP_DPS_ADJ_RET + " AND " +
            "da.b_del = 0 AND da.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + "), 0) AS f_adj_orig_qty, " +
            "COALESCE((SELECT SUM(ge.qty * CASE WHEN ge.fid_dps_adj_year_n IS NULL THEN 1 ELSE -1 END) FROM trn_diog_ety AS ge, trn_diog AS g WHERE " +
            "ge.fid_dps_year_n = de.id_year AND ge.fid_dps_doc_n = de.id_doc AND ge.fid_dps_ety_n = de.id_ety AND " +
            "ge.id_year = g.id_year AND ge.id_doc = g.id_doc AND " + sqlDiogPeriod +
            "ge.b_del = 0 AND g.b_del = 0), 0) AS f_sup_qty, " +
            "COALESCE((SELECT SUM(ge.orig_qty * CASE WHEN ge.fid_dps_adj_year_n IS NULL THEN 1 ELSE -1 END) FROM trn_diog_ety AS ge, trn_diog AS g WHERE " +
            "ge.fid_dps_year_n = de.id_year AND ge.fid_dps_doc_n = de.id_doc AND ge.fid_dps_ety_n = de.id_ety AND " +
            "ge.id_year = g.id_year AND ge.id_doc = g.id_doc AND " + sqlDiogPeriod +
            "ge.b_del = 0 AND g.b_del = 0), 0) AS f_sup_orig_qty " +
            "FROM trn_dps AS d " +
            "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND d.fid_tp_dps = dt.id_tp_dps AND " +
            "d.b_del = 0 AND d.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + " AND " +
            "d.fid_ct_dps = " + mnFkDpsCategoryId + " AND d.fid_cl_dps = " + mnFkDpsClassId + " " + sqlFilter +
            "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
            "INNER JOIN erp.bpsu_bpb AS cb ON d.fid_cob = cb.id_bpb " +
            "INNER JOIN erp.bpsu_bp AS b ON d.fid_bp_r = b.id_bp " +
            "INNER JOIN erp.bpsu_bp_ct AS bc ON d.fid_bp_r = bc.id_bp " + sqlFkCategoryBizPartnerId +
            "INNER JOIN erp.bpsu_bpb AS bb ON d.fid_bpb = bb.id_bpb " +
            "INNER JOIN erp.usru_usr AS uc ON d.fid_usr_close = uc.id_usr " +
            "INNER JOIN trn_dps_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND " +
            "de.b_del = 0 AND de.b_inv = 1 AND de.qty > 0 AND de.orig_qty > 0 " +
            "INNER JOIN erp.itmu_item AS i ON de.fid_item = i.id_item " +
            "INNER JOIN erp.itmu_unit AS u ON de.fid_unit = u.id_unit " +
            "INNER JOIN erp.itmu_unit AS uo ON de.fid_orig_unit = uo.id_unit " +
            "GROUP BY de.id_year, de.id_doc, de.id_ety, " +
            "d.dt, d.num_ser, d.num, d.num_ref, d.tot_r, d.tot_cur_r, d.b_close, d.ts_close, uc.usr, c.cur_key, " +
            "dt.code, cb.code, b.id_bp, b.bp, bc.bp_key, bb.bpb, " +
            "de.fid_item, de.fid_unit, de.fid_orig_unit, i.item_key, i.item, u.symbol, uo.symbol, " +
            "de.qty, de.orig_qty ";

        sql += "HAVING (f_orig_qty - f_adj_orig_qty - f_sup_orig_qty) <> 0 AND d.b_close = 0 ";

        sql += ") AS DPS_ETY_TMP " +  // derived table
                    "GROUP BY id_year, id_doc, " +
                    "dt, num_ser, num, num_ref, tot_r, tot_cur_r, b_close, ts_close, usr, cur_key, f_num, " +
                    "f_dt_code, f_cb_code, id_bp, bp, bp_key, bpb " +
                    "ORDER BY id_year, id_doc, " +
                    "dt, num_ser, num, num_ref, tot_r, tot_cur_r, b_close, ts_close, usr, cur_key, f_num, " +
                    "f_dt_code, f_cb_code, id_bp, bp, bp_key, bpb; ";

        resultSet = statement.executeQuery(sql);

        return resultSet.next() ? true : false;
    }

    private void warningMessages() throws Exception {

        // XXX miClient.showMsgBoxInformation("Aviso: Todos los movs. de E/S de inventarios, así como los gastos de compra y producción deberán estar registrados.");

        try {
            // Validate if there are documents of purchases pending of supply:

            if (queryForDocuments(SDataConstantsSys.TRNS_CL_DPS_PUR_DOC[0], SDataConstantsSys.TRNS_CL_DPS_PUR_DOC[0],
                    "AND bc.id_ct_bp = " + SDataConstantsSys.BPSS_CT_BP_SUP + " ",
                    "g.dt <= '" + SLibUtils.DbmsDateFormatDate.format((moDateEnd.getValue())) + "' AND ",
                    "AND d.dt <= '" + SLibUtils.DbmsDateFormatDate.format((moDateEnd.getValue())) + "' ")) {

                // XXX miClient.showMsgBoxWarning("Aviso: Existen documentos de compras pendientes de surtir.");
            }

            // Validate if there are documents of sales pending of supply:

            if (queryForDocuments(SDataConstantsSys.TRNS_CL_DPS_SAL_DOC[0], SDataConstantsSys.TRNS_CL_DPS_SAL_DOC[0],
                    "AND bc.id_ct_bp = " + SDataConstantsSys.BPSS_CT_BP_CUS + " ",
                    "g.dt <= '" + SLibUtils.DbmsDateFormatDate.format((moDateEnd.getValue())) + "' AND ",
                    "AND d.dt <= '" + SLibUtils.DbmsDateFormatDate.format((moDateEnd.getValue())) + "' ")) {

                // XXX miClient.showMsgBoxWarning("Aviso: Existen documentos de ventas pendientes de surtir.");
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
            // XXX throw new Exception("No se puede consultar la información de compras-ventas por surtir.", e);
        }
    }

    /*
     * Public methods
     */

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyYear, SModConsts.FIN_YEAR, mnFormSubtype, null);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRange(moDateStart, moDateEnd);
        }

        if (validation.isValid()) {
            if (moKeyYear.getValue()[0] != SLibTimeUtils.digestYear(moDateStart.getValue())[0]) {
                validation.setMessage("El '" + SGuiUtils.getLabelName(jlYear) + "' es diferente al año de la '" + SGuiUtils.getLabelName(jlDateStart) + "'.");
            }
            else if (moKeyYear.getValue()[0] != SLibTimeUtils.digestYear(moDateEnd.getValue())[0]) {
                validation.setMessage("El '" + SGuiUtils.getLabelName(jlYear) + "' es diferente al año de la '" + SGuiUtils.getLabelName(jlDateEnd) + "'.");
            }
        }

        return validation;
    }

    @Override
    public void addAllListeners() {
        jbJan.addActionListener(this);
        jbFeb.addActionListener(this);
        jbMar.addActionListener(this);
        jbApr.addActionListener(this);
        jbMay.addActionListener(this);
        jbJun.addActionListener(this);
        jbJul.addActionListener(this);
        jbAug.addActionListener(this);
        jbSep.addActionListener(this);
        jbOct.addActionListener(this);
        jbNov.addActionListener(this);
        jbDec.addActionListener(this);

        moKeyYear.getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbJan.removeActionListener(this);
        jbFeb.removeActionListener(this);
        jbMar.removeActionListener(this);
        jbApr.removeActionListener(this);
        jbMay.removeActionListener(this);
        jbJun.removeActionListener(this);
        jbJul.removeActionListener(this);
        jbAug.removeActionListener(this);
        jbSep.removeActionListener(this);
        jbOct.removeActionListener(this);
        jbNov.removeActionListener(this);
        jbDec.removeActionListener(this);

        moKeyYear.getComponent().removeFocusListener(this);
    }

    /* XXX
    @Override
    public void actionSave() {
        boolean save = true;
        boolean[] canValuateInventoryPurchasing = null;
        boolean[] canValuateInventoryManufacturing = null;

        if (jbSave.isEnabled()) {

            try {

                SDataParamsCompany paramsCompany = ((SDataParamsCompany) miClient.getSession().getConfigCompany());

                if (paramsCompany.getFkMfgCostUnitTypeId() == SLibConsts.UNDEFINED) {
                    miClient.showMsgBoxWarning("No se ha definido la configuración del tipo de unidad para el Cálculo de Costo de Producción.");
                    save = false;
                }

                if (save) {
                    moRegistry.setFkYearYearId(moKeyYear.getValue()[0]);
                    moRegistry.setFkYearPeriodId(SLibTimeUtils.digestMonth(moDateStart.getValue())[1]);

                    moRegistry.setAuxTypeUnitValuation(
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_NA ? "" :
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_QTY ? "" :
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_MASS ? "i.mass" :
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_TIME ? "i.prod_time" :
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_LEN ? "i.len" :
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_SURF ? "i.surf" :
                            paramsCompany.getFkMfgCostUnitTypeId() == SModSysConsts.ITMU_TP_UNIT_VOL ? "i.vol" : "");

                    moRegistry.setAuxAccountMask(SDataUtilities.createMaskFormatterAccountId((SClientInterface) miClient,
                        ((SClientInterface) miClient).getSessionXXX().getParamsErp().getDeepAccounts()).replace("#", "0"));

                    canValuateInventoryPurchasing = moRegistry.validatePurchasingExpensesInventory(miClient.getSession());
                    canValuateInventoryManufacturing = moRegistry.validateManufacturingExpensesInventory(miClient.getSession());

                    if (!canValuateInventoryPurchasing[0] && // Inventory moves
                        !canValuateInventoryPurchasing[1] && // Inventory available for purchases expenses
                        !canValuateInventoryPurchasing[2] && // Purchases expenses
                        !canValuateInventoryManufacturing[0] && // Inventory available for manufacturing expenses
                        !canValuateInventoryManufacturing[1]) { // Manufacturing expenses
                        miClient.showMsgBoxWarning("No hay movimientos de inventarios ni gastos de compra, pero se realizará la valuación.");
                    }
                    else if (!canValuateInventoryManufacturing[0] &&
                            canValuateInventoryManufacturing[1]) {
                            miClient.showMsgBoxError("No hay inventario disponible de producción para asignar los gastos de fabricación.");
                            save = false;
                    }
                }
            }
            catch (Exception e) {
                save = false;
                SLibUtils.showException(this, e);
            }

            if (save) {
                super.actionSave();
            }
        }
    }
    */

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {


        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

         if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moRegistry.setAuxIsConsistent(true);
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyYear.setValue(new int[] { moRegistry.getFkYearYearId() });

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();

            moKeyYear.setValue(new int[] { miClient.getSession().getCurrentYear() });
            moDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getCurrentDate()));
            moDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getCurrentDate()));

            editableFields(true);
        }
        else {
            assignDates(moRegistry.getFkYearPeriodId());
            editableFields(false);
        }

        jbEdit.setEnabled(false);
        moTextStockValuation.setEditable(false);
        moDateStart.setEnabled(false);
        moDateEnd.setEnabled(false);

        addAllListeners();
        // warningMessages();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbInventoryValuationXXX registry = moRegistry.clone();

        if (registry.isRegistryNew()) {

        }

        registry.setFkYearYearId(moKeyYear.getValue()[0]);
        registry.setFkYearPeriodId(SLibTimeUtils.digestMonth(moDateStart.getValue())[1]);

        registry.setAuxDateStart(moDateStart.getValue());
        registry.setAuxDateEnd(moDateEnd.getValue());
        registry.setAuxPeriodQuery("BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(moDateStart.getValue()) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(moDateEnd.getValue()) + "' ");
        registry.setAuxAccountMask(SDataUtilities.createMaskFormatterAccountId((SClientInterface) miClient, ((SClientInterface) miClient).getSessionXXX().getParamsErp().getDeepAccounts()).replace("#", "0"));

        return registry;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbJan) {
                assignDates(SModSysConsts.FIELD_MONTH_JANUARY);
            }
            else if (button == jbFeb) {
                assignDates(SModSysConsts.FIELD_MONTH_FEBRUARY);
            }
            else if (button == jbMar) {
                assignDates(SModSysConsts.FIELD_MONTH_MARCH);
            }
            else if (button == jbApr) {
                assignDates(SModSysConsts.FIELD_MONTH_APRIL);
            }
            else if (button == jbMay) {
                assignDates(SModSysConsts.FIELD_MONTH_MAY);
            }
            else if (button == jbJun) {
                assignDates(SModSysConsts.FIELD_MONTH_JUNE);
            }
            else if (button == jbJul) {
                assignDates(SModSysConsts.FIELD_MONTH_JULY);
            }
            else if (button == jbAug) {
                assignDates(SModSysConsts.FIELD_MONTH_AUGUST);
            }
            else if (button == jbSep) {
                assignDates(SModSysConsts.FIELD_MONTH_SEPTEMBER);
            }
            else if (button == jbOct) {
                assignDates(SModSysConsts.FIELD_MONTH_OCTOBER);
            }
            else if (button == jbNov) {
                assignDates(SModSysConsts.FIELD_MONTH_NOVEMBER);
            }
            else if (button == jbDec) {
                assignDates(SModSysConsts.FIELD_MONTH_DECEMBER);
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyYear) {
                actionKeyYearFocusLost();
            }
        }
    }
}
