/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.mkt.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.mkt.db.SDbCommission;
import erp.mod.mkt.db.SDbCommissionPayment;
import erp.mod.mkt.db.SDbCommissionPaymentEntry;
import erp.mod.mkt.db.SMktCommissionCalculate;
import erp.mod.mkt.db.SMktCommissionsPayableRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.ListSelectionModel;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormCommissionPayment extends SBeanForm implements ActionListener, CellEditorListener, ListSelectionListener {

    protected static final int COL_PER = 2;
    protected static final int COL_PAY = 3;

    private SMktCommissionCalculate moRegistry;
    private SDbCommissionPayment moAuxCommissionPayment;

    private SGridPaneForm moGridPaneCommisionsPayable;
    private SGridPaneForm moGridPaneCommisionsPayed;
    private SGridPaneForm moGridPaneCommisionsEtyPayable;
    private SGridPaneForm moGridPaneCommisionsEtyPayed;

    private int mnParamSalesAgentId;
    private boolean mbUpdateEntriesPayable;
    private boolean mbUpdateEntriesPayed;
    private int mnParamYearId;
    private int mnParamFilter;
    private Date mtParamDateStart;
    private Date mtParamDateEnd;
    private int mnPkYearId;
    private int mnPkDocId;
    private int mnPkEntryId;

    private JCheckBox jckPrintToSave;

    /**
     * Creates new form SFormCommissionPayment
     */
    public SFormCommissionPayment(SGuiClient client, String title, int subtype) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.MKT_COMMS_PAY, subtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jLabel1 = new javax.swing.JLabel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jLabel2 = new javax.swing.JLabel();
        jlSalesAgent = new javax.swing.JLabel();
        moTextSalesAgent = new sa.lib.gui.bean.SBeanFieldText();
        jpDocs = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jpCommisionsPending = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbCommissionAdd = new javax.swing.JButton();
        jbCommissionAddAll = new javax.swing.JButton();
        jbCommissionRemove = new javax.swing.JButton();
        jbCommissionRemoveAll = new javax.swing.JButton();
        jpCommisionsPayed = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jpCommisionsEtyPending = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpCommisionsEtyPayed = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlPayment = new javax.swing.JLabel();
        moDecPayment = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setTitle("Pago de comisiones");

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(1, 1));

        jPanel16.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlNumber);
        jPanel16.add(moIntNumber);

        jLabel1.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jLabel1);

        jlDate.setText("Fecha pago:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDate);
        jPanel16.add(moDateDate);

        jLabel2.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jLabel2);

        jlSalesAgent.setText("Agente ventas:");
        jlSalesAgent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlSalesAgent);

        moTextSalesAgent.setEditable(false);
        moTextSalesAgent.setText("sBeanFieldText1");
        moTextSalesAgent.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel16.add(moTextSalesAgent);

        jPanel9.add(jPanel16);

        jPanel4.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel8.add(jPanel4, java.awt.BorderLayout.NORTH);

        jpDocs.setBorder(javax.swing.BorderFactory.createTitledBorder("Comisiones:"));
        jpDocs.setLayout(new java.awt.GridLayout(2, 1));

        jPanel10.setLayout(new java.awt.BorderLayout());

        jpCommisionsPending.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos por pagar:"));
        jpCommisionsPending.setLayout(new java.awt.BorderLayout());
        jPanel10.add(jpCommisionsPending, java.awt.BorderLayout.WEST);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.GridLayout(5, 1));
        jPanel11.add(jlDummy01);

        jbCommissionAdd.setText(">");
        jbCommissionAdd.setToolTipText("Agregar");
        jbCommissionAdd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jbCommissionAdd);

        jbCommissionAddAll.setText(">>");
        jbCommissionAddAll.setToolTipText("Agregar todos");
        jbCommissionAddAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jbCommissionAddAll);

        jbCommissionRemove.setText("<");
        jbCommissionRemove.setToolTipText("Quitar");
        jbCommissionRemove.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jbCommissionRemove);

        jbCommissionRemoveAll.setText("<<");
        jbCommissionRemoveAll.setToolTipText("Quitar todos");
        jbCommissionRemoveAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jbCommissionRemoveAll);

        jpControls.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel10.add(jpControls, java.awt.BorderLayout.CENTER);

        jpCommisionsPayed.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos pagados:"));
        jpCommisionsPayed.setLayout(new java.awt.BorderLayout());
        jPanel10.add(jpCommisionsPayed, java.awt.BorderLayout.EAST);

        jpDocs.add(jPanel10);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jpCommisionsEtyPending.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas por pagar:"));
        jpCommisionsEtyPending.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jpCommisionsEtyPending, java.awt.BorderLayout.WEST);
        jPanel15.add(jPanel1, java.awt.BorderLayout.CENTER);

        jpCommisionsEtyPayed.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas pagadas:"));
        jpCommisionsEtyPayed.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jpCommisionsEtyPayed, java.awt.BorderLayout.EAST);

        jpDocs.add(jPanel15);

        jPanel8.add(jpDocs, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales:"));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(1, 1));

        jPanel12.setLayout(new java.awt.FlowLayout(2));

        jlPayment.setText("Total pagado:");
        jlPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlPayment);
        jPanel12.add(moDecPayment);

        jPanel7.add(jPanel12);

        jPanel6.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel8, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCommissionAdd;
    private javax.swing.JButton jbCommissionAddAll;
    private javax.swing.JButton jbCommissionRemove;
    private javax.swing.JButton jbCommissionRemoveAll;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPayment;
    private javax.swing.JLabel jlSalesAgent;
    private javax.swing.JPanel jpCommisionsEtyPayed;
    private javax.swing.JPanel jpCommisionsEtyPending;
    private javax.swing.JPanel jpCommisionsPayed;
    private javax.swing.JPanel jpCommisionsPending;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDocs;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecPayment;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextSalesAgent;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        jckPrintToSave = new JCheckBox("Imprimir al guardar");
        
        moAuxCommissionPayment = null;
        mbUpdateEntriesPayable = true;
        mbUpdateEntriesPayed = true;
        jckPrintToSave.setSelected(true);

        moTextSalesAgent.setTextSettings(SGuiUtils.getLabelName(jlNumber.getText()), 200);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlNumber.getText()), SGuiConsts.GUI_TYPE_INT, true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moDecPayment.setCompoundFieldSettings(miClient);
        moDecPayment.getField().setDecimalSettings(SGuiUtils.getLabelName(jlPayment.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        
        //moFields.addField(moTextSalesAgent);
        //moFields.addField(moIntNumber);
        moFields.addField(moDateDate);
        //moFields.addField(moDecPayment.getField());
        moFields.setFormButton(jbSave);

        jpCommandCenter.add(jckPrintToSave);
      
        moGridPaneCommisionsPayable = new SGridPaneForm(miClient, SModConsts.MKTX_COMMS_PAY, SLibConsts.UNDEFINED, "Documentos por pagar", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Tipo doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Cliente"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Comisión $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Pagos $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Ajustes $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal neto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));

                return gridColumnsForm;
            }

            @Override
            public void actionMouseClicked() {
                actionCommissionAdd();
            }

            @Override
            public void populateGrid(final Vector<SGridRow> gridRows, ListSelectionListener listSelectionListener_n) {
                super.populateGrid(gridRows, SFormCommissionPayment.this);
                moGridPaneCommisionsPayable.getTable().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                if (gridRows.size() > 0) {
                    setSelectedGridRow(0);
                }
            }
        };

        moGridPaneCommisionsPayable.setForm(null);
        moGridPaneCommisionsPayable.setPaneFormOwner(null);
        jpCommisionsPending.add(moGridPaneCommisionsPayable, BorderLayout.CENTER);

        moGridPaneCommisionsPayed = new SGridPaneForm(miClient, SModConsts.MKTX_COMMS_PAID, SLibConsts.UNDEFINED, "Documentos pagados", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Tipo doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha doc"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Cliente"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Comisión $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Pagos $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Ajustes $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal neto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));

                return gridColumnsForm;
            }

            @Override
            public void actionMouseClicked() {
                actionCommissionRemove();
            }

            @Override
            public void populateGrid(final Vector<SGridRow> gridRows, ListSelectionListener listSelectionListener_n) {
                super.populateGrid(gridRows, SFormCommissionPayment.this);
                moGridPaneCommisionsPayed.getTable().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                if (gridRows.size() > 0) {
                    setSelectedGridRow(0);
                }
            }
        };

        moGridPaneCommisionsPayed.setForm(null);
        moGridPaneCommisionsPayed.setPaneFormOwner(null);
        jpCommisionsPayed.add(moGridPaneCommisionsPayed, BorderLayout.CENTER);

        moGridPaneCommisionsEtyPayable = new SGridPaneForm(miClient, SModConsts.MKTX_COMMS_PAY_ETY, SLibConsts.UNDEFINED, "Partidas por pagar", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm columnForm = null;

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Ítem"));

                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Comsión %", moGridPaneCommisionsEtyPayable.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Comisión $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Tipo comisión"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Ajustes $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal neto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cantidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));

                moGridPaneCommisionsEtyPayable.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormCommissionPayment.this);

                return gridColumnsForm;
            }

            @Override
            public void populateGrid(final Vector<SGridRow> gridRows, ListSelectionListener listSelectionListener_n) {
                super.populateGrid(gridRows, listSelectionListener_n);
                moGridPaneCommisionsEtyPayable.getTable().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                moGridPaneCommisionsEtyPayable.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormCommissionPayment.this);

                if (gridRows.size() > 0) {
                    setSelectedGridRow(0);
                }
            }
        };

        moGridPaneCommisionsEtyPayable.setForm(null);
        moGridPaneCommisionsEtyPayable.setPaneFormOwner(null);
        jpCommisionsEtyPending.add(moGridPaneCommisionsEtyPayable, BorderLayout.CENTER);

        moGridPaneCommisionsEtyPayed = new SGridPaneForm(miClient, SModConsts.MKTX_COMMS_PAID_ETY, SLibConsts.UNDEFINED, "Partidas pagadas", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm columnForm = null;

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Comisión $"));

                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Pago $", moGridPaneCommisionsEtyPayed.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Tipo comisión"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Ajustes $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Subtotal neto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));

                moGridPaneCommisionsEtyPayed.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormCommissionPayment.this);

                return gridColumnsForm;
            }

            @Override
            public void populateGrid(final Vector<SGridRow> gridRows, ListSelectionListener listSelectionListener_n) {
                super.populateGrid(gridRows, listSelectionListener_n);
                moGridPaneCommisionsEtyPayed.getTable().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                moGridPaneCommisionsEtyPayed.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormCommissionPayment.this);

                if (gridRows.size() > 0) {
                    setSelectedGridRow(0);
                }
            }
        };

        moGridPaneCommisionsEtyPayed.setForm(null);
        moGridPaneCommisionsEtyPayed.setPaneFormOwner(null);
        jpCommisionsEtyPayed.add(moGridPaneCommisionsEtyPayed, BorderLayout.CENTER);

        mvFormGrids.add(moGridPaneCommisionsPayable);
        mvFormGrids.add(moGridPaneCommisionsPayed);
        mvFormGrids.add(moGridPaneCommisionsEtyPayable);
        mvFormGrids.add(moGridPaneCommisionsEtyPayed);
    }

    private void populateCommissionsPayable() throws Exception {
        Vector<SGridRow> rows = new Vector<>();

        moGridPaneCommisionsPayable.populateGrid(rows);
        moGridPaneCommisionsPayed.populateGrid(rows);
        moGridPaneCommisionsEtyPayable.populateGrid(rows);
        moGridPaneCommisionsEtyPayed.populateGrid(rows);

        moGridPaneCommisionsEtyPayable.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormCommissionPayment.this);
        moGridPaneCommisionsEtyPayed.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormCommissionPayment.this);

        for (SMktCommissionsPayableRow row : moRegistry.getMktCommissionsPayableRows()) {
            rows.add(row);
        }

        if (rows.size() > 0) {
            moGridPaneCommisionsPayable.populateGrid(rows, this);
            moGridPaneCommisionsPayable.setSelectedGridRow(0);
        }
    }

    private boolean actionCommissionAdd() {
        int index = 0;
        boolean added = true;
        SDbCommissionPaymentEntry commissionPaymentEntry = null;
        SMktCommissionsPayableRow mktCommissionsPayableRow = null;

        if (moGridPaneCommisionsPayable.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else {
            index = moGridPaneCommisionsPayable.getTable().getSelectedRow();
            if (index != -1) {
                mktCommissionsPayableRow = (SMktCommissionsPayableRow) moGridPaneCommisionsPayable.getSelectedGridRow();

                try {
                    moGridPaneCommisionsPayable.removeGridRow(index);
                    moGridPaneCommisionsPayable.renderGridRows();
                    moGridPaneCommisionsPayable.setSelectedGridRow(index < moGridPaneCommisionsPayable.getTable().getRowCount() ? index : moGridPaneCommisionsPayable.getTable().getRowCount() - 1);

                    mktCommissionsPayableRow.setAuxDpsCommissionPaid(mktCommissionsPayableRow.getAuxDpsCommissionTotal());

                    for (SDbCommission row : mktCommissionsPayableRow.getMktCommisionsEntryPayableRow()) {
                        commissionPaymentEntry = new SDbCommissionPaymentEntry();

                        commissionPaymentEntry.setFkCommsYearId(row.getPkYearId());
                        commissionPaymentEntry.setFkCommsDocId(row.getPkDocId());
                        commissionPaymentEntry.setFkCommsEntryId(row.getPkEntryId());
                        commissionPaymentEntry.setFkCommsSalesAgentId(row.getPkSalesAgentId());
                        commissionPaymentEntry.setPayment(row.getAuxDpsEntryCommissionTotal());
                        commissionPaymentEntry.setRefund(0d);  // XXX calculate

                        commissionPaymentEntry.setAuxItem(row.getAuxDpsEntryItem());
                        commissionPaymentEntry.setAuxItemKey(row.getAuxDpsEntryItemKey());
                        commissionPaymentEntry.setAuxEntrySubtotal(row.getAuxDpsEntrySubtotal());
                        commissionPaymentEntry.setAuxEntryAdjustment(row.getAuxDpsEntryAdjustment());
                        commissionPaymentEntry.setAuxCurrencyKey(row.getAuxDpsEntryCurrencyKey());
                        commissionPaymentEntry.setAuxCommissionsModality(row.getAuxCommissionsModality());
                        commissionPaymentEntry.setAuxCommission(row.getAuxDpsEntryCommission());
                        commissionPaymentEntry.setAuxCommissionTotal(row.getAuxDpsEntryCommissionTotal());
                        commissionPaymentEntry.setAuxCommissionAdjustment(row.getAuxDpsEntryCommissionAdjustment());
                        commissionPaymentEntry.setAuxCommissionPaid(row.getAuxDpsEntryCommissionTotal());

                        moAuxCommissionPayment.getChildCommisionPayment().add(commissionPaymentEntry);
                    }

                    moGridPaneCommisionsPayed.addGridRow(mktCommissionsPayableRow);
                    moGridPaneCommisionsPayed.getTable().getSelectionModel().addListSelectionListener(this);
                    moGridPaneCommisionsPayed.renderGridRows();
                    moGridPaneCommisionsPayed.setSelectedGridRow(moGridPaneCommisionsPayed.getTable().getRowCount() - 1);

                    updateTotal();
                }
                catch (Exception e) {
                    added = false;
                    SLibUtils.showException(this, e);
                }
            }
        }

        return added;
    }

    private void actionCommissionAddAll() {
        int from = 0;
        int rows = moGridPaneCommisionsPayable.getTable().getRowCount();

        for (int row = 0; row < rows; row++) {
            moGridPaneCommisionsPayable.setSelectedGridRow(from);
            if (!actionCommissionAdd()) {
                from++;
            }
        }
    }

    private boolean actionCommissionRemove() {
        int index = 0;
        boolean ok = true;
        ArrayList<SDbCommissionPaymentEntry> commissionPaymentEntriesDelete = null;
        SMktCommissionsPayableRow mktCommissionsPayableRow = null;

        if (moGridPaneCommisionsPayed.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning("Se debe seleccionar un registro.");
            jbCommissionRemove.requestFocus();
        }
        else {
            index = moGridPaneCommisionsPayed.getTable().getSelectedRow();
            if (index != -1) {
                commissionPaymentEntriesDelete = new ArrayList<SDbCommissionPaymentEntry>();
                mktCommissionsPayableRow = (SMktCommissionsPayableRow) moGridPaneCommisionsPayed.getSelectedGridRow();

                try {
                    moGridPaneCommisionsPayed.removeGridRow(index);
                    moGridPaneCommisionsPayed.renderGridRows();
                    moGridPaneCommisionsPayed.setSelectedGridRow(index < moGridPaneCommisionsPayed.getTable().getRowCount() ? index : moGridPaneCommisionsPayed.getTable().getRowCount() - 1);

                    mktCommissionsPayableRow.setAuxDpsCommissionPaid(0d);

                    for (SDbCommission row : mktCommissionsPayableRow.getMktCommisionsEntryPayableRow()) {
                        for (SDbCommissionPaymentEntry rowPay : moAuxCommissionPayment.getChildCommisionPayment()) {
                            if (SLibUtils.compareKeys(row.getPrimaryKey(), rowPay.getForeingKeyCommision())) {
                                commissionPaymentEntriesDelete.add(rowPay);
                                break;
                            }
                        }
                    }

                    for (SDbCommissionPaymentEntry row : commissionPaymentEntriesDelete) {
                        moAuxCommissionPayment.getChildCommisionPayment().remove(row);
                    }

                    moGridPaneCommisionsPayable.addGridRow(mktCommissionsPayableRow);
                    moGridPaneCommisionsPayable.renderGridRows();
                    moGridPaneCommisionsPayable.setSelectedGridRow(moGridPaneCommisionsPayable.getTable().getRowCount() - 1);

                    updateTotal();
                }
                catch (Exception e) {
                    ok = false;
                    SLibUtils.showException(this, e);
                }
            }
        }

        return ok;
    }

    private void actionCommissionRemoveAll() {
        moGridPaneCommisionsPayed.setSelectedGridRow(0);

        while (moGridPaneCommisionsPayed.getSelectedGridRow() != null) {
            if (!actionCommissionRemove()) {
                break;
            }
            moGridPaneCommisionsPayed.setSelectedGridRow(0);
        }
    }

    private void updateTotal() {
        updateCommissionPaymentValues();

        moDecPayment.getField().setValue(moRegistry.getCommissionPayment().getPayment_r());
    }

    private void updateCommissionPaymentValues() {

        moAuxCommissionPayment.setPayment_r(0);
        moAuxCommissionPayment.setRefund_r(0);
        moAuxCommissionPayment.setTotal_r(0);
        for (SDbCommissionPaymentEntry entry : moAuxCommissionPayment.getChildCommisionPayment()) {

            moAuxCommissionPayment.setPayment_r(moAuxCommissionPayment.getPayment_r() + entry.getPayment());
            moAuxCommissionPayment.setRefund_r(moAuxCommissionPayment.getRefund_r() + entry.getRefund());
            moAuxCommissionPayment.setTotal_r(moAuxCommissionPayment.getPayment_r() - moAuxCommissionPayment.getRefund_r());
        }
    }

    private void actiongetLinks() {
        if (mbUpdateEntriesPayable) {
            renderTableEtyPayableColumns();
        }

        if (mbUpdateEntriesPayed) {
            renderTableEtyPayedColumns();
        }
    }

    private void renderTableEtyPayableColumns() {
        Vector<SGridRow> rows = new Vector<>();
        SMktCommissionsPayableRow mktCommissionPayableRow = null;

        if (moGridPaneCommisionsPayable.getTable().getSelectedRow() != -1) {
            mktCommissionPayableRow = (SMktCommissionsPayableRow) moGridPaneCommisionsPayable.getSelectedGridRow();

            for (SDbCommission row : mktCommissionPayableRow.getMktCommisionsEntryPayableRow()) {
                rows.add(row);
            }
        }

        moGridPaneCommisionsEtyPayable.populateGrid(rows);
    }

    private void renderTableEtyPayedColumns() {
        Vector<SGridRow> rows = new Vector<>();
        SMktCommissionsPayableRow mktCommissionPayableRow = null;

        if (moGridPaneCommisionsPayed.getTable().getSelectedRow() != -1) {
            mktCommissionPayableRow = (SMktCommissionsPayableRow) moGridPaneCommisionsPayed.getSelectedGridRow();

            for (SDbCommission row : mktCommissionPayableRow.getMktCommisionsEntryPayableRow()) {
                for (SDbCommissionPaymentEntry rowPay : moAuxCommissionPayment.getChildCommisionPayment()) {
                    if (SLibUtils.compareKeys(row.getPrimaryKey(), rowPay.getForeingKeyCommision())) {
                        rows.add(rowPay);
                    }
                }
            }
        }

        moGridPaneCommisionsEtyPayed.populateGrid(rows);
    }

    private void processEditingAppPercentage() {
        int indexPay = moGridPaneCommisionsPayable.getTable().getSelectedRow();
        int index = moGridPaneCommisionsEtyPayable.getTable().getSelectedRow();

        // Calculate commission:
        calculateCommission();
        updateTotal();

        mbUpdateEntriesPayable = false;

        moGridPaneCommisionsPayable.renderGridRows();
        moGridPaneCommisionsPayable.setSelectedGridRow(indexPay);
        moGridPaneCommisionsEtyPayable.renderGridRows();
        moGridPaneCommisionsEtyPayable.setSelectedGridRow(index);

        mbUpdateEntriesPayable = true;
    }

    private void processEditingAppPayment() {
        double dTotalPayed = 0;
        int indexPayed = moGridPaneCommisionsPayed.getTable().getSelectedRow();
        int index = moGridPaneCommisionsEtyPayed.getTable().getSelectedRow();
        SMktCommissionsPayableRow mktCommissionPayableRow = null;

        mktCommissionPayableRow = (SMktCommissionsPayableRow) moGridPaneCommisionsPayed.getSelectedGridRow();

        for (SDbCommission row : mktCommissionPayableRow.getMktCommisionsEntryPayableRow()) {
            for (SDbCommissionPaymentEntry rowPay : moAuxCommissionPayment.getChildCommisionPayment()) {
                if (SLibUtils.compareKeys(row.getPrimaryKey(), rowPay.getForeingKeyCommision())) {
                    dTotalPayed += rowPay.getPayment();
                }
            }
        }
        mktCommissionPayableRow.setAuxDpsCommissionPaid(dTotalPayed);

        updateTotal();

        mbUpdateEntriesPayed = false;

        moGridPaneCommisionsPayed.renderGridRows();
        moGridPaneCommisionsPayed.setSelectedGridRow(indexPayed);
        moGridPaneCommisionsEtyPayed.renderGridRows();
        moGridPaneCommisionsEtyPayed.setSelectedGridRow(index);

        mbUpdateEntriesPayed = true;
    }

    private void calculateCommission() {
        double dTotalComms = 0;
        double dTotalCommsAdj = 0;
        double dTotalCommsTot = 0;
        SMktCommissionsPayableRow mktCommissionPayableRow = null;

        SDbCommission commission = (SDbCommission) moGridPaneCommisionsEtyPayable.getSelectedGridRow();

        commission.calculateCommission(SModSysConsts.MKTS_TP_COMMS_PER, commission.getPercentage(), commission.getValueUnitary(), commission.getValue(), commission.getAuxDpsEntrySubtotal() - commission.getAuxDpsEntryAdjustment());
        commission.setManual(true);
        commission.setAuxDpsEntryCommission(commission.getCommissions());
        commission.setAuxDpsEntryCommissionTotal(commission.getCommissions());

        mktCommissionPayableRow = (SMktCommissionsPayableRow) moGridPaneCommisionsPayable.getSelectedGridRow();

        for (SDbCommission row : mktCommissionPayableRow.getMktCommisionsEntryPayableRow()) {
            dTotalComms += row.getAuxDpsEntryCommission();
            dTotalCommsAdj += row.getAuxDpsEntryCommissionAdjustment();
            dTotalCommsTot += row.getAuxDpsEntryCommissionTotal();
        }

        mktCommissionPayableRow.setAuxDpsCommission(dTotalComms);
        mktCommissionPayableRow.setAuxDpsCommissionAdjustment(dTotalCommsAdj);
        mktCommissionPayableRow.setAuxDpsCommissionTotal(dTotalCommsTot);

    }

    /*
     * Public methods
     */

    public void setParamSalesAgentId(final int n) {
        mnParamSalesAgentId = n;

        moTextSalesAgent.setText((String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { mnParamSalesAgentId }, SDbRegistry.FIELD_NAME));
    }

    public void setParamYearId(final int n) { mnParamYearId = n; }
    public void setParamFilter(final int n) { mnParamFilter = n; }
    public void setParamDate(final Date t) { moDateDate.setValue(t); }
    public void setParamDateStart(final Date t) { mtParamDateStart = t; }
    public void setParamDateEnd(final Date t) { mtParamDateEnd = t; }
    public boolean isPrintToSave() { return jckPrintToSave.isSelected(); }

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbCommissionAdd.addActionListener(this);
        jbCommissionAddAll.addActionListener(this);
        jbCommissionRemove.addActionListener(this);
        jbCommissionRemoveAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbCommissionAdd.removeActionListener(this);
        jbCommissionAddAll.removeActionListener(this);
        jbCommissionRemove.removeActionListener(this);
        jbCommissionRemoveAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SMktCommissionCalculate) registry;

        moAuxCommissionPayment = moRegistry.getCommissionPayment();

        jtfRegistryKey.setText("");
        
        populateCommissionsPayable();

        moDateDate.setValue(moRegistry.getDateCommissionsCalcuate());
        moTextSalesAgent.setText((String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { moRegistry.getBizPartnerId() }, SDbRegistry.FIELD_NAME));
        moDecPayment.getField().setValue(0d);

        setFormEditable(true);

        moTextSalesAgent.setEditable(false);
        moIntNumber.setEditable(false);
        moDecPayment.setEditable(false);
        
        moDateDate.requestFocus();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        moAuxCommissionPayment.setFkSalesAgentId(moRegistry.getBizPartnerId());
        moAuxCommissionPayment.setDate(moDateDate.getValue());
        moRegistry.setCommissionPayment(moAuxCommissionPayment);

        return moRegistry.clone();
    }

    @Override
    public void setValue(final int type, final Object value) {

    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        try {
            if (evt.getSource() instanceof JButton) {
                JButton button = (JButton) evt.getSource();

                if (button == jbCommissionAdd) {
                    actionCommissionAdd();
                }
                else if (button == jbCommissionAddAll) {
                    actionCommissionAddAll();
                }
                else if (button == jbCommissionRemove) {
                    actionCommissionRemove();
                }
                else if (button == jbCommissionRemoveAll) {
                    actionCommissionRemoveAll();
                }
                else if (button == jbCancel) {
                    actionCancel();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        actiongetLinks();
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridPaneCommisionsEtyPayable.getTable().getSelectedColumn()) {
            case COL_PER:
                processEditingAppPercentage();
                break;
            default:
                break;
        }

        switch (moGridPaneCommisionsEtyPayed.getTable().getSelectedColumn()) {
            case COL_PAY:
                processEditingAppPayment();
                break;
            default:
                break;
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
