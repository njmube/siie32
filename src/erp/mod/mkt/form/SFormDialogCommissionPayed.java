/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.mkt.form;

import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.mkt.db.SDbCommissionPayment;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormDialogCommissionPayed extends SBeanFormDialog {

    private SDbCommissionPayment moRegistry;

    private SGridPaneForm moGridEntries;

    private int[] manPrimaryKey;

    /**
     * Creates new form SFormDialogCommissionPayed
     */
    public SFormDialogCommissionPayed(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.MKTX_COMMS_CONS, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel23, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moFields.setFormButton(jbSave);

        jbSave.setEnabled(false);

        moGridEntries = new SGridPaneForm(miClient, SModConsts.MKTX_COMMS_CONS, SLibConsts.UNDEFINED, "Partidas") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                int col = 0;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm[] columns = new SGridColumnForm[7];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Agente ventas");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Pago $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Reembolso $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda");

                gridColumnsForm.addAll(Arrays.asList((SGridColumnForm[]) columns));

                return gridColumnsForm;
            }
        };

        mvFormGrids.add(moGridEntries);
        //moFormShipmentDestinyEntry = new SFormDialogShipmentDps(miClient, "Partida");
        moGridEntries.setForm(null);
        moGridEntries.setPaneFormOwner(null);

        jPanel23.add(moGridEntries, BorderLayout.CENTER);
    }

    public void setPrimaryKey(final int[] key) {
        manPrimaryKey = key;
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        Vector<SGridRow> vRows = new Vector<>();
        try {
            moRegistry.getRows(miClient.getSession(), manPrimaryKey);

            /*
            for (SMktCommissionPaymentRow row : moRegistry.getMktCommissionPaymentRow()) {

                vRows.add(row);
            }
            */
        } catch (Exception e) {
            SLibUtils.printException(this, e);
        }

        moGridEntries.populateGrid(vRows);
        moGridEntries.clearSortKeys();
        moGridEntries.setSelectedGridRow(0);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbCommissionPayment) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
        }

        if (moRegistry.isRegistryNew()) { }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbCommissionPayment registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {

    }

    @Override
    public Object getValue(final int type) {

        return null;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }
}
