/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.Date;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Néstor Ávalos
 */
public class SDialogFormerPayrollDate extends SBeanFormDialog implements FocusListener {

    public static Date moDateValueEmission;
    public static Date moDateValuePayment;

    /**
     * Creates new form SDialogFormerPayrollDate
     */

    public SDialogFormerPayrollDate(SGuiClient client, int formSubtype, String title) {
        setFormSettings(client, SModConsts.HRSX_DATE, formSubtype, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateEmission = new javax.swing.JLabel();
        moDateEmission = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDatePayment = new javax.swing.JLabel();
        moDatePayment = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel3 = new javax.swing.JPanel();
        moBoolGenerateCfdiPendingSigned = new sa.lib.gui.bean.SBeanFieldBoolean();

        setTitle("Generación de CFDI");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEmission.setText("Fecha emisión:*");
        jlDateEmission.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateEmission);
        jPanel11.add(moDateEmission);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatePayment.setText("Fecha pago:*");
        jlDatePayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDatePayment);
        jPanel12.add(moDatePayment);

        jPanel2.add(jPanel12);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolGenerateCfdiPendingSigned.setText("Solo regenerar CFDI por timbrar");
        moBoolGenerateCfdiPendingSigned.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel3.add(moBoolGenerateCfdiPendingSigned);

        jPanel2.add(jPanel3);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jlDateEmission;
    private javax.swing.JLabel jlDatePayment;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolGenerateCfdiPendingSigned;
    private sa.lib.gui.bean.SBeanFieldDate moDateEmission;
    private sa.lib.gui.bean.SBeanFieldDate moDatePayment;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 320, 200);

        moDateValueEmission = miClient.getSession().getCurrentDate();
        moDateValuePayment = null;

        jbSave.setText("Aceptar");

        moDateEmission.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEmission.getText()), true);
        moDatePayment.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatePayment.getText()), true);
        moBoolGenerateCfdiPendingSigned.setBooleanSettings(moBoolGenerateCfdiPendingSigned.getText(), false);

        moFields.addField(moDateEmission);
        moFields.addField(moDatePayment);
        moFields.addField(moBoolGenerateCfdiPendingSigned);

        moFields.setFormButton(jbSave);

        moDateEmission.setValue(miClient.getSession().getCurrentDate());
        moDatePayment.setValue(null);

        reloadCatalogues();
        addAllListeners();
    }

    public Date getDateEmission() { return moDateValueEmission; }
    public Date getDatePayment() { return moDateValuePayment; }
    public boolean getGenerateCfdiPendingSigned() { return moBoolGenerateCfdiPendingSigned.getValue(); }

    public void setFormReset() {
        moDateEmission.setValue(miClient.getSession().getCurrentDate());
        moDatePayment.setValue(null);
        moBoolGenerateCfdiPendingSigned.setValue(true);
    }

    public void reloadCatalogues() {

    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void addAllListeners() {
        moDateEmission.getComponent().addFocusListener(this);
        moDatePayment.getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moDateEmission.getComponent().removeFocusListener(this);
        moDatePayment.getComponent().removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {

    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDateEmission.getComponent()) {

                moDateValueEmission = moDateEmission.getValue();
            } else if (textField == moDatePayment.getComponent()) {

                moDateValuePayment = moDatePayment.getValue();
            }
        }
    }
}
