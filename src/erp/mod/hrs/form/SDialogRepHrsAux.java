/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;

/**
 *
 * @author Juan Barajas
 */
public class SDialogRepHrsAux extends SBeanDialogReport {
    
    /**
     * Creates new form SDialogRepHrsAux
     */
    public SDialogRepHrsAux(SGuiClient client, int type, String title) {
        setFormSettings(client, type, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel13 = new javax.swing.JPanel();
        jlEmployee = new javax.swing.JLabel();
        moKeyEmployee = new sa.lib.gui.bean.SBeanFieldKey();
        moBoolAllEmployee = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel15 = new javax.swing.JPanel();
        jlEarningDeduction = new javax.swing.JLabel();
        moKeyEarningDeduction = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateDateStart);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateEnd);
        jPanel12.add(moDateDateEnd);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlEmployee.setText("Empleado:");
        jlEmployee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlEmployee);

        moKeyEmployee.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(moKeyEmployee);

        moBoolAllEmployee.setText("Ver todos");
        moBoolAllEmployee.setPreferredSize(new java.awt.Dimension(75, 23));
        moBoolAllEmployee.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moBoolAllEmployeeItemStateChanged(evt);
            }
        });
        jPanel13.add(moBoolAllEmployee);

        jPanel2.add(jPanel13);

        jPanel15.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlEarningDeduction.setText("Percepción:");
        jlEarningDeduction.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlEarningDeduction);

        moKeyEarningDeduction.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel15.add(moKeyEarningDeduction);

        jPanel2.add(jPanel15);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void moBoolAllEmployeeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moBoolAllEmployeeItemStateChanged
        populateEmployee();
    }//GEN-LAST:event_moBoolAllEmployeeItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlEarningDeduction;
    private javax.swing.JLabel jlEmployee;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolAllEmployee;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningDeduction;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployee;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moKeyEmployee.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployee.getText()), false);
        moKeyEarningDeduction.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningDeduction.getText()), false);

        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        moFields.addField(moKeyEmployee);
        moFields.addField(moKeyEarningDeduction);

        moFields.setFormButton(jbPrint);

        moDateDateStart.setValue(SLibTimeUtils.getBeginOfYear(miClient.getSession().getCurrentDate()));
        moDateDateEnd.setValue(SLibTimeUtils.getEndOfYear(miClient.getSession().getCurrentDate()));
        
        jlEarningDeduction.setText(mnFormType == SModConsts.HRSR_AUX_EAR || mnFormType == SModConsts.HRSR_AUX_EAR_EMP ? "Percepción:" : "Deducción:");
        
        
        moKeyEmployee.setEnabled(mnFormType == SModConsts.HRSR_AUX_EAR_EMP || mnFormType == SModConsts.HRSR_AUX_DED_EMP);
        moBoolAllEmployee.setEnabled(mnFormType == SModConsts.HRSR_AUX_EAR_EMP || mnFormType == SModConsts.HRSR_AUX_DED_EMP);
        
        reloadCatalogues();
    }

    private void populateEmployee() {
        if (moBoolAllEmployee.getValue()) {
            miClient.getSession().populateCatalogue(moKeyEmployee, erp.mod.SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, new SGuiParams(SGuiConsts.PARAM_BPR_TP));
        }
        else {
            miClient.getSession().populateCatalogue(moKeyEmployee, erp.mod.SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, null);
        }
    }

    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEmployee, erp.mod.SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEarningDeduction, mnFormType == SModConsts.HRSR_AUX_EAR || mnFormType == SModConsts.HRSR_AUX_EAR_EMP ? SModConsts.HRS_EAR : SModConsts.HRS_DED, SLibConsts.UNDEFINED, null);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRange(moDateDateStart, moDateDateEnd);
        }

        return validation;
    }

    @Override
    public void createParamsMap() {
        moParamsMap = miClient.createReportParams();

        moParamsMap.put("tDateStart", moDateDateStart.getValue());
        moParamsMap.put("tDateEnd", moDateDateEnd.getValue());
        moParamsMap.put("sTitle", mnFormType == SModConsts.HRSR_AUX_EAR_EMP ? "DE PERCEPCIONES POR EMPLEADO" : mnFormType == SModConsts.HRSR_AUX_DED_EMP ? 
                "DE DEDUCCIONES POR EMPLEADO" : mnFormType == SModConsts.HRSR_AUX_EAR ? "DE PERCEPCIONES" : "DE DEDUCCIONES");
        moParamsMap.put("bByEmployee", mnFormType == SModConsts.HRSR_AUX_EAR_EMP || mnFormType == SModConsts.HRSR_AUX_DED_EMP);
        moParamsMap.put("sEmployee", moKeyEmployee.getSelectedIndex() > 0 ? moKeyEmployee.getSelectedItem() : "(TODOS)");
        moParamsMap.put("sEarningDeduction", mnFormType == SModConsts.HRSR_AUX_EAR || mnFormType == SModConsts.HRSR_AUX_EAR_EMP ? "PERCEPCIÓN" : "DEDUCCIÓN");
        moParamsMap.put("sEarningDeductionFilter", moKeyEarningDeduction.getSelectedIndex() > 0 ? moKeyEarningDeduction.getSelectedItem() : "(TODAS)");
        moParamsMap.put("sEarningDeductionFilter", moKeyEarningDeduction.getSelectedIndex() > 0 ? moKeyEarningDeduction.getSelectedItem() : "(TODAS)");
        moParamsMap.put("sSqlOrderBy",mnFormType == SModConsts.HRSR_AUX_EAR_EMP ? "ORDER BY bp.bp, bp.id_bp, ear.code, ear.name, ear.id_ear, p.dt_sta " : 
                mnFormType == SModConsts.HRSR_AUX_DED_EMP ? "ORDER BY bp.bp, bp.id_bp, ded.code, ded.name, ded.id_ded, p.dt_sta " : 
                mnFormType == SModConsts.HRSR_AUX_EAR ? "ORDER BY ear.code, ear.name, ear.id_ear, p.dt_sta " : "ORDER BY ded.code, ded.name, ded.id_ded, p.dt_sta ");
        moParamsMap.put("sSqlWhereEmployee", moKeyEmployee.getSelectedIndex() > 0 ? " AND emp.id_emp = " + moKeyEmployee.getValue()[0] : "");
        if (mnFormType == SModConsts.HRSR_AUX_EAR_EMP || mnFormType == SModConsts.HRSR_AUX_EAR) {
            moParamsMap.put("sSqlWhereEarningDeduction", moKeyEarningDeduction.getSelectedIndex() > 0 ?" AND ear.id_ear = " +  moKeyEarningDeduction.getValue()[0] : "");
        }
        else {
            moParamsMap.put("sSqlWhereEarningDeduction", moKeyEarningDeduction.getSelectedIndex() > 0 ?" AND ded.id_ded = " +  moKeyEarningDeduction.getValue()[0] : "");
        }
    }
}
