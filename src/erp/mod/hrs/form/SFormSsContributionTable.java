/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbSsContributionTable;
import erp.mod.hrs.db.SDbSsContributionTableRow;
import erp.mod.hrs.db.SHrsConsts;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormSsContributionTable extends SBeanForm implements ActionListener {

    private SDbSsContributionTable moRegistry;
    private SGridPaneForm moGridTableRows;

    /**
     * Creates new form SFormSsContributionTable
     */
    public SFormSsContributionTable(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_SSC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jlSubconcept = new javax.swing.JLabel();
        jlWorkerPercentage = new javax.swing.JLabel();
        jlCompanyPercentage = new javax.swing.JLabel();
        jlLowerLimitMwzReference = new javax.swing.JLabel();
        jlLimitMwzReference = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        moTextConcept = new sa.lib.gui.bean.SBeanFieldText();
        moTextSubconcept = new sa.lib.gui.bean.SBeanFieldText();
        moDecWorkerPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        moDecCompanyPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        moIntLowerLimitMwzReference = new sa.lib.gui.bean.SBeanFieldInteger();
        moIntLimitMwzReference = new sa.lib.gui.bean.SBeanFieldInteger();
        jbRowAdd = new javax.swing.JButton();
        jpGrid = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jbRowUp = new javax.swing.JButton();
        jbRowDown = new javax.swing.JButton();
        jbRowRemove = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la tabla:"));
        jPanel2.setLayout(new java.awt.GridLayout(1, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateStart.setText("Inicio vigencia:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDateStart);
        jPanel4.add(moDateDateStart);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Renglones de la tabla:"));
        jPanel6.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlConcept.setText("Concepto:");
        jlConcept.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jlConcept);

        jlSubconcept.setText("Subconcepto:");
        jlSubconcept.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jlSubconcept);

        jlWorkerPercentage.setText("% obrero:");
        jlWorkerPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlWorkerPercentage);

        jlCompanyPercentage.setText("% patrón:");
        jlCompanyPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlCompanyPercentage);

        jlLowerLimitMwzReference.setText("Límite inf. SMAR:");
        jlLowerLimitMwzReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlLowerLimitMwzReference);

        jlLimitMwzReference.setText("Tope SMAR:");
        jlLimitMwzReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlLimitMwzReference);

        jPanel7.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(3, 5, 0));

        moTextConcept.setText("sBeanFieldText1");
        moTextConcept.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moTextConcept);

        moTextSubconcept.setText("sBeanFieldText2");
        moTextSubconcept.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moTextSubconcept);
        jPanel9.add(moDecWorkerPercentage);
        jPanel9.add(moDecCompanyPercentage);
        jPanel9.add(moIntLowerLimitMwzReference);
        jPanel9.add(moIntLimitMwzReference);

        jbRowAdd.setText("Agregar");
        jbRowAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jbRowAdd);

        jPanel7.add(jPanel9);

        jPanel6.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jpGrid.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jbRowUp.setText("Subir");
        jbRowUp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jbRowUp);

        jbRowDown.setText("Bajar");
        jbRowDown.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jbRowDown);

        jbRowRemove.setText("Eliminar");
        jbRowRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jbRowRemove);

        jPanel10.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel6.add(jPanel10, java.awt.BorderLayout.LINE_END);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbRowAdd;
    private javax.swing.JButton jbRowDown;
    private javax.swing.JButton jbRowRemove;
    private javax.swing.JButton jbRowUp;
    private javax.swing.JLabel jlCompanyPercentage;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlLimitMwzReference;
    private javax.swing.JLabel jlLowerLimitMwzReference;
    private javax.swing.JLabel jlSubconcept;
    private javax.swing.JLabel jlWorkerPercentage;
    private javax.swing.JPanel jpGrid;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCompanyPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWorkerPercentage;
    private sa.lib.gui.bean.SBeanFieldInteger moIntLimitMwzReference;
    private sa.lib.gui.bean.SBeanFieldInteger moIntLowerLimitMwzReference;
    private sa.lib.gui.bean.SBeanFieldText moTextConcept;
    private sa.lib.gui.bean.SBeanFieldText moTextSubconcept;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moTextConcept.setTextSettings(SGuiUtils.getLabelName(jlConcept), 100, 0);
        moTextSubconcept.setTextSettings(SGuiUtils.getLabelName(jlSubconcept), 100, 0);
        moDecWorkerPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlWorkerPercentage), SGuiConsts.GUI_TYPE_DEC_PER, false);
        moDecCompanyPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlCompanyPercentage), SGuiConsts.GUI_TYPE_DEC_PER, false);
        moIntLowerLimitMwzReference.setIntegerSettings(SGuiUtils.getLabelName(jlLowerLimitMwzReference), SGuiConsts.GUI_TYPE_INT, false);
        moIntLimitMwzReference.setIntegerSettings(SGuiUtils.getLabelName(jlLimitMwzReference), SGuiConsts.GUI_TYPE_INT, false);

        moFields.addField(moDateDateStart);
        moFields.addField(moTextConcept);
        moFields.addField(moTextSubconcept);
        moFields.addField(moDecWorkerPercentage);
        moFields.addField(moDecCompanyPercentage);
        moFields.addField(moIntLowerLimitMwzReference);
        moFields.addField(moIntLimitMwzReference);

        //moFields.setFormButton(jbRowAdd);
        moFields.setFormButton(jbSave);

        moGridTableRows = new SGridPaneForm(miClient, SModConsts.HRS_SSC_ROW, SLibConsts.UNDEFINED, "Renglones tabla") {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm column = null;
                ArrayList<SGridColumnForm> columns = new ArrayList<SGridColumnForm>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Concepto"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Subconcepto"));
                column = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_8D, "% obrero");
                column.setEditable(true);
                columns.add(column);
                column = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_8D, "% patrón");
                column.setEditable(true);
                columns.add(column);
                column = new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Límite inf. SMAR");
                column.setEditable(true);
                columns.add(column);
                column = new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Tope SMAR");
                column.setEditable(true);
                columns.add(column);

                return columns;
            }
        };

        jpGrid.add(moGridTableRows, BorderLayout.CENTER);
        mvFormGrids.add(moGridTableRows);
    }

    private void cleanRowFields() {
        moTextConcept.setValue("");
        moTextSubconcept.setValue("");
        moDecWorkerPercentage.setValue(0d);
        moDecCompanyPercentage.setValue(0d);
        moIntLowerLimitMwzReference.setValue(0);
        moIntLimitMwzReference.setValue(0);
    }

    private ArrayList<SDbSsContributionTableRow> createNewTableRows() {
        int id = 0;
        SDbSsContributionTableRow row = null;
        ArrayList<SDbSsContributionTableRow> rows = new ArrayList<SDbSsContributionTableRow>();

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_INC_MON);
        row.setConcept("1. SEGURO ENFERMEDADES Y MATERNIDAD");
        row.setSubconcept("PRESTACIONES EN DINERO");
        row.setWorkerPercentage(0.0025);
        row.setCompanyPercentage(0.007);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_INC_KND_SSC_LET);
        row.setConcept("1. SEGURO ENFERMEDADES Y MATERNIDAD");
        row.setSubconcept("PRESTACIONES EN ESPECIE (TRABAJADORES CON SBC <= 3 SMGVDF)");
        row.setWorkerPercentage(0.0);
        row.setCompanyPercentage(0.204);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_INC_KND_SSC_GT);
        row.setConcept("1. SEGURO ENFERMEDADES Y MATERNIDAD");
        row.setSubconcept("PRESTACIONES EN ESPECIE (TRABAJADORES CON SBC > 3 SMGVDF)");
        row.setWorkerPercentage(0.004);
        row.setCompanyPercentage(0.011);
        row.setLowerLimitMwzReference(3);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_INC_PEN);
        row.setConcept("1. SEGURO ENFERMEDADES Y MATERNIDAD");
        row.setSubconcept("PRESTACIONES EN ESPECIE (PENSIONADOS Y SUS BENEFICIARIOS)");
        row.setWorkerPercentage(0.00375);
        row.setCompanyPercentage(0.0105);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_DIS_LIF);
        row.setConcept("2. SEGURO DE INVALIDEZ Y VIDA");
        row.setSubconcept("");
        row.setWorkerPercentage(0.00625);
        row.setCompanyPercentage(0.0175);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_CRE);
        row.setConcept("3. GUARDERÍAS Y PRESTACIONES SOCIALES");
        row.setSubconcept("");
        row.setWorkerPercentage(0.0);
        row.setCompanyPercentage(0.01);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_RSK);
        row.setConcept("4. SEGURO DE RIESGOS DE TRABAJO");
        row.setSubconcept("");
        row.setWorkerPercentage(0.0);
        row.setCompanyPercentage(0.2);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_RET);
        row.setConcept("5. SEGURO DE RETIRO");
        row.setSubconcept("");
        row.setWorkerPercentage(0.0);
        row.setCompanyPercentage(0.02);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_SEV);
        row.setConcept("6. CESANTÍA EN EDAD AVANZADA Y VEJEZ");
        row.setSubconcept("");
        row.setWorkerPercentage(0.01125);
        row.setCompanyPercentage(0.0315);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        row = new SDbSsContributionTableRow();
        row.setPkRowId(SHrsConsts.SS_HOM);
        row.setConcept("7. APORTACIÓN PATRONAL INFONAVIT");
        row.setSubconcept("");
        row.setWorkerPercentage(0.0);
        row.setCompanyPercentage(0.05);
        row.setLowerLimitMwzReference(0);
        row.setLimitMwzReference(25);
        rows.add(row);

        return rows;
    }

    private void actionRowAdd() {
        if (moTextConcept.getValue().isEmpty()) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlConcept) + "'.");
            moTextConcept.requestFocus();
        }
        else if (moDecCompanyPercentage.getValue() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlCompanyPercentage) + "'.");
            moDecCompanyPercentage.requestFocus();
        }
        else if (moIntLimitMwzReference.getValue() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlLimitMwzReference) + "'.");
            moIntLimitMwzReference.requestFocus();
        }
        else {
            SDbSsContributionTableRow row = new SDbSsContributionTableRow();
            row.setPkRowId(moGridTableRows.getTable().getRowCount() + 1);
            row.setConcept(moTextConcept.getValue());
            row.setSubconcept(moTextSubconcept.getValue());
            row.setWorkerPercentage(moDecWorkerPercentage.getValue());
            row.setCompanyPercentage(moDecCompanyPercentage.getValue());
            row.setLowerLimitMwzReference(moIntLowerLimitMwzReference.getValue());
            row.setLimitMwzReference(moIntLimitMwzReference.getValue());
            moGridTableRows.addGridRow(row);
            moGridTableRows.renderGridRows();
            moGridTableRows.setSelectedGridRow(moGridTableRows.getTable().getRowCount() - 1);

            cleanRowFields();
            moTextConcept.requestFocus();
        }
    }

    private void actionRowUp() {
        int index = moGridTableRows.getTable().getSelectedRow();
        SDbSsContributionTableRow rowA = null;
        SDbSsContributionTableRow rowB = null;

        if (index == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else if (index > 0) {
            rowA = (SDbSsContributionTableRow) moGridTableRows.getGridRow(index - 1);
            rowB = (SDbSsContributionTableRow) moGridTableRows.getGridRow(index);
            rowA.setPkRowId(rowA.getPkRowId() + 1);
            rowB.setPkRowId(rowA.getPkRowId() - 1);
            moGridTableRows.setGridRow(rowB, index - 1);
            moGridTableRows.setGridRow(rowA, index);
            moGridTableRows.renderGridRows();
            moGridTableRows.setSelectedGridRow(index - 1);
        }
    }

    private void actionRowDown() {
        int index = moGridTableRows.getTable().getSelectedRow();
        SDbSsContributionTableRow rowA = null;
        SDbSsContributionTableRow rowB = null;

        if (index == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else if (index < moGridTableRows.getTable().getRowCount() - 1) {
            rowA = (SDbSsContributionTableRow) moGridTableRows.getGridRow(index);
            rowB = (SDbSsContributionTableRow) moGridTableRows.getGridRow(index + 1);
            rowA.setPkRowId(rowA.getPkRowId() + 1);
            rowB.setPkRowId(rowA.getPkRowId() - 1);
            moGridTableRows.setGridRow(rowB, index);
            moGridTableRows.setGridRow(rowA, index + 1);
            moGridTableRows.renderGridRows();
            moGridTableRows.setSelectedGridRow(index + 1);
        }
    }

    private void actionRowRemove() {
        int index = moGridTableRows.getTable().getSelectedRow();
        int count = 0;

        if (index == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else if (miClient.showMsgBoxConfirm(SGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
            count = moGridTableRows.getTable().getRowCount();
            moGridTableRows.removeGridRow(index);

            for (int i = 0; i < count - 1; i++) {
                ((SDbSsContributionTableRow) moGridTableRows.getGridRow(i)).setPkRowId(i + 1);
            }

            moGridTableRows.renderGridRows();

            if (moGridTableRows.getTable().getRowCount() > 0) {
                moGridTableRows.setSelectedGridRow(index < moGridTableRows.getTable().getRowCount() ? index : index - 1);
            }
        }
    }

    @Override
    public void addAllListeners() {
        jbRowAdd.addActionListener(this);
        jbRowUp.addActionListener(this);
        jbRowDown.addActionListener(this);
        jbRowRemove.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbRowAdd.removeActionListener(this);
        jbRowUp.removeActionListener(this);
        jbRowDown.removeActionListener(this);
        jbRowRemove.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        Vector<SGridRow> rows = new Vector<SGridRow>();

        moRegistry = (SDbSsContributionTable) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDateStart(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");

            if (moRegistry.getChildRows().isEmpty()) {
                moRegistry.getChildRows().addAll(createNewTableRows());
            }
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moDateDateStart.setValue(moRegistry.getDateStart());

        cleanRowFields();

        for (SDbSsContributionTableRow row : moRegistry.getChildRows()) {
            rows.add(row);
        }

        moGridTableRows.populateGrid(rows);
        moGridTableRows.getTable().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        moGridTableRows.getTable().setColumnSelectionAllowed(false);
        moGridTableRows.getTable().getTableHeader().setReorderingAllowed(false);
        moGridTableRows.getTable().getTableHeader().setResizingAllowed(true);
        moGridTableRows.getTable().setRowSorter(new TableRowSorter<AbstractTableModel>(moGridTableRows.getModel()));
        moGridTableRows.getTable().getTableHeader().setEnabled(false);
        moGridTableRows.resetSortKeys();
        moGridTableRows.setSelectedGridRow(0);

        setFormEditable(true);
        jbEdit.setEnabled(false);
        jbRowAdd.setEnabled(false);
        jbRowUp.setEnabled(false);
        jbRowDown.setEnabled(false);
        jbRowRemove.setEnabled(false);
        
        moTextConcept.setEditable(false);
        moTextSubconcept.setEditable(false);
        moDecWorkerPercentage.setEditable(false);
        moDecCompanyPercentage.setEditable(false);
        moIntLowerLimitMwzReference.setEditable(false);
        moIntLimitMwzReference.setEditable(false);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbSsContributionTable registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setDateStart(moDateDateStart.getValue());

        registry.getChildRows().clear();

        for (int i = 0; i < moGridTableRows.getTable().getRowCount(); i++) {
            registry.getChildRows().add((SDbSsContributionTableRow) moGridTableRows.getGridRow(i));
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridTableRows.getTable().getRowCount() == 0) {
                validation.setMessage("La tabla no tiene renglones.");
                validation.setComponent(moTextConcept);
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbRowAdd) {
                actionRowAdd();
            }
            else if (button == jbRowUp) {
                actionRowUp();
            }
            else if (button == jbRowDown) {
                actionRowDown();
            }
            else if (button == jbRowRemove) {
                actionRowRemove();
            }
        }
    }
}
