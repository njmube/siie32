/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbTaxSubsidyTable;
import erp.mod.hrs.db.SDbTaxTable;
import erp.mod.hrs.db.SHrsAmountEarning;
import erp.mod.hrs.db.SHrsCalculateEstimateISR;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsUtils;
import static erp.mod.hrs.db.SHrsUtils.getRecentTaxSubsidyTable;
import static erp.mod.hrs.db.SHrsUtils.getRecentTaxTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldCalendarYear;
import sa.lib.gui.bean.SBeanFieldRadio;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas
 */
public class SDialogCalculateEstimateIncomeTax extends SBeanFormDialog implements ActionListener, ChangeListener  {

    protected SGridPaneForm moGridEmployeesRow;
    protected int mnDaysPeriod;
    
    /**
     * Creates new form SDialogCalculateEstimateIncomeTax
     * @param client
     * @param title
     */
    public SDialogCalculateEstimateIncomeTax(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_SSC_UPD, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moGrpTypeDate = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moKeyPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlTax = new javax.swing.JLabel();
        moKeyTax = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        moRadFilterTypeDateCut = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadFilterTypeYear = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel26 = new javax.swing.JPanel();
        jlTaxSubsidy = new javax.swing.JLabel();
        moKeyTaxSubsidy = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel27 = new javax.swing.JPanel();
        jlDateCut = new javax.swing.JLabel();
        moDateDateCut = new sa.lib.gui.bean.SBeanFieldDate();
        jlYear = new javax.swing.JLabel();
        moCalYear = new sa.lib.gui.bean.SBeanFieldCalendarYear();
        jPanel28 = new javax.swing.JPanel();
        jbCalculate = new javax.swing.JButton();
        jbClean = new javax.swing.JButton();
        jpEmployee = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(3, 2, 0, 5));

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentType.setText("Periodo pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlPaymentType);

        moKeyPaymentType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel29.add(moKeyPaymentType);

        jPanel13.add(jPanel29);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTax.setText("Tabla impuesto:*");
        jlTax.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel25.add(jlTax);

        moKeyTax.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(moKeyTax);

        jPanel13.add(jPanel25);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moGrpTypeDate.add(moRadFilterTypeDateCut);
        moRadFilterTypeDateCut.setSelected(true);
        moRadFilterTypeDateCut.setText("Por fecha de corte");
        moRadFilterTypeDateCut.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(moRadFilterTypeDateCut);

        moGrpTypeDate.add(moRadFilterTypeYear);
        moRadFilterTypeYear.setText("Por ejercicio");
        moRadFilterTypeYear.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(moRadFilterTypeYear);

        jPanel13.add(jPanel9);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxSubsidy.setText("Tabla subsidio al impuesto:*");
        jlTaxSubsidy.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel26.add(jlTaxSubsidy);

        moKeyTaxSubsidy.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moKeyTaxSubsidy);

        jPanel13.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCut.setText("Fecha corte:");
        jlDateCut.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlDateCut);
        jPanel27.add(moDateDateCut);

        jlYear.setText("Ejercicio:");
        jlYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jlYear);
        jPanel27.add(moCalYear);

        jPanel13.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbCalculate.setText("Calcular");
        jbCalculate.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCalculate.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel28.add(jbCalculate);

        jbClean.setText("Limpiar");
        jbClean.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClean.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel28.add(jbClean);

        jPanel13.add(jPanel28);

        jPanel7.add(jPanel13, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel7, java.awt.BorderLayout.NORTH);

        jpEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados:"));
        jpEmployee.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpEmployee, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCalculate;
    private javax.swing.JButton jbClean;
    private javax.swing.JLabel jlDateCut;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlTax;
    private javax.swing.JLabel jlTaxSubsidy;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpEmployee;
    private sa.lib.gui.bean.SBeanFieldCalendarYear moCalYear;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateCut;
    private javax.swing.ButtonGroup moGrpTypeDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPaymentType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTax;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTaxSubsidy;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterTypeDateCut;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterTypeYear;
    // End of variables declaration//GEN-END:variables

    private void enableFields(boolean enable) {
        moKeyPaymentType.setEnabled(enable);
        moRadFilterTypeDateCut.setEnabled(enable);
        moRadFilterTypeYear.setEnabled(enable);
        moDateDateCut.setEditable(enable);
        moCalYear.setEditable(enable);
        jbCalculate.setEnabled(enable);
        jbClean.setEnabled(!enable);
    }
    
    private void actionEnableFieldsTypeCal() {
        if (moRadFilterTypeDateCut.isSelected()) {
            moDateDateCut.setEditable(true);
            moCalYear.setEditable(true);
        }
        else if (moRadFilterTypeYear.isSelected()) {
            moDateDateCut.setEditable(false);
            moCalYear.setEditable(true);
            actionStateChangeYear();
        }
    }
    
    private void actionStateChangeYear() {
        moDateDateCut.setValue(SLibTimeUtils.createDate(moCalYear.getValue(), 12, 31));
    }
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setText("Aceptar");

        moDateDateCut.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateCut.getText()), true);
        moKeyPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlPaymentType.getText()), false);
        
        moFields.addField(moDateDateCut);
        moFields.addField(moKeyPaymentType);
        
        moFields.setFormButton(jbSave);
        
        moGridEmployeesRow = new SGridPaneForm(miClient, SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, "Empleados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Clave empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Status actual"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto ingresos $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto gravado $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Días activo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Días incap"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Días gravados"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_8D, "Factor"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "ISR calculado $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "ISR retenido $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "ISR diferencia $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Subsidio calculado $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Subsidio entregado $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Subsidio diferencia $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Diferencia neta $"));
                
                return gridColumnsForm;
            }
        };

        /*
        moGridEmployeesRow.setForm(null);
        moGridEmployeesRow.setPaneFormOwner(null);
        */
        jpEmployee.add(moGridEmployeesRow, BorderLayout.CENTER);
        //mvFormGrids.add(moGridEmployeesRow);
        
        reloadCatalogues();
        addAllListeners();
        
        moGridEmployeesRow.populateGrid(new Vector<SGridRow>());
        moGridEmployeesRow.resetSortKeys();
        moGridEmployeesRow.setSelectedGridRow(0);
        
        moCalYear.setValue(SLibTimeUtils.digestYear(miClient.getSession().getCurrentDate())[0]);
        moDateDateCut.setValue(miClient.getSession().getCurrentDate());
        
        moKeyTax.setEnabled(false);
        moKeyTaxSubsidy.setEnabled(false);
        
        enableFields(true);
    }
    
    private void setTablesTax() throws Exception {
        moKeyTax.setValue(new int[] { SHrsUtils.getRecentTaxTable(miClient.getSession(), moDateDateCut.getValue()) });
        moKeyTaxSubsidy.setValue(new int[] { SHrsUtils.getRecentTaxSubsidyTable(miClient.getSession(), moDateDateCut.getValue()) });
    }
    
    private void actionCalculate() {
        SGuiValidation validation = validateForm();
        
        if (validation.isValid()) {
            enableFields(false);
            try {
                setTablesTax();
                populateEmployees();
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
        else {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
    }
    
    private void actionClean() {
        enableFields(true);
        actionEnableFieldsTypeCal();
    }
    
    private void populateEmployees() {
        int employeeId = 0;
        int periodYear = 0;
        double dDaysHired = 0;
        double dDaysIncapacityNotPay = 0;
        double dDaysTaxable = 0;
        double dTableFactor = 0;
        SDbTaxTable dbTaxTable = null;
        SDbTaxSubsidyTable dbSubsidyTable = null;
        Date mtDateStart = null;
        Date mtDateEnd = null;
        String sql = "";
        Vector<SGridRow> rows = new Vector<SGridRow>();
        SHrsCalculateEstimateISR calculateEstimateISR = null;
        SHrsAmountEarning amountEarningSubsidy = null;
        SHrsAmountEarning amountEarnings = null;
        ResultSet resultSet = null;
        Statement statement = null;
        
        try {
            statement = miClient.getSession().getDatabase().getConnection().createStatement();
            
            mtDateStart = SLibTimeUtils.getBeginOfYear(moDateDateCut.getValue());
            mtDateEnd = moDateDateCut.getValue();
            periodYear = moCalYear.getValue();
            
            dbTaxTable = (SDbTaxTable) miClient.getSession().readRegistry(SModConsts.HRS_TAX, new int[] { getRecentTaxTable(miClient.getSession(), mtDateEnd) });
            dbSubsidyTable = (SDbTaxSubsidyTable) miClient.getSession().readRegistry(SModConsts.HRS_TAX_SUB, new int[] { getRecentTaxSubsidyTable(miClient.getSession(), mtDateEnd) });
            
            sql = "SELECT e.num, e.id_emp, bp.bp, e.b_act "
                    + "FROM " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS e "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " AS bp ON bp.id_bp = e.id_emp "
                    + "WHERE e.b_act = 1 AND e.id_emp IN(SELECT DISTINCT id_emp FROM " + SModConsts.TablesMap.get(SModConsts.HRS_PAY) + " AS p "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP) + " AS pr ON pr.id_pay = p.id_pay "
                    + "WHERE " + (moRadFilterTypeDateCut.isSelected() ? " dt_end <= '" + SLibUtils.DbmsDateFormatDate.format(moDateDateCut.getValue()) + "' AND " : "")
                    + "per_year = " + moCalYear.getValue() + " " 
                    + (moKeyPaymentType.getSelectedIndex() > 0 ? " AND pr.fk_tp_pay = " +  moKeyPaymentType.getValue()[0] : "") + " "
                    + "ORDER BY id_emp)"
                    + "ORDER BY bp, id_bp ";

            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                calculateEstimateISR = new SHrsCalculateEstimateISR();
                employeeId = resultSet.getInt("e.id_emp");
                
                dDaysHired = SHrsUtils.getEmployeeHireDays(SHrsUtils.getEmployeeHireLogs(miClient.getSession(), employeeId, mtDateStart, mtDateEnd), mtDateStart, mtDateEnd);
                dDaysIncapacityNotPay = SHrsUtils.getEmployeeIncapacityNotPayed(SHrsUtils.getEmployeeAbsencesConsumption(miClient.getSession(), SHrsUtils.getEmployeeAbsences(miClient.getSession(), employeeId), SLibConsts.UNDEFINED), mtDateStart, mtDateEnd);
                dDaysTaxable = dDaysHired - dDaysIncapacityNotPay;
                
                amountEarnings = SHrsUtils.getAmountEarningsByEmployee(miClient.getSession(), employeeId, periodYear, mtDateEnd);
                amountEarningSubsidy = SHrsUtils.getAmountEarningByEmployee(miClient.getSession(), employeeId, SModSysConsts.HRSS_TP_EAR_TAX_SUB, periodYear, mtDateEnd);
                dTableFactor = ((double) SHrsConsts.YEAR_MONTHS / (SHrsConsts.YEAR_DAYS + (SLibTimeUtils.isLeapYear(periodYear) ? 1d : 0d))) * dDaysTaxable;

                calculateEstimateISR.setEmployeeId(employeeId);
                calculateEstimateISR.setCodeEmployee(resultSet.getString("e.num"));
                calculateEstimateISR.setNameEmployee(resultSet.getString("bp.bp"));
                calculateEstimateISR.setDaysHire(dDaysHired);
                calculateEstimateISR.setDaysIncapacity(dDaysIncapacityNotPay);
                calculateEstimateISR.setDaysTaxable(dDaysTaxable);
                calculateEstimateISR.setAmountTaxable(amountEarnings.getAmountTaxable());
                calculateEstimateISR.setAmountIncome(amountEarnings.getAmount());
                calculateEstimateISR.setFactor(dTableFactor);
                calculateEstimateISR.setIsStatus(resultSet.getBoolean("e.b_act"));
                calculateEstimateISR.setCalculatedTax(SHrsUtils.computeAmoutTax(dbTaxTable, amountEarnings.getAmountTaxable(), dTableFactor));
                calculateEstimateISR.setRetainedTax(SHrsUtils.getAmountDeductionByEmployee(miClient.getSession(), employeeId, SModSysConsts.HRSS_TP_DED_TAX, periodYear, mtDateEnd));
                calculateEstimateISR.setCalculatedSubsidy(SHrsUtils.computeAmoutTaxSubsidy(dbSubsidyTable, amountEarnings.getAmountTaxable(), dTableFactor));
                calculateEstimateISR.setGivenSubsidy(amountEarningSubsidy.getAmount());
                
                rows.add(calculateEstimateISR);
            }
        }
        catch (Exception e) {
           SLibUtils.printException(this, e);
        }
        
        moGridEmployeesRow.populateGrid(rows);
        moGridEmployeesRow.resetSortKeys();
        moGridEmployeesRow.setSelectedGridRow(0);
    }
    
    @Override
    public void addAllListeners() {
        moRadFilterTypeDateCut.addChangeListener(this);
        moRadFilterTypeYear.addChangeListener(this);
        moCalYear.addChangeListener(this);
        jbCalculate.addActionListener(this);
        jbClean.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moRadFilterTypeDateCut.removeChangeListener(this);
        moRadFilterTypeYear.removeChangeListener(this);
        moCalYear.removeChangeListener(this);
        jbCalculate.removeActionListener(this);
        jbClean.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyTax, SModConsts.HRS_TAX, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTaxSubsidy, SModConsts.HRS_TAX_SUB, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyPaymentType, SModConsts.HRSS_TP_PAY, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (Math.abs(moCalYear.getValue() - SLibTimeUtils.digestYear(moDateDateCut.getValue())[0]) > 1) {
                validation.setMessage("La diferencia entre el año del campo '" + SGuiUtils.getLabelName(jlDateCut) + "' y el campo '" + SGuiUtils.getLabelName(jlYear) + "' no puede ser mayor a 1.");
                validation.setComponent(moDateDateCut);
            }
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbCalculate) {
                actionCalculate();
            }
            else if (button == jbClean) {
                actionClean();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio) {
            if ((SBeanFieldRadio) e.getSource() == moRadFilterTypeDateCut ||
                    (SBeanFieldRadio) e.getSource() == moRadFilterTypeYear) {
                actionEnableFieldsTypeCal();
            }
            
        }
        else if (e.getSource() instanceof JSpinner) {
            SBeanFieldCalendarYear spinner = (SBeanFieldCalendarYear) e.getSource();

            if (spinner == moCalYear) {
                actionStateChangeYear();
            }
        }
    }
}
