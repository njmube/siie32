/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.client.SClientInterface;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mod.SModConsts;
import java.awt.Cursor;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas
 */
public class SDialogRepHrsEarningsDeductionsFileCsv extends SBeanFormDialog {
   
    /**
     * Creates new form SDialogRepHrsEarningsDeductionsFileCsv
     * @param client
     * @param title
     */
    public SDialogRepHrsEarningsDeductionsFileCsv(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT,  SModConsts.HRSR_EAR_DED_CSV, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moRadGroupFilterType = new javax.swing.ButtonGroup();
        jbGrpOrderBy = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntPeriodYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel14 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moKeyPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlEarning = new javax.swing.JLabel();
        moKeyEarning = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlDeduction = new javax.swing.JLabel();
        moKeyDeduction = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jrbOrderByNumEmployee = new javax.swing.JRadioButton();
        jrbOrderByNameEmployee = new javax.swing.JRadioButton();
        jrbOrderByNumDepartament = new javax.swing.JRadioButton();
        jrbOrderByNameDepartament = new javax.swing.JRadioButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Ejercicio:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlYear);

        moIntPeriodYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel35.add(moIntPeriodYear);

        jPanel2.add(jPanel35);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentType.setText("Periodo pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlPaymentType);

        moKeyPaymentType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(moKeyPaymentType);

        jPanel2.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarning.setText("Percepción:");
        jlEarning.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlEarning);

        moKeyEarning.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel15.add(moKeyEarning);

        jPanel2.add(jPanel15);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDeduction.setText("Deducción:");
        jlDeduction.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlDeduction);

        moKeyDeduction.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel17.add(moKeyDeduction);

        jPanel2.add(jPanel17);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenamiento:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 0, 2));

        jbGrpOrderBy.add(jrbOrderByNumEmployee);
        jrbOrderByNumEmployee.setText("Número del empleado");
        jPanel5.add(jrbOrderByNumEmployee);

        jbGrpOrderBy.add(jrbOrderByNameEmployee);
        jrbOrderByNameEmployee.setText("Nombre del empleado");
        jPanel5.add(jrbOrderByNameEmployee);

        jbGrpOrderBy.add(jrbOrderByNumDepartament);
        jrbOrderByNumDepartament.setText("Código del departamento y número del empleado");
        jPanel5.add(jrbOrderByNumDepartament);

        jbGrpOrderBy.add(jrbOrderByNameDepartament);
        jrbOrderByNameDepartament.setSelected(true);
        jrbOrderByNameDepartament.setText("Código del departamento y nombre del empleado");
        jPanel5.add(jrbOrderByNameDepartament);

        jPanel4.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.ButtonGroup jbGrpOrderBy;
    private javax.swing.JLabel jlDeduction;
    private javax.swing.JLabel jlEarning;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlYear;
    private javax.swing.JRadioButton jrbOrderByNameDepartament;
    private javax.swing.JRadioButton jrbOrderByNameEmployee;
    private javax.swing.JRadioButton jrbOrderByNumDepartament;
    private javax.swing.JRadioButton jrbOrderByNumEmployee;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodYear;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDeduction;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarning;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPaymentType;
    private javax.swing.ButtonGroup moRadGroupFilterType;
    // End of variables declaration//GEN-END:variables

    private String getOrderBy() {
        String orderBy = "";
        
        //"ORDER BY f_tp_ear_ded, f_code_ear_ded, f_name_ear_ded, f_id_ear_ded, code, name, id_dep, num, bp, id_emp "
        
        if (jrbOrderByNumEmployee.isSelected()) {
            orderBy = "ORDER BY f_tp_ear_ded, f_code_ear_ded, f_name_ear_ded, f_id_ear_ded, num, bp, id_emp, code, name, id_dep; ";
        }
        else if (jrbOrderByNameEmployee.isSelected()) {
            orderBy = "ORDER BY f_tp_ear_ded, f_code_ear_ded, f_name_ear_ded, f_id_ear_ded, bp, id_emp, code, name, id_dep; ";
        }
        else if (jrbOrderByNumDepartament.isSelected()) {
            orderBy = "ORDER BY f_tp_ear_ded, f_code_ear_ded, f_name_ear_ded, f_id_ear_ded, code, name, id_dep, num, bp, id_emp; ";
        }
        else if (jrbOrderByNameDepartament.isSelected()) {
            orderBy = "ORDER BY f_tp_ear_ded, f_code_ear_ded, f_name_ear_ded, f_id_ear_ded, code, name, id_dep, bp, id_emp; ";
        }
        
        return orderBy;
    }

    private ArrayList<Integer> getPayrollNumbers() throws Exception {
        String sql = "";
        ArrayList<Integer> anPayrollNumbers = new ArrayList<Integer>();
        ResultSet resultSet = null;
        Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();

        sql = "SELECT DISTINCT num "
                + "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_PAY) + " "
                + "WHERE b_del = 0 AND per_year = " + moIntPeriodYear.getValue() + " "
                + (moKeyPaymentType.getSelectedIndex() > 0 ? " AND fk_tp_pay = " + moKeyPaymentType.getValue()[0] : "") + " " 
                + "ORDER BY num; ";

        resultSet = statement.executeQuery(sql);
        while (resultSet.next()) {
            anPayrollNumbers.add(resultSet.getInt("num"));
        }

        return anPayrollNumbers;
    }
    
    private void computeReport() {
        String sql = "";
        ResultSet resulSetEmployee = null;
        ResultSet resulSet = null;
        String buffer = "";
        String sPayrollNumberHeader = "";
        int nEmployeeId = 0;
        int nEarningDeductionId = 0;
        int nEarningDeductionTypeId = 0;
        int nCountHederDeduction = 0;
        double dAmount = 0;
        double dTotalAmount = 0;
        Cursor cursor = getCursor();
        ArrayList<Integer> anNumberPayroll = new ArrayList<Integer>();

        try {
            miClient.getFileChooser().setSelectedFile(new File(getTitle() + " " + ((SClientInterface) miClient).getSessionXXX().getFormatters().getFileNameDatetimeFormat().format(new java.util.Date()) + ".csv"));
            if (miClient.getFileChooser().showSaveDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                File file = new File(miClient.getFileChooser().getSelectedFile().getAbsolutePath());
                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));

                anNumberPayroll = getPayrollNumbers();
                
                for (Integer numberPayroll : anNumberPayroll) {
                    sPayrollNumberHeader += "\"" + numberPayroll + "\",";
                }
                
                buffer = ((SClientInterface)miClient).getSessionXXX().getCompany().getCompany() + "\n";
                buffer += "REPORTE PARA DECLARACIÓN INFORMATIVA DE SUELDOS Y SALARIOS\n";
                buffer += "EJERCICIO: " + moIntPeriodYear.getValue() + "\n" ;
                buffer += "PERÍODO DE PAGO: " + (moKeyPaymentType.getSelectedIndex() > 0 ? moKeyPaymentType.getSelectedItem() : "(TODOS)") + "\n\n";
                buffer += "Usuario: " + ((SClientInterface)miClient).getSessionXXX().getUser().getUser() + "\n";
                buffer += "Emisión: " + ((SClientInterface) miClient).getSessionXXX().getFormatters().getDatetimeFormat().format(new java.util.Date()) + "\n";
                
                bw.write(SLibUtilities.textToAscii(buffer));
                bw.write("\n\n");
                
                buffer = "PERCEPCIÓN_ID\",\"PERCEPCIÓN\",\"DEPARTAMENTO_ID\",\"DEPARTAMENTO\",\"EMPLEADO\",\"EMPLEADO_ID\"," + sPayrollNumberHeader + ""
                        + "\"TOTAL\"";

                bw.write(SLibUtilities.textToAscii(buffer));
                
                sql = "SELECT DISTINCT 1 AS f_tp_ear_ded, ear.code AS f_code_ear_ded, ear.name AS f_name_ear_ded, ear.id_ear AS f_id_ear_ded, d.code, d.name, d.id_dep, e.num, b.bp, pre.id_emp " +
                        "FROM hrs_pay AS p " +
                        "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                        "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                        "INNER JOIN erp.hrsu_emp AS e ON e.id_emp = pre.id_emp " +
                        "INNER JOIN erp.bpsu_bp AS b ON b.id_bp = pre.id_emp " +
                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = e.fk_dep " +
                        "INNER JOIN hrs_ear AS ear ON ear.id_ear = pre.fk_ear " +
                        "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND p.per_year = " + moIntPeriodYear.getValue() + " " +
                        (moKeyEarning.getSelectedIndex() > 0 ? " AND ear.id_ear = " + moKeyEarning.getValue()[0] : "") + " " +
                        (moKeyPaymentType.getSelectedIndex() > 0 ? " AND p.fk_tp_pay = " + moKeyPaymentType.getValue()[0] : "") + " " +
                        "UNION " +
                        "SELECT DISTINCT 2 AS f_tp_ear_ded, ded.code AS f_code_ear_ded, ded.name AS f_name_ear_ded, ded.id_ded AS f_id_ear_ded, d.code, d.name, d.id_dep, e.num, b.bp, prd.id_emp " +
                        "FROM hrs_pay AS p " +
                        "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                        "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                        "INNER JOIN erp.hrsu_emp AS e ON e.id_emp = prd.id_emp " +
                        "INNER JOIN erp.bpsu_bp AS b ON b.id_bp = prd.id_emp " +
                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = e.fk_dep " +
                        "INNER JOIN hrs_ded AS ded ON ded.id_ded = prd.fk_ded " +
                        "WHERE p.b_del = 0 AND pr.b_del = 0 AND prd.b_del = 0 AND p.per_year = " + moIntPeriodYear.getValue() + " " +
                        (moKeyDeduction.getSelectedIndex() > 0 ? " AND ded.id_ded = " + moKeyDeduction.getValue()[0] : "") + " " +
                        (moKeyPaymentType.getSelectedIndex() > 0 ? " AND p.fk_tp_pay = " + moKeyPaymentType.getValue()[0] : "") + " " +
                        getOrderBy();

                resulSetEmployee = miClient.getSession().getStatement().getConnection().createStatement().executeQuery(sql);
                while (resulSetEmployee.next()) {
                    dTotalAmount = 0;
                    buffer = "";
                    
                    nEmployeeId = resulSetEmployee.getInt("id_emp");
                    nEarningDeductionId = resulSetEmployee.getInt("f_id_ear_ded");
                    nEarningDeductionTypeId = resulSetEmployee.getInt("f_tp_ear_ded");
                    
                    if (nEarningDeductionTypeId == 2 && nCountHederDeduction == 0) {
                        buffer = "DEDUCCIÓN_ID\",\"DEDUCCIÓN\",\"DEPARTAMENTO_ID\",\"DEPARTAMENTO\",\"EMPLEADO\",\"EMPLEADO_ID\"," + sPayrollNumberHeader + ""
                                + "\"TOTAL\"";
                        nCountHederDeduction++;
                        bw.write("\n");
                        bw.write(SLibUtilities.textToAscii(buffer));
                        
                        buffer = "";
                    }
                    
                    buffer += "\"" + resulSetEmployee.getString("f_code_ear_ded").replace("\"", "'") + "\",";
                    buffer += "\"" + resulSetEmployee.getString("f_name_ear_ded").replace("\"", "'") + "\",";
                    buffer += "\"" + resulSetEmployee.getString("code").replace("\"", "'") + "\",";
                    buffer += "\"" + resulSetEmployee.getString("name").replace("\"", "'") + "\",";
                    buffer += "\"" + resulSetEmployee.getString("bp").replace("\"", "'") + "\",";
                    buffer += "\"" + resulSetEmployee.getString("num").replace("\"", "'") + "\",";
                    
                   for (Integer numberPayroll : anNumberPayroll) {
                       if (nEarningDeductionTypeId == 1) {
                           sql = "SELECT COALESCE(SUM(pre.amt_r), 0) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND p.per_year = " + moIntPeriodYear.getValue() + " " +
                                    "AND pre.id_emp = " + nEmployeeId + " AND pre.fk_ear = " + nEarningDeductionId + " AND p.num = " + numberPayroll + " " +
                                    (moKeyPaymentType.getSelectedIndex() > 0 ? " AND p.fk_tp_pay = " + moKeyPaymentType.getValue()[0] : "") + " ";
                       }
                       else {
                           sql = "SELECT COALESCE(SUM(prd.amt_r), 0) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND prd.b_del = 0 AND p.per_year = " + moIntPeriodYear.getValue() + " " +
                                    "AND prd.id_emp = " + nEmployeeId + " AND prd.fk_ded = " + nEarningDeductionId + " AND p.num = " + numberPayroll + " " +
                                    (moKeyPaymentType.getSelectedIndex() > 0 ? " AND p.fk_tp_pay = " + moKeyPaymentType.getValue()[0] : "") + " ";
                       }

                        resulSet = miClient.getSession().getStatement().executeQuery(sql);
                        while (resulSet.next()) {
                            
                            dAmount = resulSet.getDouble("f_amt");

                            buffer += SLibUtils.round(dAmount, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()) + ",";
                            
                            dTotalAmount += dAmount;
                        }
                    }
                    buffer += (dTotalAmount) + ",";
                    
                    bw.write("\n");
                    bw.write(SLibUtilities.textToAscii(buffer));
                }
                bw.flush();
                bw.close();
                
                if (miClient.showMsgBoxConfirm(SLibConstants.MSG_INF_FILE_CREATE + file.getPath() + "\n" + SLibConstants.MSG_CNF_FILE_OPEN) == JOptionPane.YES_OPTION) {
                    SLibUtilities.launchFile(file.getPath());
                }
            }
        }
        catch(Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
        
    }
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);
        
        jbSave.setText("Guardar");

        moIntPeriodYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntPeriodYear.setMinInteger(2000);
        moIntPeriodYear.setMaxInteger(2100);
        moKeyPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlPaymentType.getText()), false);
        moKeyEarning.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarning.getText()), false);
        moKeyDeduction.setKeySettings(miClient, SGuiUtils.getLabelName(jlDeduction.getText()), false);
        
        moFields.addField(moIntPeriodYear);
        moFields.addField(moKeyPaymentType);
        moFields.addField(moKeyEarning);
        moFields.addField(moKeyDeduction);
        
        moFields.setFormButton(jbSave);
        jrbOrderByNameDepartament.setSelected(true);
        
        reloadCatalogues();
    }

    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }
    
    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyPaymentType, SModConsts.HRSS_TP_PAY, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEarning, SModConsts.HRS_EAR, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDeduction, SModConsts.HRS_DED, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                computeReport();
            }
        }
    }
}
