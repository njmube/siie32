/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SHrsEarningsSsContributionUpdate;
import erp.mod.hrs.db.SHrsEmployeeSsContributionUpdate;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas
 */
public class SDialogPayrollEmployeeSsContributionUpdate extends SBeanFormDialog implements ActionListener, ListSelectionListener, CellEditorListener  {

    protected static final int COL_AMT = 2;

    protected SGridPaneForm moGridEmployeesRow;
    protected SGridPaneForm moGridEarnigsRow;
    protected int mnDaysPeriod;
    
    private JButton jbSelectAll;
    private JButton jbCleanAll;
    
    /**
     * Creates new form SDialogPayrollEmployeeSsContributionUpdate
     * @param client
     * @param title
     */
    public SDialogPayrollEmployeeSsContributionUpdate(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_SSC_UPD, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jpEmployee = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpEarning = new javax.swing.JPanel();
        jpDaysInfo = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDaysPeriod = new javax.swing.JLabel();
        moIntDaysPeriod = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel5 = new javax.swing.JPanel();
        jlDaysIncapacity = new javax.swing.JLabel();
        moIntDaysIncapacity = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel11 = new javax.swing.JPanel();
        jlDaysAbsenteeism = new javax.swing.JLabel();
        moIntDaysAbsenteeism = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel14 = new javax.swing.JPanel();
        jlDaysSuspension = new javax.swing.JLabel();
        moIntDaysSuspension = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel15 = new javax.swing.JPanel();
        jlDaysTotal = new javax.swing.JLabel();
        moIntDaysTotal = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel17 = new javax.swing.JPanel();
        jlTotalAmount = new javax.swing.JLabel();
        moDecTotalAmount = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel16 = new javax.swing.JPanel();
        jlPaymentDailyProp = new javax.swing.JLabel();
        moDecPaymentDailyProp = new sa.lib.gui.bean.SBeanFieldDecimal();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateStart);

        moDateDateStart.setFocusable(false);
        jPanel8.add(moDateDateStart);

        jPanel13.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDateEnd);
        jPanel9.add(moDateDateEnd);

        jPanel13.add(jPanel9);

        jPanel7.add(jPanel13, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jpEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados:"));
        jpEmployee.setPreferredSize(new java.awt.Dimension(100, 150));
        jpEmployee.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jpEmployee, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpEarning.setBorder(javax.swing.BorderFactory.createTitledBorder("Percepciones que intregran:"));
        jpEarning.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpEarning, java.awt.BorderLayout.CENTER);

        jpDaysInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de días:"));
        jpDaysInfo.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(7, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysPeriod.setText("Días perido:");
        jlDaysPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDaysPeriod);

        moIntDaysPeriod.setToolTipText("Año aniversario");
        moIntDaysPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(moIntDaysPeriod);

        jPanel6.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysIncapacity.setText("Días incapacidad:");
        jlDaysIncapacity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDaysIncapacity);

        moIntDaysIncapacity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(moIntDaysIncapacity);

        jPanel6.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysAbsenteeism.setText("Días ausentismo:");
        jlDaysAbsenteeism.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDaysAbsenteeism);

        moIntDaysAbsenteeism.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(moIntDaysAbsenteeism);

        jPanel6.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysSuspension.setText("Días supensión:");
        jlDaysSuspension.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDaysSuspension);

        moIntDaysSuspension.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(moIntDaysSuspension);

        jPanel6.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysTotal.setText("Total días:");
        jlDaysTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDaysTotal);

        moIntDaysTotal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(moIntDaysTotal);

        jPanel6.add(jPanel15);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotalAmount.setText("Total percepciones:");
        jlTotalAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlTotalAmount);
        jPanel17.add(moDecTotalAmount);

        jPanel6.add(jPanel17);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentDailyProp.setText("Prop. diario:");
        jlPaymentDailyProp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlPaymentDailyProp);
        jPanel16.add(moDecPaymentDailyProp);

        jPanel6.add(jPanel16);

        jpDaysInfo.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpDaysInfo, java.awt.BorderLayout.EAST);

        jPanel12.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel12, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDaysAbsenteeism;
    private javax.swing.JLabel jlDaysIncapacity;
    private javax.swing.JLabel jlDaysPeriod;
    private javax.swing.JLabel jlDaysSuspension;
    private javax.swing.JLabel jlDaysTotal;
    private javax.swing.JLabel jlPaymentDailyProp;
    private javax.swing.JLabel jlTotalAmount;
    private javax.swing.JPanel jpDaysInfo;
    private javax.swing.JPanel jpEarning;
    private javax.swing.JPanel jpEmployee;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPaymentDailyProp;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecTotalAmount;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysAbsenteeism;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysIncapacity;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysPeriod;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysSuspension;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysTotal;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);

        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moIntDaysPeriod.setIntegerSettings(SGuiUtils.getLabelName(jlDaysPeriod.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysIncapacity.setIntegerSettings(SGuiUtils.getLabelName(jlDaysIncapacity.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysAbsenteeism.setIntegerSettings(SGuiUtils.getLabelName(jlDaysAbsenteeism.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysSuspension.setIntegerSettings(SGuiUtils.getLabelName(jlDaysSuspension.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysTotal.setIntegerSettings(SGuiUtils.getLabelName(jlDaysTotal.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecTotalAmount.setDecimalSettings(SGuiUtils.getLabelName(jlTotalAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPaymentDailyProp.setDecimalSettings(SGuiUtils.getLabelName(jlPaymentDailyProp.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        jbSelectAll = new JButton("Todo");
        jbSelectAll.setToolTipText("Pagar");
        jbSelectAll.setPreferredSize(new java.awt.Dimension(70, 23));

        jbCleanAll = new JButton("Nada");
        jbCleanAll.setToolTipText("Pagar");
        jbCleanAll.setPreferredSize(new java.awt.Dimension(70, 23));
        
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        moFields.addField(moIntDaysPeriod);
        moFields.addField(moIntDaysIncapacity);
        moFields.addField(moIntDaysAbsenteeism);
        moFields.addField(moIntDaysSuspension);
        moFields.addField(moIntDaysTotal);
        moFields.addField(moDecTotalAmount);
        moFields.addField(moDecPaymentDailyProp);
        
        moFields.setFormButton(jbSave);
        
        moGridEmployeesRow = new SGridPaneForm(miClient, SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, "Empleados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm = null;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Código empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Departamento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Código departamento"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Aplicar", moGridEmployeesRow.getTable().getDefaultEditor(Boolean.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "SDI actual $"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "SDI nuevo $", moGridEmployeesRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                
                moGridEmployeesRow.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(SDialogPayrollEmployeeSsContributionUpdate.this);
                moGridEmployeesRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollEmployeeSsContributionUpdate.this);
                moGridEmployeesRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollEmployeeSsContributionUpdate.this);
                
                return gridColumnsForm;
            }
        };
        moGridEmployeesRow.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbSelectAll);
        moGridEmployeesRow.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbCleanAll);

        /*
        moGridEmployeesRow.setForm(null);
        moGridEmployeesRow.setPaneFormOwner(null);
        */
        mvFormGrids.add(moGridEmployeesRow);
        jpEmployee.add(moGridEmployeesRow, BorderLayout.CENTER);
        
        moGridEarnigsRow = new SGridPaneForm(miClient, SModConsts.HRSX_EAR_SSC, SLibConsts.UNDEFINED, "Percepciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm = null;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Código percepción"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Percepción"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", moGridEarnigsRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                
                moGridEarnigsRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollEmployeeSsContributionUpdate.this);
                
                return gridColumnsForm;
            }
        };

        /*
        moGridEarnigsRow.setForm(null);
        moGridEarnigsRow.setPaneFormOwner(null);
        mvFormGrids.add(moGridEarnigsRow);
        */
        jpEarning.add(moGridEarnigsRow, BorderLayout.CENTER);
        
        reloadCatalogues();
        addAllListeners();
        
        moDateDateStart.setEditable(false);
        moDateDateEnd.setEditable(false);
        moIntDaysPeriod.setEditable(false);
        moIntDaysIncapacity.setEditable(false);
        moIntDaysAbsenteeism.setEditable(false);
        moIntDaysSuspension.setEditable(false);
        moIntDaysTotal.setEditable(false);
        moDecTotalAmount.setEditable(false);
        moDecPaymentDailyProp.setEditable(false);
    }
    
    private void actionSelectAll() {
        SHrsEmployeeSsContributionUpdate row = null;
        
        try {
            for (SGridRow rowAux : moGridEmployeesRow.getModel().getGridRows()) {
                row = (SHrsEmployeeSsContributionUpdate) rowAux;
                row.setIsApply(true);
            }
            moGridEmployeesRow.renderGridRows();
            moGridEmployeesRow.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionCleanAll() {
        SHrsEmployeeSsContributionUpdate row = null;
        
        try {
            for (SGridRow rowAux : moGridEmployeesRow.getModel().getGridRows()) {
                row = (SHrsEmployeeSsContributionUpdate) rowAux;
                row.setIsApply(false);
            }
            moGridEmployeesRow.renderGridRows();
            moGridEmployeesRow.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void populateEmployees() {
        int employeeId = 0;
        SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate = null;
        String sql = "";
        ResultSet resultSet = null;
        ResultSet resultSetAux = null;
        Vector<SGridRow> rows = new Vector<SGridRow>();
        Statement statement = null;
        Statement statementAux = null;
        
        mnDaysPeriod = (int) SLibTimeUtils.getDaysDiff(moDateDateEnd.getValue(), moDateDateStart.getValue()) + 1;
        try {
            statement = miClient.getSession().getDatabase().getConnection().createStatement();
            statementAux = miClient.getSession().getDatabase().getConnection().createStatement();
            
            sql = "SELECT e.num, e.id_emp, e.sal_ssc, bp.bp, d.code, d.name "
                    + "FROM " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS e "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " AS bp ON bp.id_bp = e.id_emp "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSU_DEP) + " AS d ON d.id_dep = e.fk_dep "
                    + "WHERE bp.b_del = 0 AND e.b_act = 1 "
                    + "ORDER BY bp, id_bp ";

            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                employeeSsContributionUpdate = new SHrsEmployeeSsContributionUpdate();

                employeeId = resultSet.getInt("id_emp");

                employeeSsContributionUpdate.setEmployeeId(employeeId);
                employeeSsContributionUpdate.setCodeEmployee(resultSet.getString("num"));
                employeeSsContributionUpdate.setNameEmployee(resultSet.getString("bp"));
                employeeSsContributionUpdate.setCodeDepartament(resultSet.getString("code"));
                employeeSsContributionUpdate.setNameDepartament(resultSet.getString("name"));
                employeeSsContributionUpdate.setSalarySscBase(resultSet.getDouble("sal_ssc"));
                employeeSsContributionUpdate.setDaysPeriod(mnDaysPeriod);

                sql = "SELECT a.fk_cl_abs, ac.eff_day "
                        + "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_ABS) + " AS a "
                        + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_ABS_CNS) + " AS ac ON ac.id_emp = a.id_emp AND ac.id_abs = a.id_abs "
                        + "WHERE a.b_del = 0 AND ac.b_del = 0 AND ac.id_emp = " + employeeId + " AND ac.dt_sta >= '" + SLibUtils.DbmsDateFormatDate.format(moDateDateStart.getValue()) + "' "
                        + "AND ac.dt_end <= '" + SLibUtils.DbmsDateFormatDate.format(moDateDateEnd.getValue()) + "' "
                        + "ORDER BY ac.id_abs, ac.id_cns ";

                resultSetAux = statementAux.executeQuery(sql);
                while (resultSetAux.next()) {
                    switch (resultSetAux.getInt("a.fk_cl_abs")) {
                        case SModSysConsts.HRSU_CL_ABS_ABS:
                            employeeSsContributionUpdate.setDaysAbsenteeism(resultSetAux.getInt("ac.eff_day"));
                            break;
                        case SModSysConsts.HRSU_CL_ABS_DIS:
                            employeeSsContributionUpdate.setDaysIncapacity(resultSetAux.getInt("ac.eff_day"));
                            break;
                    }
                    //employeeSsContributionUpdate.setDaysSuspension(resultSetAux.getInt("id_emp"));
                    employeeSsContributionUpdate.setIsApply(false);
                }
                
                employeeSsContributionUpdate.getEarningsSsContributionUpdates().addAll(getEarnings(employeeId));
                employeeSsContributionUpdate.computeSSContribution();
                
                rows.add(employeeSsContributionUpdate);
            }
        }
        catch (Exception e) {
           SLibUtils.printException(this, e);
        }
        
        moGridEmployeesRow.populateGrid(rows, this);
        moGridEmployeesRow.createGridColumns();
        moGridEmployeesRow.setSelectedGridRow(0);
    }
    
    private void processEditingEarningAmount() {
        loadEmployeeSelected(true);
        moGridEmployeesRow.repaint();
    }
    
    private void populateEarnings(final SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate) {
       Vector<SGridRow> rows = new Vector<SGridRow>();
       
       for (SHrsEarningsSsContributionUpdate contributionUpdate: employeeSsContributionUpdate.getEarningsSsContributionUpdates()) {
           rows.add(contributionUpdate);
       }
       
       moGridEarnigsRow.populateGrid(rows);
       moGridEarnigsRow.clearSortKeys();
       moGridEarnigsRow.setSelectedGridRow(0);
       moGridEarnigsRow.getTable().requestFocus();
    }
    
    private ArrayList<SHrsEarningsSsContributionUpdate> getEarnings(final int employeeId) {
       ArrayList<SHrsEarningsSsContributionUpdate> earningsSsContributionUpdate = null;
       SHrsEarningsSsContributionUpdate earningSsContributionUpdate = null;
       String sql = "";
       ResultSet resultSet = null;
       Statement statement = null;
       double amount = 0;

       try {
           earningsSsContributionUpdate = new ArrayList<SHrsEarningsSsContributionUpdate>();
           statement = miClient.getSession().getDatabase().getConnection().createStatement();

           sql = "SELECT e.id_ear, e.code, e.name, SUM(pre.amt_r) AS _amt "
                   + "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_PAY) + " AS p "
                   + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP) + " AS pr ON pr.id_pay = p.id_pay "
                   + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP_EAR) + " AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp "
                   + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_EAR) + " AS e ON e.id_ear = pre.fk_ear "
                   + "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND pr.id_emp = " + employeeId + " AND p.dt_sta >= '" + SLibUtils.DbmsDateFormatDate.format(moDateDateStart.getValue()) + "' "
                   + "AND p.dt_end <= '" + SLibUtils.DbmsDateFormatDate.format(moDateDateEnd.getValue()) + "' "
                   + "GROUP BY e.id_ear "
                   + "ORDER BY e.code, e.name ";

           resultSet = statement.executeQuery(sql);
           while (resultSet.next()) {
               earningSsContributionUpdate = new SHrsEarningsSsContributionUpdate();
               
               amount = resultSet.getDouble("_amt");
               
               earningSsContributionUpdate.setEarningId(resultSet.getInt("e.id_ear"));
               earningSsContributionUpdate.setCodeEarning(resultSet.getString("e.code"));
               earningSsContributionUpdate.setNameEarning(resultSet.getString("e.name"));
               earningSsContributionUpdate.setAmountSys(amount);
               earningSsContributionUpdate.setAmount(amount);
               
               earningsSsContributionUpdate.add(earningSsContributionUpdate);
           }
       }
       catch (Exception e) {
           SLibUtils.printException(this, e);
       }
       
       return earningsSsContributionUpdate;
    }
     
    private void loadEmployeeSelected(final boolean isEdit) {
        SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate = null;
        SGridRow row = null;
        
        if (moGridEmployeesRow.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else {
            row = moGridEmployeesRow.getSelectedGridRow();
            
            employeeSsContributionUpdate = (SHrsEmployeeSsContributionUpdate) row;
            
            populateEarnings(employeeSsContributionUpdate);
            
            moIntDaysPeriod.setValue(mnDaysPeriod);
            moIntDaysIncapacity.setValue(employeeSsContributionUpdate.getDaysIncapacity());
            moIntDaysAbsenteeism.setValue(employeeSsContributionUpdate.getDaysAbsenteeism());
            moIntDaysSuspension.setValue(employeeSsContributionUpdate.getDaysSuspension());
            moIntDaysTotal.setValue(employeeSsContributionUpdate.getTotalDays());
            moDecTotalAmount.setValue(employeeSsContributionUpdate.getTotalAmountEarnings());
            if (isEdit) {
                employeeSsContributionUpdate.computeSSContribution();
            }
            moDecPaymentDailyProp.setValue(employeeSsContributionUpdate.getPaymentDailyProportional());
        }
    }
    
    @Override
    public void addAllListeners() {
        jbSelectAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSelectAll.removeActionListener(this);
        jbCleanAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        String msg = "";
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SGuiConsts.PARAM_DATE_STA:
                moDateDateStart.setValue(value);
                break;
            case SGuiConsts.PARAM_DATE_END:
                moDateDateEnd.setValue(value);
                break;
            case SModConsts.HRSU_EMP:
                populateEmployees();
                break;
            default:
                break;
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public void actionSave() {
        if (SGuiUtils.computeValidation(miClient, validateForm())) {
            try {
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbSelectAll) {
                actionSelectAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridEmployeesRow.getTable().getSelectedRowCount() != -1) {
                loadEmployeeSelected(false);
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridEarnigsRow.getTable().getSelectedColumn()) {
            case COL_AMT:
                processEditingEarningAmount();
                break;
            default:
                break;
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
