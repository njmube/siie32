/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbEarning;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Juan Barajas
 */
public class SFormEarning extends SBeanForm implements ActionListener, ItemListener {

    private SDbEarning moRegistry;
    private SGuiFieldKeyGroup moFieldKeyGroup;

    /**
     * Creates new form SFormEarning
     */
    public SFormEarning(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_EAR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel22 = new javax.swing.JPanel();
        jlNameAbbreviated = new javax.swing.JLabel();
        moTextNameAbbreviated = new sa.lib.gui.bean.SBeanFieldText();
        jlNameAbbreviatedHelp = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jlEarningComputationType = new javax.swing.JLabel();
        moKeyEarningComputationType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel16 = new javax.swing.JPanel();
        jlEarningExemptionType = new javax.swing.JLabel();
        moKeyEarningExemptionType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlExemptionMwz = new javax.swing.JLabel();
        moIntExemptionMwz = new sa.lib.gui.bean.SBeanFieldInteger();
        jlExemptionMwzHelp = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jlExemptionSalaryEqualsMwzPercentage = new javax.swing.JLabel();
        moDecExemptionSalaryEqualsMwzPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlExemptionSalaryEqualsMwzPercentageHelp = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jlExemptionSalaryEqualsMwzLimit = new javax.swing.JLabel();
        moIntExemptionSalaryEqualsMwzLimit = new sa.lib.gui.bean.SBeanFieldInteger();
        jlExemptionSalaryEqualsMwzLimitHelp = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlExemptionSalaryGreaterMwzPercentage = new javax.swing.JLabel();
        moDecExemptionSalaryGreaterMwzPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlExemptionSalaryGreaterMwzPercentageHelp = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jlExemptionSalaryGreaterMwzLimit = new javax.swing.JLabel();
        moIntExemptionSalaryGreaterMwzLimit = new sa.lib.gui.bean.SBeanFieldInteger();
        jlExemptionSalaryGreaterMwzLimitHelp = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jlPayPercentage = new javax.swing.JLabel();
        moDecPayPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPayPercentageHelp = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jlUnitsMaximumWeek = new javax.swing.JLabel();
        moDecUnitsMaximumWeek = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitsMaximumWeekHelp = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jlUnitsFactor = new javax.swing.JLabel();
        moDecUnitsFactor = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel3 = new javax.swing.JPanel();
        moBoolWelfare = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolDaysAdjustment = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolDaysAbsence = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolDaysWorked = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolLoan = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel24 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlEarningType = new javax.swing.JLabel();
        moKeyEarningType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlLoanType = new javax.swing.JLabel();
        moKeyLoanType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        jlBenefitType = new javax.swing.JLabel();
        moKeyBenefitType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlAccountingConfigurationType = new javax.swing.JLabel();
        moKeyAccountingConfigurationType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel18 = new javax.swing.JPanel();
        jlAccountingRecordType = new javax.swing.JLabel();
        moKeyAccountingRecordType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel28 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlAbsenceClass = new javax.swing.JLabel();
        moKeyAbsenceClass = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel20 = new javax.swing.JPanel();
        jlAbsenceType = new javax.swing.JLabel();
        moKeyAbsenceType = new sa.lib.gui.bean.SBeanFieldKey();
        moBoolWithholding = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolPayrollTax = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolTaxCalculationOptional = new sa.lib.gui.bean.SBeanFieldBoolean();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel25.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(14, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel6.add(jlCode);

        moTextCode.setText("sBeanFieldText2");
        jPanel6.add(moTextCode);

        jPanel2.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel4.add(jlName);

        moTextName.setText("sBeanFieldText1");
        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextName);

        jPanel2.add(jPanel4);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameAbbreviated.setText("Nombre corto:*");
        jlNameAbbreviated.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel22.add(jlNameAbbreviated);

        moTextNameAbbreviated.setText("sBeanFieldText1");
        moTextNameAbbreviated.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel22.add(moTextNameAbbreviated);

        jlNameAbbreviatedHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlNameAbbreviatedHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlNameAbbreviatedHelp.setText("(Nombre utilizado para la contabilización y concepto en XML)");
        jlNameAbbreviatedHelp.setToolTipText("");
        jlNameAbbreviatedHelp.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel22.add(jlNameAbbreviatedHelp);

        jPanel2.add(jPanel22);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningComputationType.setText("Tipo cálculo percepción:*");
        jlEarningComputationType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel7.add(jlEarningComputationType);

        moKeyEarningComputationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyEarningComputationType);

        jPanel2.add(jPanel7);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningExemptionType.setText("Tipo exención percepción:*");
        jlEarningExemptionType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel16.add(jlEarningExemptionType);

        moKeyEarningExemptionType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moKeyEarningExemptionType);

        jPanel2.add(jPanel16);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionMwz.setText("Salarios mínimos exentos:");
        jlExemptionMwz.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel8.add(jlExemptionMwz);
        jPanel8.add(moIntExemptionMwz);

        jlExemptionMwzHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlExemptionMwzHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionMwzHelp.setText("(Monto exento expresado en número de salarios mínimos del área geográfica)");
        jlExemptionMwzHelp.setToolTipText("");
        jlExemptionMwzHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel8.add(jlExemptionMwzHelp);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryEqualsMwzPercentage.setText("Porcentaje exención si SB = SMA:");
        jlExemptionSalaryEqualsMwzPercentage.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel9.add(jlExemptionSalaryEqualsMwzPercentage);
        jPanel9.add(moDecExemptionSalaryEqualsMwzPercentage);

        jlExemptionSalaryEqualsMwzPercentageHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlExemptionSalaryEqualsMwzPercentageHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryEqualsMwzPercentageHelp.setText("(Porcentaje exención cuando el empleado gana el salario mínimo)");
        jlExemptionSalaryEqualsMwzPercentageHelp.setToolTipText("");
        jlExemptionSalaryEqualsMwzPercentageHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel9.add(jlExemptionSalaryEqualsMwzPercentageHelp);

        jPanel2.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryEqualsMwzLimit.setText("Tope exención si SB = SMA:");
        jlExemptionSalaryEqualsMwzLimit.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel10.add(jlExemptionSalaryEqualsMwzLimit);
        jPanel10.add(moIntExemptionSalaryEqualsMwzLimit);

        jlExemptionSalaryEqualsMwzLimitHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlExemptionSalaryEqualsMwzLimitHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryEqualsMwzLimitHelp.setText("(Tope exención expresado en número de salarios mínimos del área geográfica, cuando el empleado gana el salario mínimo)");
        jlExemptionSalaryEqualsMwzLimitHelp.setToolTipText("");
        jlExemptionSalaryEqualsMwzLimitHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel10.add(jlExemptionSalaryEqualsMwzLimitHelp);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryGreaterMwzPercentage.setText("Porcentaje exención si SB > SMA:");
        jlExemptionSalaryGreaterMwzPercentage.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel11.add(jlExemptionSalaryGreaterMwzPercentage);
        jPanel11.add(moDecExemptionSalaryGreaterMwzPercentage);

        jlExemptionSalaryGreaterMwzPercentageHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlExemptionSalaryGreaterMwzPercentageHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryGreaterMwzPercentageHelp.setText("(Porcentaje exención cuando el empleado gana más del salario mínimo)");
        jlExemptionSalaryGreaterMwzPercentageHelp.setToolTipText("");
        jlExemptionSalaryGreaterMwzPercentageHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel11.add(jlExemptionSalaryGreaterMwzPercentageHelp);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryGreaterMwzLimit.setText("Tope exención si SB > SMA:");
        jlExemptionSalaryGreaterMwzLimit.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel12.add(jlExemptionSalaryGreaterMwzLimit);
        jPanel12.add(moIntExemptionSalaryGreaterMwzLimit);

        jlExemptionSalaryGreaterMwzLimitHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlExemptionSalaryGreaterMwzLimitHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryGreaterMwzLimitHelp.setText("(Tope exención expresado en número de salarios mínimos del área geográfica, cuando el empleado gana más del salario mínimo)");
        jlExemptionSalaryGreaterMwzLimitHelp.setToolTipText("Exención límite expresado en número de salarios mínimos del área geográfica, cuando el empleado gana más del salario mínimo");
        jlExemptionSalaryGreaterMwzLimitHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel12.add(jlExemptionSalaryGreaterMwzLimitHelp);

        jPanel2.add(jPanel12);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayPercentage.setText("Porcentaje pago:");
        jlPayPercentage.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel23.add(jlPayPercentage);
        jPanel23.add(moDecPayPercentage);

        jlPayPercentageHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlPayPercentageHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlPayPercentageHelp.setText("(Porcentaje del pago por unidad)");
        jlPayPercentageHelp.setToolTipText("");
        jlPayPercentageHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel23.add(jlPayPercentageHelp);

        jPanel2.add(jPanel23);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitsMaximumWeek.setText("Unidades máximas:");
        jlUnitsMaximumWeek.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel13.add(jlUnitsMaximumWeek);
        jPanel13.add(moDecUnitsMaximumWeek);

        jlUnitsMaximumWeekHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlUnitsMaximumWeekHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlUnitsMaximumWeekHelp.setText("(Número máximo de unidades permitido por semana)");
        jlUnitsMaximumWeekHelp.setToolTipText("");
        jlUnitsMaximumWeekHelp.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel13.add(jlUnitsMaximumWeekHelp);

        jPanel2.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitsFactor.setText("Factor cálculo:*");
        jlUnitsFactor.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel14.add(jlUnitsFactor);
        jPanel14.add(moDecUnitsFactor);

        jPanel2.add(jPanel14);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moBoolWelfare.setText("Es previsión social");
        moBoolWelfare.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel3.add(moBoolWelfare);

        moBoolDaysAdjustment.setText("Aplica días ajuste");
        moBoolDaysAdjustment.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(moBoolDaysAdjustment);

        moBoolDaysAbsence.setText("Aplica días incidencia");
        moBoolDaysAbsence.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(moBoolDaysAbsence);

        moBoolDaysWorked.setText("Aplica días trabajados");
        moBoolDaysWorked.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel3.add(moBoolDaysWorked);

        moBoolLoan.setText("Es crédito/préstamo");
        moBoolLoan.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(moBoolLoan);

        jPanel2.add(jPanel3);

        jPanel25.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel25, java.awt.BorderLayout.NORTH);

        jPanel24.setLayout(new java.awt.BorderLayout());

        jPanel26.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel27.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningType.setText("Tipo percepción:*");
        jlEarningType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel5.add(jlEarningType);

        moKeyEarningType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyEarningType);

        jPanel27.add(jPanel5);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLoanType.setText("Tipo crédito/préstamo:");
        jlLoanType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel15.add(jlLoanType);

        moKeyLoanType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moKeyLoanType);

        jPanel27.add(jPanel15);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitType.setText("Tipo prestación:*");
        jlBenefitType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel19.add(jlBenefitType);

        moKeyBenefitType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel19.add(moKeyBenefitType);

        jPanel27.add(jPanel19);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountingConfigurationType.setText("Tipo configuración contable:*");
        jlAccountingConfigurationType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel17.add(jlAccountingConfigurationType);

        moKeyAccountingConfigurationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(moKeyAccountingConfigurationType);

        jPanel27.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountingRecordType.setText("Tipo registro contable:*");
        jlAccountingRecordType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel18.add(jlAccountingRecordType);

        moKeyAccountingRecordType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(moKeyAccountingRecordType);

        jPanel27.add(jPanel18);

        jPanel26.add(jPanel27, java.awt.BorderLayout.WEST);

        jPanel28.setLayout(new java.awt.GridLayout(5, 1));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass.setText("Clase incidencia:");
        jlAbsenceClass.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel21.add(jlAbsenceClass);

        moKeyAbsenceClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel21.add(moKeyAbsenceClass);

        jPanel28.add(jPanel21);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceType.setText("Tipo incidencia:");
        jlAbsenceType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel20.add(jlAbsenceType);

        moKeyAbsenceType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel20.add(moKeyAbsenceType);

        jPanel28.add(jPanel20);

        moBoolWithholding.setText("Es retención de ley");
        moBoolWithholding.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel28.add(moBoolWithholding);

        moBoolPayrollTax.setText("Aplica imp. sobre nómina");
        moBoolPayrollTax.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel28.add(moBoolPayrollTax);

        moBoolTaxCalculationOptional.setText("Aplica cálculo imp. opcional");
        moBoolTaxCalculationOptional.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel28.add(moBoolTaxCalculationOptional);

        jPanel26.add(jPanel28, java.awt.BorderLayout.CENTER);

        jPanel24.add(jPanel26, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel24, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlAbsenceClass;
    private javax.swing.JLabel jlAbsenceType;
    private javax.swing.JLabel jlAccountingConfigurationType;
    private javax.swing.JLabel jlAccountingRecordType;
    private javax.swing.JLabel jlBenefitType;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlEarningComputationType;
    private javax.swing.JLabel jlEarningExemptionType;
    private javax.swing.JLabel jlEarningType;
    private javax.swing.JLabel jlExemptionMwz;
    private javax.swing.JLabel jlExemptionMwzHelp;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzLimit;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzLimitHelp;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzPercentage;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzPercentageHelp;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzLimit;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzLimitHelp;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzPercentage;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzPercentageHelp;
    private javax.swing.JLabel jlLoanType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNameAbbreviated;
    private javax.swing.JLabel jlNameAbbreviatedHelp;
    private javax.swing.JLabel jlPayPercentage;
    private javax.swing.JLabel jlPayPercentageHelp;
    private javax.swing.JLabel jlUnitsFactor;
    private javax.swing.JLabel jlUnitsMaximumWeek;
    private javax.swing.JLabel jlUnitsMaximumWeekHelp;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysAbsence;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysAdjustment;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysWorked;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLoan;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPayrollTax;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolTaxCalculationOptional;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWelfare;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWithholding;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionSalaryEqualsMwzPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionSalaryGreaterMwzPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPayPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUnitsFactor;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUnitsMaximumWeek;
    private sa.lib.gui.bean.SBeanFieldInteger moIntExemptionMwz;
    private sa.lib.gui.bean.SBeanFieldInteger moIntExemptionSalaryEqualsMwzLimit;
    private sa.lib.gui.bean.SBeanFieldInteger moIntExemptionSalaryGreaterMwzLimit;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceClass;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAccountingConfigurationType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAccountingRecordType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBenefitType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningComputationType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningExemptionType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLoanType;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    private sa.lib.gui.bean.SBeanFieldText moTextNameAbbreviated;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceClass, SModConsts.HRSU_CL_ABS, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceType, SModConsts.HRSU_TP_ABS, SLibConsts.UNDEFINED, null);

        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode.getText()), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 100);
        moTextNameAbbreviated.setTextSettings(SGuiUtils.getLabelName(jlNameAbbreviated.getText()), 25);
        moIntExemptionMwz.setIntegerSettings(SGuiUtils.getLabelName(jlExemptionMwz.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecExemptionSalaryEqualsMwzPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionSalaryEqualsMwzPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moIntExemptionSalaryEqualsMwzLimit.setIntegerSettings(SGuiUtils.getLabelName(jlExemptionSalaryEqualsMwzLimit.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecExemptionSalaryGreaterMwzPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionSalaryGreaterMwzPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moIntExemptionSalaryGreaterMwzLimit.setIntegerSettings(SGuiUtils.getLabelName(jlExemptionSalaryGreaterMwzLimit.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecPayPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlPayPercentage.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, true);
        moDecUnitsMaximumWeek.setDecimalSettings(SGuiUtils.getLabelName(jlUnitsMaximumWeek.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecUnitsFactor.setDecimalSettings(SGuiUtils.getLabelName(jlUnitsFactor.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moBoolWelfare.setBooleanSettings(SGuiUtils.getLabelName(moBoolWelfare.getText()), false);
        moBoolDaysAdjustment.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysAdjustment.getText()), false);
        moBoolDaysAbsence.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysAbsence.getText()), false);
        moBoolDaysWorked.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysWorked.getText()), false);
        moBoolLoan.setBooleanSettings(SGuiUtils.getLabelName(moBoolLoan.getText()), false);
        moKeyEarningType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningType.getText()), true);
        moKeyEarningComputationType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningComputationType.getText()), true);
        moKeyEarningExemptionType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningExemptionType.getText()), true);
        moKeyLoanType.setKeySettings(miClient, SGuiUtils.getLabelName(jlLoanType.getText()), false);
        moKeyBenefitType.setKeySettings(miClient, SGuiUtils.getLabelName(jlBenefitType.getText()), true);
        moKeyAccountingConfigurationType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAccountingConfigurationType.getText()), true);
        moKeyAccountingRecordType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAccountingRecordType.getText()), true);
        moKeyAbsenceClass.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceClass.getText()), false);
        moKeyAbsenceType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceType.getText()), false);
        moBoolWithholding.setBooleanSettings(SGuiUtils.getLabelName(moBoolWithholding.getText()), false);
        moBoolPayrollTax.setBooleanSettings(SGuiUtils.getLabelName(moBoolPayrollTax.getText()), false);
        moBoolTaxCalculationOptional.setBooleanSettings(SGuiUtils.getLabelName(moBoolTaxCalculationOptional.getText()), false);

        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moTextNameAbbreviated);
        moFields.addField(moKeyEarningComputationType);
        moFields.addField(moKeyEarningExemptionType);
        moFields.addField(moIntExemptionMwz);
        moFields.addField(moDecExemptionSalaryEqualsMwzPercentage);
        moFields.addField(moIntExemptionSalaryEqualsMwzLimit);
        moFields.addField(moDecExemptionSalaryGreaterMwzPercentage);
        moFields.addField(moIntExemptionSalaryGreaterMwzLimit);
        moFields.addField(moDecPayPercentage);
        moFields.addField(moDecUnitsMaximumWeek);
        moFields.addField(moDecUnitsFactor);
        moFields.addField(moBoolWelfare);
        moFields.addField(moBoolDaysAdjustment);
        moFields.addField(moBoolDaysAbsence);
        moFields.addField(moBoolDaysWorked);
        moFields.addField(moBoolLoan);
        moFields.addField(moKeyEarningType);
        moFields.addField(moKeyLoanType);
        moFields.addField(moKeyBenefitType);
        moFields.addField(moKeyAccountingConfigurationType);
        moFields.addField(moKeyAccountingRecordType);
        moFields.addField(moKeyAbsenceClass);
        moFields.addField(moKeyAbsenceType);
        moFields.addField(moBoolWithholding);
        moFields.addField(moBoolPayrollTax);
        moFields.addField(moBoolTaxCalculationOptional);

        moFields.setFormButton(jbSave);
    }

    private void itemStateBoolLoan() {
        moKeyLoanType.setEnabled(moBoolLoan.getValue());
    }

    private void itemStateKeyEarningComputationType() {
        if (moKeyEarningComputationType.getValue().length > 0) {
            if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                moDecPayPercentage.setEnabled(false);
                moDecPayPercentage.setValue(0d);
                moDecUnitsMaximumWeek.setEnabled(false);
                moDecUnitsMaximumWeek.setValue(0d);
                moBoolDaysWorked.setSelected(false);
                moBoolDaysWorked.setEnabled(false);
            }
            else {
                moDecUnitsMaximumWeek.setEnabled(true);
                
                if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_DAY) {
                    moBoolDaysWorked.setEnabled(true);
                }
                else {
                    moBoolDaysWorked.setSelected(false);
                    moBoolDaysWorked.setEnabled(false);
                }
                
                if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_PER_DAY ||
                        moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_PER_HRS) {
                    moDecPayPercentage.setEnabled(true);
                }
                else {
                    moDecPayPercentage.setEnabled(false);
                    moDecPayPercentage.setValue(0d);
                }
            }
        }
    }
    
    private void itemStateKeyEarningExemptionType() {
        if (moKeyEarningExemptionType.getValue().length > 0) {
            if (moKeyEarningExemptionType.getValue()[0] != SModSysConsts.HRSS_TP_EAR_EXEM_PER) {
                moIntExemptionMwz.setEnabled(true);
                moDecExemptionSalaryEqualsMwzPercentage.setEnabled(false);
                moIntExemptionSalaryEqualsMwzLimit.setEnabled(false);
                moDecExemptionSalaryGreaterMwzPercentage.setEnabled(false);
                moIntExemptionSalaryGreaterMwzLimit.setEnabled(false);
                moDecExemptionSalaryEqualsMwzPercentage.setValue(0d);
                moIntExemptionSalaryEqualsMwzLimit.setValue(0);
                moDecExemptionSalaryGreaterMwzPercentage.setValue(0d);
                moIntExemptionSalaryGreaterMwzLimit.setValue(0);
                moBoolWelfare.setSelected(false);
                moBoolWelfare.setEnabled(false);
            }
            else {
                moIntExemptionMwz.setEnabled(false);
                moIntExemptionMwz.setValue(0);
                moDecExemptionSalaryEqualsMwzPercentage.setEnabled(true);
                moIntExemptionSalaryEqualsMwzLimit.setEnabled(true);
                moDecExemptionSalaryGreaterMwzPercentage.setEnabled(true);
                moIntExemptionSalaryGreaterMwzLimit.setEnabled(true);
                moBoolWelfare.setEnabled(true);
            }
        }
    }

    @Override
    public void addAllListeners() {
        moBoolLoan.addActionListener(this);
        moKeyEarningComputationType.addItemListener(this);
        moKeyEarningExemptionType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moBoolLoan.addActionListener(this);
        moKeyEarningComputationType.removeItemListener(this);
        moKeyEarningExemptionType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEarningType, SModConsts.HRSS_TP_EAR, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEarningComputationType, SModConsts.HRSS_TP_EAR_COMP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEarningExemptionType, SModConsts.HRSS_TP_EAR_EXEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyLoanType, SModConsts.HRSS_TP_LOAN, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBenefitType, SModConsts.HRSS_TP_BEN, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAccountingConfigurationType, SModConsts.HRSS_TP_ACC, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAccountingRecordType, SModConsts.HRSS_TP_ACC, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbEarning) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moTextNameAbbreviated.setValue(moRegistry.getNameAbbreviated());
        moIntExemptionMwz.setValue(moRegistry.getExemptionMwz());
        moDecExemptionSalaryEqualsMwzPercentage.setValue(moRegistry.getExemptionSalaryEqualsMwzPercentage());
        moIntExemptionSalaryEqualsMwzLimit.setValue(moRegistry.getExemptionSalaryEqualsMwzLimit());
        moDecExemptionSalaryGreaterMwzPercentage.setValue(moRegistry.getExemptionSalaryGreaterMwzPercentage());
        moIntExemptionSalaryGreaterMwzLimit.setValue(moRegistry.getExemptionSalaryGreaterMwzLimit());
        moDecPayPercentage.setValue(moRegistry.getPayPercentage());
        moDecUnitsMaximumWeek.setValue(moRegistry.getUnitsMaximumWeek());
        moDecUnitsFactor.setValue(moRegistry.getUnitsFactor());
        moBoolWelfare.setValue(moRegistry.isWelfare());
        moBoolDaysAdjustment.setValue(moRegistry.isDaysAdjustment());
        moBoolDaysAbsence.setValue(moRegistry.isDaysAbsence());
        moBoolDaysWorked.setValue(moRegistry.isDaysWorked());
        moBoolWithholding.setValue(moRegistry.isWithholding());
        moBoolPayrollTax.setValue(moRegistry.isPayrollTax());
        moBoolTaxCalculationOptional.setValue(moRegistry.isAlternativeTaxCalculation());
        moKeyEarningType.setValue(new int[] { moRegistry.getFkEarningTypeId() });
        moKeyEarningComputationType.setValue(new int[] { moRegistry.getFkEarningComputationTypeId() });
        moKeyEarningExemptionType.setValue(new int[] { moRegistry.getFkEarningExemptionTypeId() });
        moBoolLoan.setValue(moRegistry.getFkLoanTypeId() > SModSysConsts.HRSS_TP_LOAN_NON);
        moKeyLoanType.setValue(moRegistry.isRegistryNew() ? new int[] { SModSysConsts.HRSS_TP_LOAN_NON } : new int[] { moRegistry.getFkLoanTypeId() });
        moKeyBenefitType.setValue(new int[] { moRegistry.getFkBenefitTypeId() });
        moKeyAccountingConfigurationType.setValue(new int[] { moRegistry.getFkAccountingConfigurationTypeId() });
        moKeyAccountingRecordType.setValue(new int[] { moRegistry.getFkAccountingRecordTypeId() });
        moKeyAbsenceClass.setValue(new int[] { moRegistry.getFkAbsenceClassId_n() });
        moKeyAbsenceType.setValue(new int[] { moRegistry.getFkAbsenceClassId_n(), moRegistry.getFkAbsenceTypeId_n() });

        setFormEditable(true);
        
        itemStateBoolLoan();
        itemStateKeyEarningComputationType();
        itemStateKeyEarningExemptionType();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbEarning registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setNameAbbreviated(moTextNameAbbreviated.getValue());
        registry.setExemptionMwz(moIntExemptionMwz.getValue());
        registry.setExemptionSalaryEqualsMwzPercentage(moDecExemptionSalaryEqualsMwzPercentage.getValue());
        registry.setExemptionSalaryEqualsMwzLimit(moIntExemptionSalaryEqualsMwzLimit.getValue());
        registry.setExemptionSalaryGreaterMwzPercentage(moDecExemptionSalaryGreaterMwzPercentage.getValue());
        registry.setExemptionSalaryGreaterMwzLimit(moIntExemptionSalaryGreaterMwzLimit.getValue());
        registry.setPayPercentage(moDecPayPercentage.getValue());
        registry.setUnitsMaximumWeek(moDecUnitsMaximumWeek.getValue());
        registry.setUnitsFactor(moDecUnitsFactor.getValue());
        registry.setWelfare(moBoolWelfare.getValue());
        registry.setDaysAdjustment(moBoolDaysAdjustment.getValue());
        registry.setDaysAbsence(moBoolDaysAbsence.getValue());
        registry.setDaysWorked(moBoolDaysWorked.getValue());
        registry.setWithholding(moBoolWithholding.getValue());
        registry.setPayrollTax(moBoolPayrollTax.getValue());
        registry.setAlternativeTaxCalculation(moBoolTaxCalculationOptional.getValue());
        registry.setFkEarningTypeId(moKeyEarningType.getValue()[0]);
        registry.setFkEarningComputationTypeId(moKeyEarningComputationType.getValue()[0]);
        registry.setFkEarningExemptionTypeId(moKeyEarningExemptionType.getValue()[0]);
        registry.setFkLoanTypeId(moBoolLoan.getValue() ? moKeyLoanType.getValue()[0] : SModSysConsts.HRSS_TP_LOAN_NON);
        registry.setFkBenefitTypeId(moKeyBenefitType.getValue()[0]);
        registry.setFkAccountingConfigurationTypeId(moKeyAccountingConfigurationType.getValue()[0]);
        registry.setFkAccountingRecordTypeId(moKeyAccountingRecordType.getValue()[0]);
        registry.setFkAbsenceClassId_n(moKeyAbsenceClass.getSelectedIndex() == 0 || moKeyAbsenceType.getSelectedIndex() == 0 ? SLibConsts.UNDEFINED : moKeyAbsenceClass.getValue()[0]);
        registry.setFkAbsenceTypeId_n(moKeyAbsenceClass.getSelectedIndex() == 0 || moKeyAbsenceType.getSelectedIndex() == 0 ? SLibConsts.UNDEFINED : moKeyAbsenceType.getValue()[1]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moKeyLoanType.getSelectedIndex() > 0) {
                if (moKeyLoanType.getValue()[0] != SModSysConsts.HRSS_TP_LOAN_NON && moKeyEarningComputationType.getValue()[0] != SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlEarningComputationType.getText()) + "'.");
                    validation.setComponent(moKeyEarningComputationType);
                }
            }
            
            if (validation.isValid()) {
                if (moBoolWelfare.getValue()) {
                    if (moDecExemptionSalaryEqualsMwzPercentage.getValue() != 1) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlExemptionSalaryEqualsMwzPercentage.getText()) + "'.");
                        validation.setComponent(moDecExemptionSalaryEqualsMwzPercentage);
                    }
                    else if (moDecExemptionSalaryGreaterMwzPercentage.getValue() != 1) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlExemptionSalaryGreaterMwzPercentage.getText()) + "'.");
                        validation.setComponent(moDecExemptionSalaryGreaterMwzPercentage);
                    }
                }
            }
            
            if (validation.isValid()) {
                if (moKeyEarningComputationType.getValue()[0] != SModSysConsts.HRSS_TP_EAR_COMP_DAY && moBoolDaysAdjustment.getValue()) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(moBoolDaysAdjustment.getText()) + "'.");
                    validation.setComponent(moBoolDaysAdjustment);
                }
            }
            
            if (validation.isValid()) {
                if (moKeyAccountingConfigurationType.getValue()[0] == SModSysConsts.HRSS_TP_ACC_GBL &&
                        !SLibUtils.belongsTo(moKeyAccountingRecordType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_ACC_GBL, SModSysConsts.HRSS_TP_ACC_DEP, SModSysConsts.HRSS_TP_ACC_EMP })) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAccountingRecordType.getText()) + "'.");
                    validation.setComponent(moKeyAccountingRecordType);
                }
                else if (moKeyAccountingConfigurationType.getValue()[0] == SModSysConsts.HRSS_TP_ACC_DEP &&
                        !SLibUtils.belongsTo(moKeyAccountingRecordType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_ACC_DEP, SModSysConsts.HRSS_TP_ACC_EMP })) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAccountingRecordType.getText()) + "'.");
                    validation.setComponent(moKeyAccountingRecordType);
                }
                else if (moKeyAccountingConfigurationType.getValue()[0] == SModSysConsts.HRSS_TP_ACC_EMP &&
                        !SLibUtils.belongsTo(moKeyAccountingRecordType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_ACC_EMP })) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAccountingRecordType.getText()) + "'.");
                    validation.setComponent(moKeyAccountingRecordType);
                }
            }
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == moBoolLoan) {
                itemStateBoolLoan();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyEarningComputationType) {
                itemStateKeyEarningComputationType();
            }
            else if (comboBox == moKeyEarningExemptionType) {
                itemStateKeyEarningExemptionType();
            }
        }
    }
}
