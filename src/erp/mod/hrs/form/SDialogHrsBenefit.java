/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SHrsBenefit;
import erp.mod.hrs.db.SHrsBenefitParams;
import erp.mod.hrs.db.SHrsBenefitTableByAnniversary;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsPayrollReceipt;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas
 */
public class SDialogHrsBenefit extends SBeanFormDialog implements ChangeListener, FocusListener, ActionListener {

    protected SHrsBenefitParams moHrsBenefitParams;
    protected SHrsPayrollReceipt moHrsPayrollReceipt;
    protected SDbEmployee moEmployee;
    protected SDbBenefitTable moBenefit;
    protected SDbBenefitTable moBenefitAux;
    protected ArrayList<SHrsBenefitTableByAnniversary> maBenefitTableByAnniversary;
    protected ArrayList<SHrsBenefitTableByAnniversary> maBenefitTableByAnniversaryAux;
    protected SHrsBenefit moHrsBenefit;
    protected ArrayList<SHrsBenefit> maHrsBenefits;
    
    protected int mnBenefitAnnLimit;
    protected int mnBenefitDaysAnn;
    protected int mnBenefitYear;
    protected Date mtDateCut;
    protected int mnEarningComputationTypeId;
    protected boolean mbIsEditAmount;
    protected boolean mbIsDaysAdjustment;

    /**
     * Creates new form SDialogHrsBenefit
     * @param client
     * @param formType
     * @param title
     */
    public SDialogHrsBenefit(SGuiClient client, int formType, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, formType, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlBenefit = new javax.swing.JLabel();
        moTextBenefit = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlDateBenefit = new javax.swing.JLabel();
        moDateBenefitDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel15 = new javax.swing.JPanel();
        jlDateLastDismiss_n = new javax.swing.JLabel();
        moDateLastDismiss_n = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel11 = new javax.swing.JPanel();
        jlDateBase = new javax.swing.JLabel();
        moDateBaseDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel14 = new javax.swing.JPanel();
        jlDateCut = new javax.swing.JLabel();
        moDateCutDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlSeniority = new javax.swing.JLabel();
        moIntSeniority = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityYear = new javax.swing.JLabel();
        moIntSeniorityDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityDays = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlDaysElapsed = new javax.swing.JLabel();
        moIntDaysElapsed = new sa.lib.gui.bean.SBeanFieldInteger();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jlAnniversary = new javax.swing.JLabel();
        jsAnniversary = new javax.swing.JSpinner();
        moIntBenefitYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel4 = new javax.swing.JPanel();
        jlDaysToPaidTable = new javax.swing.JLabel();
        moIntDaysToPaidTable = new sa.lib.gui.bean.SBeanFieldInteger();
        moDecBonusPercentageTable = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel10 = new javax.swing.JPanel();
        jlDaysPayed = new javax.swing.JLabel();
        moDecDaysPayed = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurAmountPayed = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jlDaysToPaid = new javax.swing.JLabel();
        moDecDaysToPaid = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbProportionalDays = new javax.swing.JButton();

        setTitle("Agregar prestación");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(13, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefit.setText("Prestación:");
        jlBenefit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlBenefit);

        moTextBenefit.setText("sBeanFieldText1");
        moTextBenefit.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moTextBenefit);

        jPanel2.add(jPanel13);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBenefit.setText("Fecha beneficios:");
        jlDateBenefit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateBenefit);
        jPanel12.add(moDateBenefitDate);

        jPanel2.add(jPanel12);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateLastDismiss_n.setText("Fecha última baja:");
        jlDateLastDismiss_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDateLastDismiss_n);
        jPanel15.add(moDateLastDismiss_n);

        jPanel2.add(jPanel15);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBase.setText("Fecha base:");
        jlDateBase.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateBase);
        jPanel11.add(moDateBaseDate);

        jPanel2.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCut.setText("Fecha corte:");
        jlDateCut.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDateCut);
        jPanel14.add(moDateCutDate);

        jPanel2.add(jPanel14);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeniority.setText("Antigüedad:");
        jlSeniority.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlSeniority);
        jPanel9.add(moIntSeniority);

        jlSeniorityYear.setText("años");
        jlSeniorityYear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jlSeniorityYear);

        moIntSeniorityDays.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(moIntSeniorityDays);

        jlSeniorityDays.setText("días");
        jlSeniorityDays.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jlSeniorityDays);

        jPanel2.add(jPanel9);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysElapsed.setText("Días transcurridos:");
        jlDaysElapsed.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDaysElapsed);
        jPanel8.add(moIntDaysElapsed);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel1.setText("(desde fecha base hasta fecha corte)");
        jLabel1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(jLabel1);

        jPanel2.add(jPanel8);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnniversary.setText("Aniversario:");
        jlAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlAnniversary);

        jsAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jsAnniversary);

        moIntBenefitYear.setToolTipText("Año aniversario");
        moIntBenefitYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(moIntBenefitYear);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysToPaidTable.setText("Días:");
        jlDaysToPaidTable.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDaysToPaidTable);
        jPanel4.add(moIntDaysToPaidTable);

        moDecBonusPercentageTable.setToolTipText("Prima");
        jPanel4.add(moDecBonusPercentageTable);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysPayed.setText("Días pagados:");
        jlDaysPayed.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDaysPayed);
        jPanel10.add(moDecDaysPayed);

        moCurAmountPayed.setToolTipText("Monto pagado");
        jPanel10.add(moCurAmountPayed);

        jPanel2.add(jPanel10);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysToPaid.setText("Días a pagar:");
        jlDaysToPaid.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDaysToPaid);
        jPanel5.add(moDecDaysToPaid);

        moCurAmount.setToolTipText("Monto a pagar");
        jPanel5.add(moCurAmount);

        jbProportionalDays.setText("Pagar prop.");
        jbProportionalDays.setToolTipText("Pagar parte proporcional");
        jbProportionalDays.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbProportionalDays.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel5.add(jbProportionalDays);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbProportionalDays;
    private javax.swing.JLabel jlAnniversary;
    private javax.swing.JLabel jlBenefit;
    private javax.swing.JLabel jlDateBase;
    private javax.swing.JLabel jlDateBenefit;
    private javax.swing.JLabel jlDateCut;
    private javax.swing.JLabel jlDateLastDismiss_n;
    private javax.swing.JLabel jlDaysElapsed;
    private javax.swing.JLabel jlDaysPayed;
    private javax.swing.JLabel jlDaysToPaid;
    private javax.swing.JLabel jlDaysToPaidTable;
    private javax.swing.JLabel jlSeniority;
    private javax.swing.JLabel jlSeniorityDays;
    private javax.swing.JLabel jlSeniorityYear;
    private javax.swing.JSpinner jsAnniversary;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountPayed;
    private sa.lib.gui.bean.SBeanFieldDate moDateBaseDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateBenefitDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateCutDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastDismiss_n;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBonusPercentageTable;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDaysPayed;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDaysToPaid;
    private sa.lib.gui.bean.SBeanFieldInteger moIntBenefitYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysElapsed;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysToPaidTable;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniority;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniorityDays;
    private sa.lib.gui.bean.SBeanFieldText moTextBenefit;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        mbFirstActivation = true;

        jbSave.setText("Aceptar");

        moTextBenefit.setTextSettings(SGuiUtils.getLabelName(jlDateBase.getText()), 150);
        moDateBenefitDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateBenefit.getText()), true);
        moDateLastDismiss_n.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateLastDismiss_n.getText()), false);
        moDateBaseDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateBase.getText()), true);
        moDateCutDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateCut.getText()), true);
        moIntSeniority.setIntegerSettings(SGuiUtils.getLabelName(jlSeniority), SGuiConsts.GUI_TYPE_INT, false);
        moIntSeniorityDays.setIntegerSettings(SGuiUtils.getLabelName(jlSeniority), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysElapsed.setIntegerSettings(SGuiUtils.getLabelName(jlAnniversary.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntBenefitYear.setIntegerSettings(SGuiUtils.getLabelName(jlAnniversary.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntDaysToPaidTable.setIntegerSettings(SGuiUtils.getLabelName(jlDaysToPaidTable.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecBonusPercentageTable.setDecimalSettings(SGuiUtils.getLabelName(moDecBonusPercentageTable.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecDaysPayed.setDecimalSettings(SGuiUtils.getLabelName(jlDaysPayed.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurAmountPayed.setCompoundFieldSettings(miClient);
        moCurAmountPayed.getField().setDecimalSettings(SGuiUtils.getLabelName(moCurAmountPayed.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurAmountPayed.setCurrencyKey(miClient.getSession().getSessionCustom().getLocalCurrencyKey());
        moDecDaysToPaid.setDecimalSettings(SGuiUtils.getLabelName(jlDaysToPaid.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurAmount.setCompoundFieldSettings(miClient);
        moCurAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(moCurAmount.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurAmount.setCurrencyKey(miClient.getSession().getSessionCustom().getLocalCurrencyKey());
        
        moFields.addField(moTextBenefit);
        moFields.addField(moDateBenefitDate);
        moFields.addField(moDateLastDismiss_n);
        moFields.addField(moDateBaseDate);
        moFields.addField(moDateCutDate);
        moFields.addField(moIntSeniority);
        moFields.addField(moIntSeniorityDays);
        moFields.addField(moIntDaysElapsed);
        moFields.addField(moIntBenefitYear);
        moFields.addField(moIntDaysToPaidTable);
        moFields.addField(moDecBonusPercentageTable);
        //moFields.addField(moDecDaysPayed);
        //moFields.addField(moCurAmountPayed.getField());
        moFields.addField(moDecDaysToPaid);
        moFields.addField(moCurAmount.getField());

        moFields.setFormButton(jbSave);

        moDateBaseDate.setValue(miClient.getSession().getCurrentDate());
        
        moCurAmountPayed.getField().getComponent().setToolTipText("Monto pagado");
        moCurAmount.getField().getComponent().setToolTipText("Monto a pagar");
        
        moTextBenefit.setEditable(false);
        moDateBenefitDate.setEditable(false);
        moDateLastDismiss_n.setEditable(false);
        moDateBaseDate.setEditable(false);
        //moDateCutDate.setEditable(false);
        moIntSeniority.setEditable(false);
        moIntSeniorityDays.setEditable(false);
        moIntDaysElapsed.setEditable(false);
        moIntBenefitYear.setEditable(false);
        moIntDaysToPaidTable.setEditable(false);
        moDecBonusPercentageTable.setEditable(false);
        moDecDaysPayed.setEditable(false);
        moCurAmountPayed.getField().setEditable(false);
        //moDecDaysToPaid.setEditable(false);
        //moCurValue.setEditable(false);

        reloadCatalogues();
        addAllListeners();
    }
    
    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            ((JSpinner.NumberEditor) jsAnniversary.getEditor()).getTextField().requestFocus();
        }
    }
    
    private void setDateBaseDate(Date dateCut, int benefitAnn) {
        if (mnFormType == SModSysConsts.HRSS_TP_BEN_ANN_BON) {
            if (moEmployee.getDateBenefits().compareTo(SLibTimeUtils.getBeginOfYear(dateCut)) >= 0) {
                moDateBaseDate.setValue(moEmployee.getDateBenefits());
            }
            else {
                moDateBaseDate.setValue(SLibTimeUtils.getBeginOfYear(dateCut));
            }
        }
        else {
            moDateBaseDate.setValue(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnn, 0, 0));
        }
    }
    
    private void enableFields() {
        jbProportionalDays.setEnabled((Integer) jsAnniversary.getValue() > moIntSeniority.getValue());
    }
    
    private void loadBenefitTables(SDbBenefitTable benefitTable, SDbBenefitTable benefitTableAux) throws Exception {
        int tableAuxId = 0;
        
        if (benefitTable == null) {
            moBenefit = SHrsUtils.getBenefitTableByEarning(miClient.getSession(), moHrsBenefitParams.getEarningId(), moHrsPayrollReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), mtDateCut);
        }
        else {
            moBenefit = benefitTable;
        }
        
        if (benefitTableAux == null && mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
            tableAuxId = SHrsUtils.getRecentBenefitTable(miClient.getSession(), SModSysConsts.HRSS_TP_BEN_VAC, moHrsPayrollReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), mtDateCut);
            moBenefitAux = moHrsPayrollReceipt.getHrsPayroll().getBenefitTable(tableAuxId);
        }
        else {
            moBenefitAux = benefitTableAux;
        }

        if (moBenefit == null) {
            throw new Exception("No existe tabla de prestaciones adecuada para la fecha de corte.");
        }
        
        if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON && moBenefitAux == null) {
            throw new Exception("No existe tabla de prestaciones adecuada para la fecha de corte.");
        }
        
        maBenefitTableByAnniversary = moHrsPayrollReceipt.getHrsPayroll().getBenefitTableAnniversary(moBenefit.getPkBenefitId());
        
        if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
            maBenefitTableByAnniversaryAux = moHrsPayrollReceipt.getHrsPayroll().getBenefitTableAnniversary(moBenefitAux.getPkBenefitId());
        }
    }
    
    private void actionProportinalDays() {
        boolean leapYear = false;
        
        try {
            leapYear = SLibTimeUtils.isLeapYear(SLibTimeUtils.digestYear(mtDateCut)[0]);
            
            moDecDaysToPaid.setValue((double) moIntDaysToPaidTable.getValue() * moIntDaysElapsed.getValue() / (leapYear ? SHrsConsts.YEAR_DAYS + 1 : SHrsConsts.YEAR_DAYS));
            actionCalculateAmount();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void focusLostDateCut() throws Exception {
        int benefitAnn = 0;
        
        mtDateCut = moDateCutDate.getValue();
        
        if (mtDateCut == null) {
            moDateCutDate.requestFocus();
            throw new Exception(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDateCut) + "'.");
        }
        else {
            benefitAnn = SHrsUtils.getSeniorityEmployee(miClient.getSession(), moEmployee.getDateBenefits(), mtDateCut);

            setDateBaseDate(mtDateCut, benefitAnn);

            if (mtDateCut.compareTo(moDateBaseDate.getValue()) < 0) {
                moDateCutDate.requestFocus();
                throw new Exception(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCut) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateBase) + "'.");
            }
            else if (!moEmployee.isActive() && mtDateCut.compareTo(moDateLastDismiss_n.getValue()) > 0) {
                moDateCutDate.requestFocus();
                throw new Exception(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCut) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateLastDismiss_n) + "'.");
            }
            else {
                moIntSeniority.setValue(benefitAnn);
                moIntSeniorityDays.setValue((int) SLibTimeUtils.getDaysDiff(mtDateCut, SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnn, 0, 0)));
                moIntDaysElapsed.setValue((int) SLibTimeUtils.getDaysDiff(mtDateCut, moDateBaseDate.getValue()) + 1);

                try {
                    loadBenefitTables(null, null);
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                jsAnniversary.setValue(benefitAnn == 0 ? 1 : (Integer) benefitAnn);
                enableFields();
            }
        }
    }
    
    private void actionCalculateAmount() {
        double units = 0;
        
        units = (!mbIsDaysAdjustment ? moDecDaysToPaid.getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() : moDecDaysToPaid.getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorDaysPaid());
        moCurAmount.getField().setValue(units * moHrsPayrollReceipt.getReceipt().getPaymentDaily() * (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON ? moDecBonusPercentageTable.getValue() : 1));
    }
    
    private void actionStateChangeAnniversary() {
        moIntBenefitYear.setValue(SLibTimeUtils.digestYear(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), (Integer) jsAnniversary.getValue() - 1, 0, 0))[0]);
        readHrsBenefitAcummulate((Integer) jsAnniversary.getValue());
        enableFields();
    }
    
    private void readHrsBenefit() {
        int benefitAnn = 0;
        
        try {
            benefitAnn = SHrsUtils.getSeniorityEmployee(miClient.getSession(), moEmployee.getDateBenefits(), mtDateCut);
            
            if (!moEmployee.isActive()) {
                if (mtDateCut.compareTo(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnn, 0, 0)) > 0) {
                    mnBenefitAnnLimit = benefitAnn + 1;
                }
                else {
                    mnBenefitAnnLimit = benefitAnn;
                }
                moDateLastDismiss_n.setValue(moEmployee.getDateLastDismiss_n());
            }
            else {
                mnBenefitAnnLimit = 100;
            }
            
            moTextBenefit.setText(moBenefit.getName());
            moDateBenefitDate.setValue(moEmployee.getDateBenefits());
            
            moDateCutDate.setValue(mtDateCut);
            setDateBaseDate(mtDateCut, benefitAnn);
            
            moIntSeniority.setValue(benefitAnn);
            moIntSeniorityDays.setValue((int) SLibTimeUtils.getDaysDiff(mtDateCut, SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnn, 0, 0)));
            moIntDaysElapsed.setValue((int) SLibTimeUtils.getDaysDiff(mtDateCut, moDateBaseDate.getValue()) + 1);
            
            jsAnniversary.setModel(new SpinnerNumberModel(1, 1, mnBenefitAnnLimit, 1));
            jsAnniversary.setValue(benefitAnn == 0 ? 1 : (Integer) benefitAnn);
            
            if (benefitAnn == 0) {
                actionStateChangeAnniversary();
                actionProportinalDays();
            }
            else {
                actionStateChangeAnniversary();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void readHrsBenefitAcummulate(int seniority) {
        boolean found = false;
        SHrsBenefitTableByAnniversary benefitTableRow = null;
        SHrsBenefitTableByAnniversary benefitTableRowAux = null;
        
        try {
            mnBenefitYear = SLibTimeUtils.digestYear(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), seniority - 1, 0, 0))[0];
            
            // Read benefits accumulated by benefit type:
            
            maHrsBenefits = SHrsUtils.readHrsBenefits(miClient.getSession(), moEmployee, mnFormType, seniority, mnBenefitYear, moHrsPayrollReceipt.getHrsPayroll().getPayroll().getPkPayrollId(), maBenefitTableByAnniversary, maBenefitTableByAnniversaryAux, moHrsPayrollReceipt.getReceipt().getPaymentDaily());
            
            /* XXX jbarajas (11-09-2015) is complement in the method.
            // To complete benefits registries accumulated by benefit type:
            
            if (moBenefit != null) {
                for (SHrsBenefit hrsBenefit : maHrsBenefits) {
                    benefitTableRow = null;
                    benefitTableRowAux = null;
            
                    for (SHrsBenefitTableByAnniversary row : maBenefitTableByAnniversary) {
                        if (row.getBenefitAnn() <= hrsBenefit.getBenefitAnn()) {
                            benefitTableRow = row;
                        }
                    }

                    if (moBenefitAux != null) {
                        if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                            for (SHrsBenefitTableByAnniversary row : maBenefitTableByAnniversaryAux) {
                                if (row.getBenefitAnn() <= hrsBenefit.getBenefitAnn()) {
                                    benefitTableRowAux = row;
                                }
                            }
                        }
                    }

                    if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                        hrsBenefit.setValue(benefitTableRow == null || benefitTableRowAux == null ? 0d : benefitTableRowAux.getValue());
                        hrsBenefit.setAmount(benefitTableRow == null || benefitTableRowAux == null ? 0d : benefitTableRowAux.getValue() * moHrsPayrollReceipt.getReceipt().getPaymentDaily() * benefitTableRow.getValue());
                    }
                    else {
                        hrsBenefit.setValue(benefitTableRow == null ? 0d : benefitTableRow.getValue());
                        hrsBenefit.setAmount(benefitTableRow == null ? 0d : benefitTableRow.getValue() * moHrsPayrollReceipt.getReceipt().getPaymentDaily());
                    }
                }
            }
            
            benefitTableRow = null;
            benefitTableRowAux = null;
            */
            
            // Obtain benefit table row more appropiate for seniority:
            if (moBenefit != null) {
                for (SHrsBenefitTableByAnniversary row : maBenefitTableByAnniversary) {
                    if (row.getBenefitAnn() <= seniority) {
                        benefitTableRow = row;
                    }
                }
            }
            
            // Obtain benefit table row more appropiate for seniority, it's for vacation bonification:
            
            if (moBenefitAux != null) {
                if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                    for (SHrsBenefitTableByAnniversary row : maBenefitTableByAnniversaryAux) {
                        if (row.getBenefitAnn() <= seniority) {
                            benefitTableRowAux = row;
                        }
                    }
                }
            }
            
            for (SHrsBenefit hrsBenefit : maHrsBenefits) {
                hrsBenefit.setValuePayedReceipt(moHrsPayrollReceipt.getBenefitValue(mnFormType, hrsBenefit.getBenefitAnn(), hrsBenefit.getBenefitYear()));
                hrsBenefit.setAmountPayedReceipt(moHrsPayrollReceipt.getBenefitAmount(mnFormType, hrsBenefit.getBenefitAnn(), hrsBenefit.getBenefitYear()));
            }
            
            if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                moIntDaysToPaidTable.setValue(benefitTableRowAux == null ? 0 : (int) benefitTableRowAux.getValue());
                moDecBonusPercentageTable.setValue(benefitTableRow == null ? 0d : benefitTableRow.getValue());
            }
            else {
                moIntDaysToPaidTable.setValue(benefitTableRow == null ? 0 : (int) benefitTableRow.getValue());
                moDecBonusPercentageTable.setValue(benefitTableRow == null ? 0d : 0d);
            }
            
            for (SHrsBenefit hrsBenefit : maHrsBenefits) {
                if (SLibUtils.compareKeys(hrsBenefit.getPrimaryBenefitType(), new int[] { mnFormType, seniority, mnBenefitYear })) {
                    moDecDaysPayed.setValue(hrsBenefit.getValuePayed() + hrsBenefit.getValuePayedReceipt());
                    moCurAmountPayed.getField().setValue(hrsBenefit.getAmountPayed() + hrsBenefit.getAmountPayedReceipt());
                    moDecDaysToPaid.setValue(hrsBenefit.getValuePending() <= 0 ? 0 : hrsBenefit.getValuePending());
                    actionCalculateAmount();
                    found = true;
                    break;
                }
            }
            
            if (!found) {
                moDecDaysPayed.setValue(0d);
                moDecDaysToPaid.setValue(moIntDaysToPaidTable.getValue());
                actionCalculateAmount();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
    }
    
    private void createHrsBenefit() {
        double units = 0;
        
        units = (!mbIsDaysAdjustment ? moDecDaysToPaid.getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() : moDecDaysToPaid.getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorDaysPaid());
        moHrsBenefit = new SHrsBenefit(mnFormType, (Integer) jsAnniversary.getValue(), mnBenefitYear);
        
        for (SHrsBenefit hrsBenefit : maHrsBenefits) {
            if (SLibUtils.compareKeys(hrsBenefit.getPrimaryBenefitType(), new int[] { mnFormType, (Integer) jsAnniversary.getValue(), mnBenefitYear })) {
                moHrsBenefit.setValue(hrsBenefit.getValue());
                moHrsBenefit.setValuePayed(hrsBenefit.getValuePayed());
                moHrsBenefit.setAmount(hrsBenefit.getAmount());
                moHrsBenefit.setAmountPayed(hrsBenefit.getAmountPayed());
            }
        }
        moHrsBenefit.setFactorAmount(moDecBonusPercentageTable.getValue());
        moHrsBenefit.setEditAmount(mbIsEditAmount);
        moHrsBenefit.setValuePayedReceipt(moDecDaysToPaid.getValue());
        moHrsBenefit.setAmountPayedReceipt(moCurAmount.getField().getValue());
        moHrsBenefit.setAmountPayedReceiptSys(SLibUtils.round(units * moHrsPayrollReceipt.getReceipt().getPaymentDaily() * (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON ? moDecBonusPercentageTable.getValue() : 1), SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public SGuiValidation validateForm() {
        double amountSys = 0;
        double daysDiff = 0;
        double units = 0;
        mbIsEditAmount = false;
        String msg = "";
        SGuiValidation validation = moFields.validateFields();

        units = (!mbIsDaysAdjustment ? moDecDaysToPaid.getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() : moDecDaysToPaid.getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorDaysPaid());
        try {
            if (validation.isValid()) {
                daysDiff = moIntDaysToPaidTable.getValue() - (moDecDaysPayed.getValue() + moDecDaysToPaid.getValue());
                amountSys = SLibUtils.round(units * moHrsPayrollReceipt.getReceipt().getPaymentDaily() * (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON ? moDecBonusPercentageTable.getValue() : 1), SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits());
        
                createHrsBenefit();
                
                if (mtDateCut.compareTo(moDateBaseDate.getValue()) < 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCut) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateBase) + "'.");
                    validation.setComponent(moDateCutDate);
                }
                else if (!moEmployee.isActive() && mtDateCut.compareTo(moDateLastDismiss_n.getValue()) > 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCut) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateLastDismiss_n) + "'.");
                    validation.setComponent(moDateCutDate);
                }
                
                if (validation.isValid() && (Integer) jsAnniversary.getValue() == 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAnniversary) + "'.");
                    validation.setComponent(((JSpinner.NumberEditor) jsAnniversary.getEditor()).getTextField());
                }
                
                if (validation.isValid() && mnEarningComputationTypeId != SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_DAYS_TO_PAID, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        validation.setMessage(msg);
                        validation.setComponent(moDecDaysToPaid);
                    }
                }
                
                if (validation.isValid() && (mnEarningComputationTypeId == SModSysConsts.HRSS_TP_EAR_COMP_AMT || moDecDaysToPaid.getValue() != 0)) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_AMOUNT_TO_PAID, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        validation.setMessage(msg);
                        validation.setComponent(moCurAmount.getField().getComponent());
                    }
                }
                
                if (validation.isValid()) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_DAYS_TABLE, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moDecDaysToPaid);
                        }
                    }
                }

                if (validation.isValid()) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_DAYS_TO_PAID_TOTAL, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moDecDaysToPaid);
                        }
                    }
                }
                
                if (validation.isValid()) {
                    mbIsEditAmount = true;
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_AMOUNT_TO_PAID_AMOUNT_SYS, SHrsBenefit.VALIDATION_BENEFIT_TYPE);

                    if (!msg.isEmpty()) {
                        if (mnEarningComputationTypeId == SModSysConsts.HRSS_TP_EAR_COMP_AMT && moCurAmount.getField().getValue() < amountSys) {
                            validation.setMessage(msg);
                            validation.setComponent(moCurAmount.getField().getComponent());
                        }
                        else {
                            if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                                validation.setMessage(msg);
                                validation.setComponent(moCurAmount.getField().getComponent());
                            }
                        }
                    }
                }
            }
            
            if (validation.isValid()) {
                createHrsBenefit();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
        return validation;
    }

    @Override
    public void addAllListeners() {
        jsAnniversary.addChangeListener(this);
        moDateCutDate.getComponent().addFocusListener(this);
        moDecDaysToPaid.addFocusListener(this);
        jbProportionalDays.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jsAnniversary.removeChangeListener(this);
        moDateCutDate.getComponent().removeFocusListener(this);
        moDecDaysToPaid.removeFocusListener(this);
        jbProportionalDays.removeActionListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {

    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SGuiConsts.PARAM_ROWS:
                moHrsBenefitParams = (SHrsBenefitParams) value;
                moEmployee = moHrsBenefitParams.getEmployee();
                mtDateCut = moHrsBenefitParams.getDateCut();
                moHrsPayrollReceipt = moHrsBenefitParams.getHrsPayrollReceipt();
                mnEarningComputationTypeId = moHrsBenefitParams.getEarningComputationTypeId();
                mbIsDaysAdjustment = moHrsBenefitParams.isDaysAdjustment();
                
                try {
                    loadBenefitTables(moHrsBenefitParams.getBenefit(), moHrsBenefitParams.getBenefitAux());
                    readHrsBenefit();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            default:
                break;
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SGuiConsts.PARAM_ROWS:
                value = moHrsBenefit;
                break;
            default:
                break;
        }
        
        return value;        
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsAnniversary) {
                actionStateChangeAnniversary();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent evt) {
        if (evt.getSource() instanceof JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) evt.getSource();

            if (formattedTextField == moDateCutDate.getComponent()) {
                try {
                    focusLostDateCut();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
        else if (evt.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) evt.getSource();

            if (textField == moDecDaysToPaid) {
                actionCalculateAmount();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        try {
            if (evt.getSource() instanceof JButton) {
                JButton button = (JButton) evt.getSource();

                if (button == jbProportionalDays) {
                    actionProportinalDays();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
}
