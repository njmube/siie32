/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.client.SClientInterface;
import erp.mbps.data.SDataBizPartner;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbPayroll;
import java.awt.BorderLayout;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;

/**
 *
 * @author Juan Barajas
 */
public class SDialogRepHrsReportsPayroll extends SBeanDialogReport {
    
    protected SDbPayroll moPayroll;
    protected int mnPayrollId;
    protected int mnPaymentTypeId;
    protected SPanelHrsDepartaments moPanelHrsDepartaments;
    
    /**
     * Creates new form SDialogRepHrsReportsPayroll
     */
    public SDialogRepHrsReportsPayroll(SGuiClient client, String title) {
        setFormSettings(client, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbGrpOrderBy = new javax.swing.ButtonGroup();
        jbGrpReport = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntPeriodYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jlPaymentType = new javax.swing.JLabel();
        moTextPaymentType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlPayrollNumber = new javax.swing.JLabel();
        moIntPayrollNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jlDateStart = new javax.swing.JLabel();
        moTextDateStart = new sa.lib.gui.bean.SBeanFieldText();
        jlDateEnd = new javax.swing.JLabel();
        moTextDateEnd = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jrbReportPrePayroll = new javax.swing.JRadioButton();
        jrbReportPayroll = new javax.swing.JRadioButton();
        jrbReportListEarning = new javax.swing.JRadioButton();
        jrbReportListDeductions = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jrbOrderByNumEmployee = new javax.swing.JRadioButton();
        jrbOrderByNameEmployee = new javax.swing.JRadioButton();
        jrbOrderByNumDepartament = new javax.swing.JRadioButton();
        jrbOrderByNameDepartament = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros nómina:"));
        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Ejercicio:");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlYear);

        moIntPeriodYear.setEditable(false);
        jPanel10.add(moIntPeriodYear);

        jlPaymentType.setText("Periodo pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlPaymentType);

        moTextPaymentType.setEditable(false);
        moTextPaymentType.setText("sBeanFieldText1");
        jPanel10.add(moTextPaymentType);

        jPanel6.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollNumber.setText("Número nómina:");
        jlPayrollNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlPayrollNumber);

        moIntPayrollNumber.setEditable(false);
        jPanel11.add(moIntPayrollNumber);

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);

        moTextDateStart.setEditable(false);
        moTextDateStart.setText("sBeanFieldText1");
        moTextDateStart.setToolTipText("");
        jPanel11.add(moTextDateStart);

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateEnd);

        moTextDateEnd.setEditable(false);
        moTextDateEnd.setText("sBeanFieldText1");
        moTextDateEnd.setToolTipText("");
        jPanel11.add(moTextDateEnd);

        jPanel6.add(jPanel11);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel9.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Reporte:"));
        jPanel12.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jbGrpReport.add(jrbReportPrePayroll);
        jrbReportPrePayroll.setSelected(true);
        jrbReportPrePayroll.setText("Prenómina");
        jPanel12.add(jrbReportPrePayroll);

        jbGrpReport.add(jrbReportPayroll);
        jrbReportPayroll.setText("Nómina");
        jPanel12.add(jrbReportPayroll);

        jbGrpReport.add(jrbReportListEarning);
        jrbReportListEarning.setText("Listado de percepciones");
        jPanel12.add(jrbReportListEarning);

        jbGrpReport.add(jrbReportListDeductions);
        jrbReportListDeductions.setText("Listado de deducciones");
        jPanel12.add(jrbReportListDeductions);

        jPanel9.add(jPanel12, java.awt.BorderLayout.WEST);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenamiento:"));
        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jbGrpOrderBy.add(jrbOrderByNumEmployee);
        jrbOrderByNumEmployee.setText("Número del empleado");
        jPanel2.add(jrbOrderByNumEmployee);

        jbGrpOrderBy.add(jrbOrderByNameEmployee);
        jrbOrderByNameEmployee.setText("Nombre del empleado");
        jPanel2.add(jrbOrderByNameEmployee);

        jbGrpOrderBy.add(jrbOrderByNumDepartament);
        jrbOrderByNumDepartament.setText("Código del departamento y número del empleado");
        jPanel2.add(jrbOrderByNumDepartament);

        jbGrpOrderBy.add(jrbOrderByNameDepartament);
        jrbOrderByNameDepartament.setSelected(true);
        jrbOrderByNameDepartament.setText("Código del departamento y nombre del empleado");
        jPanel2.add(jrbOrderByNameDepartament);

        jPanel9.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel7, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.ButtonGroup jbGrpOrderBy;
    private javax.swing.ButtonGroup jbGrpReport;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlPayrollNumber;
    private javax.swing.JLabel jlYear;
    private javax.swing.JRadioButton jrbOrderByNameDepartament;
    private javax.swing.JRadioButton jrbOrderByNameEmployee;
    private javax.swing.JRadioButton jrbOrderByNumDepartament;
    private javax.swing.JRadioButton jrbOrderByNumEmployee;
    private javax.swing.JRadioButton jrbReportListDeductions;
    private javax.swing.JRadioButton jrbReportListEarning;
    private javax.swing.JRadioButton jrbReportPayroll;
    private javax.swing.JRadioButton jrbReportPrePayroll;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPayrollNumber;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodYear;
    private sa.lib.gui.bean.SBeanFieldText moTextDateEnd;
    private sa.lib.gui.bean.SBeanFieldText moTextDateStart;
    private sa.lib.gui.bean.SBeanFieldText moTextPaymentType;
    // End of variables declaration//GEN-END:variables

    private String getOrderBy(final int reportId) {
        String orderBy = "";
        
        switch (reportId) {
            case SModConsts.HRSR_PRE_PAY:
                if (jrbOrderByNumEmployee.isSelected()) {
                    orderBy = "ORDER BY dep.name, dep.id_dep, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameEmployee.isSelected()) {
                    orderBy = "ORDER BY dep.name, dep.id_dep, bp.bp, bp.id_bp; ";
                }
                else if (jrbOrderByNumDepartament.isSelected()) {
                    orderBy = "ORDER BY dep.name, dep.code, dep.id_dep, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameDepartament.isSelected()) {
                    orderBy = "ORDER BY dep.name, dep.code, dep.id_dep, bp.bp, bp.id_bp; ";
                }
                break;
            case SModConsts.HRSR_PAY:
                if (jrbOrderByNumEmployee.isSelected()) {
                    orderBy = "ORDER BY dep.code, dep.id_dep, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameEmployee.isSelected()) {
                    orderBy = "ORDER BY dep.code, dep.id_dep, bp.bp, bp.id_bp; ";
                }
                else if (jrbOrderByNumDepartament.isSelected()) {
                    orderBy = "ORDER BY dep.code, dep.id_dep, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameDepartament.isSelected()) {
                    orderBy = "ORDER BY dep.code, dep.id_dep, bp.bp, bp.id_bp; ";
                }
                break;
            case SModConsts.HRSR_LIST_EAR:
                if (jrbOrderByNumEmployee.isSelected()) {
                    orderBy = "ORDER BY ear.name, ear.code, ear.id_ear, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameEmployee.isSelected()) {
                    orderBy = "ORDER BY ear.name, ear.code, ear.id_ear, bp.bp, bp.id_bp; ";
                }
                else if (jrbOrderByNumDepartament.isSelected()) {
                    orderBy = "ORDER BY ear.name, ear.code, ear.id_ear, dep.code, dep.id_dep, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameDepartament.isSelected()) {
                    orderBy = "ORDER BY ear.name, ear.code, ear.id_ear, dep.code, dep.id_dep, bp.bp, bp.id_bp; ";
                }
                break;
            case SModConsts.HRSR_LIST_DED:
                if (jrbOrderByNumEmployee.isSelected()) {
                    orderBy = "ORDER BY ded.name, ded.code, ded.id_ded, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameEmployee.isSelected()) {
                    orderBy = "ORDER BY ded.name, ded.code, ded.id_ded, bp.bp, bp.id_bp; ";
                }
                else if (jrbOrderByNumDepartament.isSelected()) {
                    orderBy = "ORDER BY ded.name, ded.code, ded.id_ded, dep.code, dep.id_dep, emp.num, bp.id_bp; ";
                }
                else if (jrbOrderByNameDepartament.isSelected()) {
                    orderBy = "ORDER BY ded.name, ded.code, ded.id_ded, dep.code, dep.id_dep, bp.bp, bp.id_bp; ";
                }
                break;
        }
        
        return orderBy;
    }
    
    private void renderPayroll() {
        moPayroll = (SDbPayroll)  miClient.getSession().readRegistry(SModConsts.HRS_PAY, new int[] { mnPayrollId }, SDbConsts.MODE_STEALTH);
        
        moIntPeriodYear.setText(moPayroll.getFiscalYear() + "");
        moIntPayrollNumber.setText(moPayroll.getNumber() + "");
        moTextPaymentType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { mnPaymentTypeId = moPayroll.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
        moTextDateStart.setValue(SLibUtils.DateFormatDate.format(moPayroll.getDateStart()));
        moTextDateEnd.setValue(SLibUtils.DateFormatDate.format(moPayroll.getDateEnd()));
    }
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        moPanelHrsDepartaments = new SPanelHrsDepartaments(miClient);

        jPanel3.add(moPanelHrsDepartaments, BorderLayout.CENTER);

        moFields.setFormButton(jbPrint);
        
        reloadCatalogues();
    }

    public void reloadCatalogues() {
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = moPanelHrsDepartaments.validatePanel();
        }
        
        return validation;
    }

    @Override
    public void createParamsMap() {
        SDataBizPartner bizPartnerCompany = null;
        String sDepartamentsId = "";
        String sDepartamentsName = "";

        bizPartnerCompany = new SDataBizPartner();
        bizPartnerCompany.read(new int[] { ((SClientInterface) miClient).getSessionXXX().getCompany().getPkCompanyId() }, miClient.getSession().getStatement());
        
        try {
            moParamsMap = miClient.createReportParams();
            
            sDepartamentsId = (String) moPanelHrsDepartaments.getValue(SGuiConsts.PARAM_KEY);
            sDepartamentsName = (String) moPanelHrsDepartaments.getValue(SGuiConsts.PARAM_ITEM);
            moParamsMap.put("sSqlWhereDepartaments", sDepartamentsId.isEmpty() ? "" : " AND dep.id_dep IN(" + sDepartamentsId + ") ");
            moParamsMap.put("sDepartaments", sDepartamentsName.isEmpty() || (boolean) moPanelHrsDepartaments.getValue(SGuiConsts.PARAM_ROWS) ? "(TODOS)" : sDepartamentsName + " ");

            if (jrbReportPrePayroll.isSelected()) {
                mnFormType = SModConsts.HRSR_PRE_PAY;

                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("RegistroPatronal", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getRegistrySs());
                moParamsMap.put("sEmiRfc", bizPartnerCompany.getFiscalId());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
            else if (jrbReportPayroll.isSelected()) {
                mnFormType = SModConsts.HRSR_PAY;
                
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("RegistroPatronal", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getRegistrySs());
                moParamsMap.put("sEmiRfc", bizPartnerCompany.getFiscalId());
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sPayrollType", moPayroll.getNumber() + "  " + (String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { moPayroll.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
            else if (jrbReportListEarning.isSelected()) {
                mnFormType = SModConsts.HRSR_LIST_EAR;
                
                moParamsMap.put("sTitle", "DE PERCEPCIONES");
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sPayrollType", moPayroll.getNumber() + "  " + (String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { moPayroll.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
            else if (jrbReportListDeductions.isSelected()) {
                mnFormType = SModConsts.HRSR_LIST_DED;
                
                moParamsMap.put("sTitle", "DE DEDUCCIONES");
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sPayrollType", moPayroll.getNumber() + "  " + (String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { moPayroll.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    public void setReportsParams(final int payrollId) {
        mnPayrollId = payrollId;
        
        renderPayroll();
    }
}
