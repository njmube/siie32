/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * STabFilterDocumentType.java
 *
 * Created on 5/02/2010, 04:12:33 PM
 */

package erp.table;

import erp.data.SDataReadDescriptions;
import erp.lib.SLibConstants;
import erp.lib.table.STableSetting;
import erp.mtrn.form.SDialogFilterDocumentType;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class STabFilterDocumentType extends javax.swing.JPanel {

    private erp.client.SClientInterface miClient;
    private erp.lib.table.STableTab moTab;
    private erp.lib.table.STableSetting moSetting;
    private erp.mtrn.form.SDialogFilterDocumentType moDialogFilterDocumentType;

    private int mnDataType;
    private int[] manDataFilter;
    private int[] manDocumentTypeKey;

    /** Creates new form STabFilterDocumentType */
    public STabFilterDocumentType(erp.client.SClientInterface client, erp.lib.table.STableTab tableTab, int dataType) {
        this(client, tableTab, dataType, null);
    }

    /** Creates new form STabFilterDocumentType */
    public STabFilterDocumentType(erp.client.SClientInterface client, erp.lib.table.STableTab tableTab, int dataType, int[] dataFilter) {
        miClient = client;
        moTab = tableTab;
        mnDataType = dataType;
        manDataFilter = dataFilter;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfTypeDocument = new javax.swing.JTextField();
        jbTypeDocument = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jtfTypeDocument.setEditable(false);
        jtfTypeDocument.setText("CODE");
        jtfTypeDocument.setToolTipText("Tipo de documento");
        jtfTypeDocument.setPreferredSize(new java.awt.Dimension(65, 23));
        add(jtfTypeDocument);

        jbTypeDocument.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_filter_doc.gif"))); // NOI18N
        jbTypeDocument.setToolTipText("Seleccionar tipo de documento");
        jbTypeDocument.setPreferredSize(new java.awt.Dimension(23, 23));
        jbTypeDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTypeDocumentActionPerformed(evt);
            }
        });
        add(jbTypeDocument);
    }// </editor-fold>//GEN-END:initComponents

    private void jbTypeDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTypeDocumentActionPerformed
        actionTypeDocument();
    }//GEN-LAST:event_jbTypeDocumentActionPerformed

    private void initComponentsExtra() {
        manDocumentTypeKey = null;
        moSetting = new STableSetting(SFilterConstants.SETTING_FILTER_DOC_TP, manDocumentTypeKey);
        moDialogFilterDocumentType = new SDialogFilterDocumentType(miClient, mnDataType, manDataFilter);

        renderText();
    }

    private void actionTypeDocument() {
        moDialogFilterDocumentType.formRefreshCatalogues();
        moDialogFilterDocumentType.formReset();
        moDialogFilterDocumentType.setDocumentTypeKey(manDocumentTypeKey);
        moDialogFilterDocumentType.setFormVisible(true);

        if (moDialogFilterDocumentType.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            manDocumentTypeKey = moDialogFilterDocumentType.getDocumentTypeKey();
            renderText();

            moSetting.setSetting(manDocumentTypeKey);
            moTab.updateSetting(moSetting);
        }
    }

    private void renderText() {
        jtfTypeDocument.setText(manDocumentTypeKey == null ? SLibConstants.TXT_ALL : SDataReadDescriptions.getCatalogueDescription(miClient, mnDataType, manDocumentTypeKey, SLibConstants.DESCRIPTION_CODE));
        jtfTypeDocument.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbTypeDocument;
    private javax.swing.JTextField jtfTypeDocument;
    // End of variables declaration//GEN-END:variables

    public void setDataFilter(final int[] filter) {
        manDataFilter = filter;
        moDialogFilterDocumentType.setDataFilterKey(manDataFilter);
    }

    public void setFixedDocumentType(final int[] type) {
        manDocumentTypeKey = type;
        renderText();

        moSetting.setSetting(manDocumentTypeKey);
        moTab.addSetting(moSetting);

        jbTypeDocument.setEnabled(false);   // a fixed type was set
    }
}
